<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (2,105 samples, 3.57%)</title><rect x="0.0187%" y="229" width="3.5719%" height="15" fill="rgb(227,0,7)"/><text x="0.2687%" y="239.50">&lt;I a..</text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (101 samples, 0.17%)</title><rect x="3.5906%" y="229" width="0.1714%" height="15" fill="rgb(217,0,24)"/><text x="3.8406%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (81 samples, 0.14%)</title><rect x="3.8875%" y="101" width="0.1374%" height="15" fill="rgb(221,193,54)"/><text x="4.1375%" y="111.50"></text></g><g><title>alloc::alloc::alloc (79 samples, 0.13%)</title><rect x="3.8909%" y="85" width="0.1341%" height="15" fill="rgb(248,212,6)"/><text x="4.1409%" y="95.50"></text></g><g><title>__GI___libc_malloc (72 samples, 0.12%)</title><rect x="3.9028%" y="69" width="0.1222%" height="15" fill="rgb(208,68,35)"/><text x="4.1528%" y="79.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (139 samples, 0.24%)</title><rect x="3.7908%" y="229" width="0.2359%" height="15" fill="rgb(232,128,0)"/><text x="4.0408%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (108 samples, 0.18%)</title><rect x="3.8434%" y="213" width="0.1833%" height="15" fill="rgb(207,160,47)"/><text x="4.0934%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (104 samples, 0.18%)</title><rect x="3.8502%" y="197" width="0.1765%" height="15" fill="rgb(228,23,34)"/><text x="4.1002%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (104 samples, 0.18%)</title><rect x="3.8502%" y="181" width="0.1765%" height="15" fill="rgb(218,30,26)"/><text x="4.1002%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (82 samples, 0.14%)</title><rect x="3.8875%" y="165" width="0.1391%" height="15" fill="rgb(220,122,19)"/><text x="4.1375%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (82 samples, 0.14%)</title><rect x="3.8875%" y="149" width="0.1391%" height="15" fill="rgb(250,228,42)"/><text x="4.1375%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (82 samples, 0.14%)</title><rect x="3.8875%" y="133" width="0.1391%" height="15" fill="rgb(240,193,28)"/><text x="4.1375%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (82 samples, 0.14%)</title><rect x="3.8875%" y="117" width="0.1391%" height="15" fill="rgb(216,20,37)"/><text x="4.1375%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (874 samples, 1.48%)</title><rect x="4.1930%" y="85" width="1.4831%" height="15" fill="rgb(206,188,39)"/><text x="4.4430%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (874 samples, 1.48%)</title><rect x="4.1930%" y="69" width="1.4831%" height="15" fill="rgb(217,207,13)"/><text x="4.4430%" y="79.50"></text></g><g><title>core::ptr::write (859 samples, 1.46%)</title><rect x="4.2184%" y="53" width="1.4576%" height="15" fill="rgb(231,73,38)"/><text x="4.4684%" y="63.50"></text></g><g><title>__memmove_avx_unaligned_erms (831 samples, 1.41%)</title><rect x="4.2659%" y="37" width="1.4101%" height="15" fill="rgb(225,20,46)"/><text x="4.5159%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::{{closure}} (904 samples, 1.53%)</title><rect x="4.1777%" y="117" width="1.5340%" height="15" fill="rgb(210,31,41)"/><text x="4.4277%" y="127.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (904 samples, 1.53%)</title><rect x="4.1777%" y="101" width="1.5340%" height="15" fill="rgb(221,200,47)"/><text x="4.4277%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (931 samples, 1.58%)</title><rect x="4.1404%" y="197" width="1.5798%" height="15" fill="rgb(226,26,5)"/><text x="4.3904%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (931 samples, 1.58%)</title><rect x="4.1404%" y="181" width="1.5798%" height="15" fill="rgb(249,33,26)"/><text x="4.3904%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (931 samples, 1.58%)</title><rect x="4.1404%" y="165" width="1.5798%" height="15" fill="rgb(235,183,28)"/><text x="4.3904%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (931 samples, 1.58%)</title><rect x="4.1404%" y="149" width="1.5798%" height="15" fill="rgb(221,5,38)"/><text x="4.3904%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (925 samples, 1.57%)</title><rect x="4.1505%" y="133" width="1.5696%" height="15" fill="rgb(247,18,42)"/><text x="4.4005%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (989 samples, 1.68%)</title><rect x="4.0555%" y="229" width="1.6782%" height="15" fill="rgb(241,131,45)"/><text x="4.3055%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (960 samples, 1.63%)</title><rect x="4.1047%" y="213" width="1.6290%" height="15" fill="rgb(249,31,29)"/><text x="4.3547%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (142 samples, 0.24%)</title><rect x="5.8983%" y="117" width="0.2410%" height="15" fill="rgb(225,111,53)"/><text x="6.1483%" y="127.50"></text></g><g><title>alloc::alloc::alloc (131 samples, 0.22%)</title><rect x="5.9170%" y="101" width="0.2223%" height="15" fill="rgb(238,160,17)"/><text x="6.1670%" y="111.50"></text></g><g><title>__GI___libc_malloc (115 samples, 0.20%)</title><rect x="5.9441%" y="85" width="0.1951%" height="15" fill="rgb(214,148,48)"/><text x="6.1941%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (264 samples, 0.45%)</title><rect x="5.7337%" y="229" width="0.4480%" height="15" fill="rgb(232,36,49)"/><text x="5.9837%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (211 samples, 0.36%)</title><rect x="5.8237%" y="213" width="0.3580%" height="15" fill="rgb(209,103,24)"/><text x="6.0737%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (211 samples, 0.36%)</title><rect x="5.8237%" y="197" width="0.3580%" height="15" fill="rgb(229,88,8)"/><text x="6.0737%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (174 samples, 0.30%)</title><rect x="5.8864%" y="181" width="0.2953%" height="15" fill="rgb(213,181,19)"/><text x="6.1364%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (167 samples, 0.28%)</title><rect x="5.8983%" y="165" width="0.2834%" height="15" fill="rgb(254,191,54)"/><text x="6.1483%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (167 samples, 0.28%)</title><rect x="5.8983%" y="149" width="0.2834%" height="15" fill="rgb(241,83,37)"/><text x="6.1483%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (167 samples, 0.28%)</title><rect x="5.8983%" y="133" width="0.2834%" height="15" fill="rgb(233,36,39)"/><text x="6.1483%" y="143.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,474 samples, 2.50%)</title><rect x="7.8752%" y="213" width="2.5012%" height="15" fill="rgb(226,3,54)"/><text x="8.1252%" y="223.50">&lt;c..</text></g><g><title>__memmove_avx_unaligned_erms (1,273 samples, 2.16%)</title><rect x="8.2162%" y="197" width="2.1601%" height="15" fill="rgb(245,192,40)"/><text x="8.4662%" y="207.50">_..</text></g><g><title>__memmove_avx_unaligned_erms (214 samples, 0.36%)</title><rect x="10.4612%" y="197" width="0.3631%" height="15" fill="rgb(238,167,29)"/><text x="10.7112%" y="207.50"></text></g><g><title>&lt;cs::code_function::CodeFunction as cs::lang::Function&gt;::call::{{closure}} (398 samples, 0.68%)</title><rect x="10.3764%" y="213" width="0.6754%" height="15" fill="rgb(232,182,51)"/><text x="10.6264%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (108 samples, 0.18%)</title><rect x="10.8685%" y="197" width="0.1833%" height="15" fill="rgb(231,60,39)"/><text x="11.1185%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (108 samples, 0.18%)</title><rect x="10.8685%" y="181" width="0.1833%" height="15" fill="rgb(208,69,12)"/><text x="11.1185%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 samples, 0.18%)</title><rect x="10.8685%" y="165" width="0.1833%" height="15" fill="rgb(235,93,37)"/><text x="11.1185%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (3,314 samples, 5.62%)</title><rect x="11.0517%" y="213" width="5.6234%" height="15" fill="rgb(213,116,39)"/><text x="11.3017%" y="223.50">__memmo..</text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 0.10%)</title><rect x="18.0360%" y="197" width="0.1018%" height="15" fill="rgb(222,207,29)"/><text x="18.2860%" y="207.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (67 samples, 0.11%)</title><rect x="18.1379%" y="197" width="0.1137%" height="15" fill="rgb(206,96,30)"/><text x="18.3879%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (5,625 samples, 9.54%)</title><rect x="18.2787%" y="197" width="9.5449%" height="15" fill="rgb(218,138,4)"/><text x="18.5287%" y="207.50">__memmove_avx_..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (263 samples, 0.45%)</title><rect x="27.9254%" y="197" width="0.4463%" height="15" fill="rgb(250,191,14)"/><text x="28.1754%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (239 samples, 0.41%)</title><rect x="27.9661%" y="181" width="0.4056%" height="15" fill="rgb(239,60,40)"/><text x="28.2161%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (130 samples, 0.22%)</title><rect x="28.4820%" y="181" width="0.2206%" height="15" fill="rgb(206,27,48)"/><text x="28.7320%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (98 samples, 0.17%)</title><rect x="28.8807%" y="165" width="0.1663%" height="15" fill="rgb(225,35,8)"/><text x="29.1307%" y="175.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (91 samples, 0.15%)</title><rect x="29.0470%" y="165" width="0.1544%" height="15" fill="rgb(250,213,24)"/><text x="29.2970%" y="175.50"></text></g><g><title>__GI___libc_free (137 samples, 0.23%)</title><rect x="29.3525%" y="117" width="0.2325%" height="15" fill="rgb(247,123,22)"/><text x="29.6025%" y="127.50"></text></g><g><title>core::ptr::drop_in_place (1,035 samples, 1.76%)</title><rect x="28.3717%" y="197" width="1.7563%" height="15" fill="rgb(231,138,38)"/><text x="28.6217%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (837 samples, 1.42%)</title><rect x="28.7077%" y="181" width="1.4203%" height="15" fill="rgb(231,145,46)"/><text x="28.9577%" y="191.50"></text></g><g><title>alloc::alloc::box_free (546 samples, 0.93%)</title><rect x="29.2015%" y="165" width="0.9265%" height="15" fill="rgb(251,118,11)"/><text x="29.4515%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (501 samples, 0.85%)</title><rect x="29.2778%" y="149" width="0.8501%" height="15" fill="rgb(217,147,25)"/><text x="29.5278%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (499 samples, 0.85%)</title><rect x="29.2812%" y="133" width="0.8467%" height="15" fill="rgb(247,81,37)"/><text x="29.5312%" y="143.50"></text></g><g><title>_int_free (320 samples, 0.54%)</title><rect x="29.5849%" y="117" width="0.5430%" height="15" fill="rgb(209,12,38)"/><text x="29.8349%" y="127.50"></text></g><g><title>cs::external_func::resolve_all_futures (486 samples, 0.82%)</title><rect x="30.1279%" y="197" width="0.8247%" height="15" fill="rgb(227,1,9)"/><text x="30.3779%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (455 samples, 0.77%)</title><rect x="30.1805%" y="181" width="0.7721%" height="15" fill="rgb(248,47,43)"/><text x="30.4305%" y="191.50"></text></g><g><title>cs::env::Interpreter::evaluate::{{closure}} (9,147 samples, 15.52%)</title><rect x="16.6752%" y="213" width="15.5213%" height="15" fill="rgb(221,10,30)"/><text x="16.9252%" y="223.50">cs::env::Interpreter::ev..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (718 samples, 1.22%)</title><rect x="30.9781%" y="197" width="1.2184%" height="15" fill="rgb(210,229,1)"/><text x="31.2281%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (586 samples, 0.99%)</title><rect x="31.2021%" y="181" width="0.9944%" height="15" fill="rgb(222,148,37)"/><text x="31.4521%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (576 samples, 0.98%)</title><rect x="32.3203%" y="197" width="0.9774%" height="15" fill="rgb(234,67,33)"/><text x="32.5703%" y="207.50"></text></g><g><title>cs::env::Interpreter::evaluate_assignment::{{closure}} (769 samples, 1.30%)</title><rect x="32.1964%" y="213" width="1.3049%" height="15" fill="rgb(247,98,35)"/><text x="32.4464%" y="223.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (110 samples, 0.19%)</title><rect x="34.8402%" y="197" width="0.1867%" height="15" fill="rgb(247,138,52)"/><text x="35.0902%" y="207.50"></text></g><g><title>core::slice::Iter&lt;T&gt;::post_inc_start (80 samples, 0.14%)</title><rect x="34.8911%" y="181" width="0.1357%" height="15" fill="rgb(213,79,30)"/><text x="35.1411%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (2,663 samples, 4.52%)</title><rect x="35.0268%" y="197" width="4.5188%" height="15" fill="rgb(246,177,23)"/><text x="35.2768%" y="207.50">__mem..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (72 samples, 0.12%)</title><rect x="39.7068%" y="165" width="0.1222%" height="15" fill="rgb(230,62,27)"/><text x="39.9568%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (151 samples, 0.26%)</title><rect x="39.5829%" y="197" width="0.2562%" height="15" fill="rgb(216,154,8)"/><text x="39.8329%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (78 samples, 0.13%)</title><rect x="39.7068%" y="181" width="0.1324%" height="15" fill="rgb(244,35,45)"/><text x="39.9568%" y="191.50"></text></g><g><title>cs::external_func::resolve_all_futures (420 samples, 0.71%)</title><rect x="39.8391%" y="197" width="0.7127%" height="15" fill="rgb(251,115,12)"/><text x="40.0891%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (405 samples, 0.69%)</title><rect x="39.8646%" y="181" width="0.6872%" height="15" fill="rgb(240,54,50)"/><text x="40.1146%" y="191.50"></text></g><g><title>cs::lang::CodeNode::into_argument (70 samples, 0.12%)</title><rect x="40.5518%" y="197" width="0.1188%" height="15" fill="rgb(233,84,52)"/><text x="40.8018%" y="207.50"></text></g><g><title>cs::lang::Value::unwrap_early_return (225 samples, 0.38%)</title><rect x="40.6978%" y="197" width="0.3818%" height="15" fill="rgb(207,117,47)"/><text x="40.9478%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (195 samples, 0.33%)</title><rect x="40.7487%" y="181" width="0.3309%" height="15" fill="rgb(249,43,39)"/><text x="40.9987%" y="191.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (451 samples, 0.77%)</title><rect x="41.0795%" y="197" width="0.7653%" height="15" fill="rgb(209,38,44)"/><text x="41.3295%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (397 samples, 0.67%)</title><rect x="41.1712%" y="181" width="0.6737%" height="15" fill="rgb(236,212,23)"/><text x="41.4212%" y="191.50"></text></g><g><title>cs::env::Interpreter::evaluate_function_call::{{closure}} (5,111 samples, 8.67%)</title><rect x="33.5013%" y="213" width="8.6727%" height="15" fill="rgb(242,79,21)"/><text x="33.7513%" y="223.50">cs::env::Int..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::with_capacity (194 samples, 0.33%)</title><rect x="41.8448%" y="197" width="0.3292%" height="15" fill="rgb(211,96,35)"/><text x="42.0948%" y="207.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (186 samples, 0.32%)</title><rect x="41.8584%" y="181" width="0.3156%" height="15" fill="rgb(253,215,40)"/><text x="42.1084%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (154 samples, 0.26%)</title><rect x="41.9127%" y="165" width="0.2613%" height="15" fill="rgb(211,81,21)"/><text x="42.1627%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (154 samples, 0.26%)</title><rect x="41.9127%" y="149" width="0.2613%" height="15" fill="rgb(208,190,38)"/><text x="42.1627%" y="159.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (141 samples, 0.24%)</title><rect x="41.9348%" y="133" width="0.2393%" height="15" fill="rgb(235,213,38)"/><text x="42.1848%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,321 samples, 2.24%)</title><rect x="42.9834%" y="197" width="2.2416%" height="15" fill="rgb(237,122,38)"/><text x="43.2334%" y="207.50">_..</text></g><g><title>__memmove_avx_unaligned_erms (64 samples, 0.11%)</title><rect x="45.3285%" y="149" width="0.1086%" height="15" fill="rgb(244,218,35)"/><text x="45.5785%" y="159.50"></text></g><g><title>cs::external_func::resolve_all_futures::{{closure}} (1,980 samples, 3.36%)</title><rect x="42.1740%" y="213" width="3.3598%" height="15" fill="rgb(240,68,47)"/><text x="42.4240%" y="223.50">cs:..</text></g><g><title>cs::external_func::resolve_futures (174 samples, 0.30%)</title><rect x="45.2386%" y="197" width="0.2953%" height="15" fill="rgb(210,16,53)"/><text x="45.4886%" y="207.50"></text></g><g><title>cs::lang::Value::new_future (121 samples, 0.21%)</title><rect x="45.3285%" y="181" width="0.2053%" height="15" fill="rgb(235,124,12)"/><text x="45.5785%" y="191.50"></text></g><g><title>cs::lang::Value::new_value_future (121 samples, 0.21%)</title><rect x="45.3285%" y="165" width="0.2053%" height="15" fill="rgb(224,169,11)"/><text x="45.5785%" y="175.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23,311 samples, 39.56%)</title><rect x="6.2224%" y="229" width="39.5558%" height="15" fill="rgb(250,166,2)"/><text x="6.4724%" y="239.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::futu..</text></g><g><title>cs::external_func::resolve_futures::{{closure}} (144 samples, 0.24%)</title><rect x="45.5338%" y="213" width="0.2443%" height="15" fill="rgb(242,216,29)"/><text x="45.7838%" y="223.50"></text></g><g><title>&lt;cs::builtins::DivideTemp as cs::lang::Function&gt;::call (268 samples, 0.45%)</title><rect x="45.8766%" y="229" width="0.4548%" height="15" fill="rgb(230,116,27)"/><text x="46.1266%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (90 samples, 0.15%)</title><rect x="46.1786%" y="213" width="0.1527%" height="15" fill="rgb(228,99,48)"/><text x="46.4286%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (90 samples, 0.15%)</title><rect x="46.1786%" y="197" width="0.1527%" height="15" fill="rgb(253,11,6)"/><text x="46.4286%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (84 samples, 0.14%)</title><rect x="46.6266%" y="181" width="0.1425%" height="15" fill="rgb(247,143,39)"/><text x="46.8766%" y="191.50"></text></g><g><title>&lt;cs::builtins::Subtract as cs::lang::Function&gt;::call (257 samples, 0.44%)</title><rect x="46.4145%" y="229" width="0.4361%" height="15" fill="rgb(236,97,10)"/><text x="46.6645%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (133 samples, 0.23%)</title><rect x="46.6249%" y="213" width="0.2257%" height="15" fill="rgb(233,208,19)"/><text x="46.8749%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (133 samples, 0.23%)</title><rect x="46.6249%" y="197" width="0.2257%" height="15" fill="rgb(216,164,2)"/><text x="46.8749%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (62 samples, 0.11%)</title><rect x="47.0814%" y="213" width="0.1052%" height="15" fill="rgb(220,129,5)"/><text x="47.3314%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (90 samples, 0.15%)</title><rect x="47.1866%" y="213" width="0.1527%" height="15" fill="rgb(242,17,10)"/><text x="47.4366%" y="223.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (90 samples, 0.15%)</title><rect x="47.1866%" y="197" width="0.1527%" height="15" fill="rgb(242,107,0)"/><text x="47.4366%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (90 samples, 0.15%)</title><rect x="47.1866%" y="181" width="0.1527%" height="15" fill="rgb(251,28,31)"/><text x="47.4366%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::read (61 samples, 0.10%)</title><rect x="47.2358%" y="165" width="0.1035%" height="15" fill="rgb(233,223,10)"/><text x="47.4858%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (61 samples, 0.10%)</title><rect x="47.2358%" y="149" width="0.1035%" height="15" fill="rgb(215,21,27)"/><text x="47.4858%" y="159.50"></text></g><g><title>core::ptr::read (61 samples, 0.10%)</title><rect x="47.2358%" y="133" width="0.1035%" height="15" fill="rgb(232,23,21)"/><text x="47.4858%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (216 samples, 0.37%)</title><rect x="47.3393%" y="213" width="0.3665%" height="15" fill="rgb(244,5,23)"/><text x="47.5893%" y="223.50"></text></g><g><title>cs::code_function::CodeFunction::code (91 samples, 0.15%)</title><rect x="47.7941%" y="213" width="0.1544%" height="15" fill="rgb(226,81,46)"/><text x="48.0441%" y="223.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (73 samples, 0.12%)</title><rect x="48.0435%" y="181" width="0.1239%" height="15" fill="rgb(247,70,30)"/><text x="48.2935%" y="191.50"></text></g><g><title>&lt;cs::code_function::CodeFunction as cs::lang::Function&gt;::call (781 samples, 1.33%)</title><rect x="46.8506%" y="229" width="1.3253%" height="15" fill="rgb(212,68,19)"/><text x="47.1006%" y="239.50"></text></g><g><title>cs::lang::Value::new_future (134 samples, 0.23%)</title><rect x="47.9485%" y="213" width="0.2274%" height="15" fill="rgb(240,187,13)"/><text x="48.1985%" y="223.50"></text></g><g><title>cs::lang::Value::new_value_future (130 samples, 0.22%)</title><rect x="47.9553%" y="197" width="0.2206%" height="15" fill="rgb(223,113,26)"/><text x="48.2053%" y="207.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::clone::Clone&gt;::clone (290 samples, 0.49%)</title><rect x="49.0413%" y="197" width="0.4921%" height="15" fill="rgb(206,192,2)"/><text x="49.2913%" y="207.50"></text></g><g><title>alloc::alloc::exchange_malloc (278 samples, 0.47%)</title><rect x="49.0616%" y="181" width="0.4717%" height="15" fill="rgb(241,108,4)"/><text x="49.3116%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (278 samples, 0.47%)</title><rect x="49.0616%" y="165" width="0.4717%" height="15" fill="rgb(247,173,49)"/><text x="49.3116%" y="175.50"></text></g><g><title>alloc::alloc::alloc (278 samples, 0.47%)</title><rect x="49.0616%" y="149" width="0.4717%" height="15" fill="rgb(224,114,35)"/><text x="49.3116%" y="159.50"></text></g><g><title>__GI___libc_malloc (265 samples, 0.45%)</title><rect x="49.0837%" y="133" width="0.4497%" height="15" fill="rgb(245,159,27)"/><text x="49.3337%" y="143.50"></text></g><g><title>_int_malloc (141 samples, 0.24%)</title><rect x="49.2941%" y="117" width="0.2393%" height="15" fill="rgb(245,172,44)"/><text x="49.5441%" y="127.50"></text></g><g><title>&lt;cs::lang::Argument as core::clone::Clone&gt;::clone (331 samples, 0.56%)</title><rect x="49.0022%" y="213" width="0.5617%" height="15" fill="rgb(236,23,11)"/><text x="49.2522%" y="223.50"></text></g><g><title>&lt;cs::lang::FunctionCall as core::clone::Clone&gt;::clone (169 samples, 0.29%)</title><rect x="49.6267%" y="213" width="0.2868%" height="15" fill="rgb(205,117,38)"/><text x="49.8767%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::clone::Clone&gt;::clone (143 samples, 0.24%)</title><rect x="49.6708%" y="197" width="0.2427%" height="15" fill="rgb(237,72,25)"/><text x="49.9208%" y="207.50"></text></g><g><title>alloc::alloc::exchange_malloc (133 samples, 0.23%)</title><rect x="49.6878%" y="181" width="0.2257%" height="15" fill="rgb(244,70,9)"/><text x="49.9378%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (133 samples, 0.23%)</title><rect x="49.6878%" y="165" width="0.2257%" height="15" fill="rgb(217,125,39)"/><text x="49.9378%" y="175.50"></text></g><g><title>alloc::alloc::alloc (130 samples, 0.22%)</title><rect x="49.6929%" y="149" width="0.2206%" height="15" fill="rgb(235,36,10)"/><text x="49.9429%" y="159.50"></text></g><g><title>__GI___libc_malloc (125 samples, 0.21%)</title><rect x="49.7014%" y="133" width="0.2121%" height="15" fill="rgb(251,123,47)"/><text x="49.9514%" y="143.50"></text></g><g><title>&lt;cs::lang::CodeNode as core::clone::Clone&gt;::clone (1,079 samples, 1.83%)</title><rect x="48.1759%" y="229" width="1.8309%" height="15" fill="rgb(221,13,13)"/><text x="48.4259%" y="239.50">&lt;..</text></g><g><title>&lt;cs::lang::Value as core::clone::Clone&gt;::clone (391 samples, 0.66%)</title><rect x="50.0068%" y="229" width="0.6635%" height="15" fill="rgb(238,131,9)"/><text x="50.2568%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (88 samples, 0.15%)</title><rect x="50.7466%" y="213" width="0.1493%" height="15" fill="rgb(211,50,8)"/><text x="50.9966%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (88 samples, 0.15%)</title><rect x="50.7466%" y="197" width="0.1493%" height="15" fill="rgb(245,182,24)"/><text x="50.9966%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_add (88 samples, 0.15%)</title><rect x="50.7466%" y="181" width="0.1493%" height="15" fill="rgb(242,14,37)"/><text x="50.9966%" y="191.50"></text></g><g><title>&lt;futures::task_impl::std::ArcWrapped&lt;T&gt; as futures::task_impl::UnsafeNotify&gt;::clone_raw (91 samples, 0.15%)</title><rect x="50.7466%" y="229" width="0.1544%" height="15" fill="rgb(246,228,12)"/><text x="50.9966%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (98 samples, 0.17%)</title><rect x="51.1081%" y="197" width="0.1663%" height="15" fill="rgb(213,55,15)"/><text x="51.3581%" y="207.50"></text></g><g><title>&lt;futures_util::fns::UnwrapOrElseFn&lt;F&gt; as futures_util::fns::FnOnce1&lt;core::result::Result&lt;T,E&gt;&gt;&gt;::call_once (416 samples, 0.71%)</title><rect x="51.0962%" y="213" width="0.7059%" height="15" fill="rgb(209,9,3)"/><text x="51.3462%" y="223.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (311 samples, 0.53%)</title><rect x="51.2744%" y="197" width="0.5277%" height="15" fill="rgb(230,59,30)"/><text x="51.5244%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (300 samples, 0.51%)</title><rect x="51.2930%" y="181" width="0.5091%" height="15" fill="rgb(209,121,21)"/><text x="51.5430%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (127 samples, 0.22%)</title><rect x="51.8241%" y="213" width="0.2155%" height="15" fill="rgb(220,109,13)"/><text x="52.0741%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (121 samples, 0.21%)</title><rect x="52.1686%" y="197" width="0.2053%" height="15" fill="rgb(232,18,1)"/><text x="52.4186%" y="207.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1,194 samples, 2.03%)</title><rect x="51.0062%" y="229" width="2.0261%" height="15" fill="rgb(215,41,42)"/><text x="51.2562%" y="239.50">&lt;..</text></g><g><title>futures_util::future::future::map::_::&lt;impl futures_util::future::future::map::Map&lt;Fut,F&gt;&gt;::project_replace (568 samples, 0.96%)</title><rect x="52.0685%" y="213" width="0.9638%" height="15" fill="rgb(224,123,36)"/><text x="52.3185%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (388 samples, 0.66%)</title><rect x="52.3739%" y="197" width="0.6584%" height="15" fill="rgb(240,125,3)"/><text x="52.6239%" y="207.50"></text></g><g><title>&lt;pin_project::__private::UnsafeOverwriteGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (385 samples, 0.65%)</title><rect x="52.3790%" y="181" width="0.6533%" height="15" fill="rgb(205,98,50)"/><text x="52.6290%" y="191.50"></text></g><g><title>core::ptr::write (385 samples, 0.65%)</title><rect x="52.3790%" y="165" width="0.6533%" height="15" fill="rgb(205,185,37)"/><text x="52.6290%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (370 samples, 0.63%)</title><rect x="52.4045%" y="149" width="0.6278%" height="15" fill="rgb(238,207,15)"/><text x="52.6545%" y="159.50"></text></g><g><title>&lt;futures_util::future::future::shared::Notifier as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (150 samples, 0.25%)</title><rect x="53.0323%" y="229" width="0.2545%" height="15" fill="rgb(213,199,42)"/><text x="53.2823%" y="239.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (102 samples, 0.17%)</title><rect x="53.1138%" y="213" width="0.1731%" height="15" fill="rgb(235,201,11)"/><text x="53.3638%" y="223.50"></text></g><g><title>std::sys_common::mutex::Mutex::raw_lock (97 samples, 0.16%)</title><rect x="53.1222%" y="197" width="0.1646%" height="15" fill="rgb(207,46,11)"/><text x="53.3722%" y="207.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (97 samples, 0.16%)</title><rect x="53.1222%" y="181" width="0.1646%" height="15" fill="rgb(241,35,35)"/><text x="53.3722%" y="191.50"></text></g><g><title>__GI___pthread_mutex_lock (95 samples, 0.16%)</title><rect x="53.1256%" y="165" width="0.1612%" height="15" fill="rgb(243,32,47)"/><text x="53.3756%" y="175.50"></text></g><g><title>&lt;slab::Drain&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 0.12%)</title><rect x="53.6873%" y="213" width="0.1205%" height="15" fill="rgb(247,202,23)"/><text x="53.9373%" y="223.50"></text></g><g><title>&lt;alloc::vec::Drain&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 0.11%)</title><rect x="53.6975%" y="197" width="0.1103%" height="15" fill="rgb(219,102,11)"/><text x="53.9475%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (288 samples, 0.49%)</title><rect x="53.8078%" y="213" width="0.4887%" height="15" fill="rgb(243,110,44)"/><text x="54.0578%" y="223.50"></text></g><g><title>std::sys_common::mutex::Mutex::raw_unlock (126 samples, 0.21%)</title><rect x="54.3067%" y="165" width="0.2138%" height="15" fill="rgb(222,74,54)"/><text x="54.5567%" y="175.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (126 samples, 0.21%)</title><rect x="54.3067%" y="149" width="0.2138%" height="15" fill="rgb(216,99,12)"/><text x="54.5567%" y="159.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (115 samples, 0.20%)</title><rect x="54.3253%" y="133" width="0.1951%" height="15" fill="rgb(226,22,26)"/><text x="54.5753%" y="143.50"></text></g><g><title>core::mem::drop (143 samples, 0.24%)</title><rect x="54.2965%" y="213" width="0.2427%" height="15" fill="rgb(217,163,10)"/><text x="54.5465%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (143 samples, 0.24%)</title><rect x="54.2965%" y="197" width="0.2427%" height="15" fill="rgb(213,25,53)"/><text x="54.5465%" y="207.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (137 samples, 0.23%)</title><rect x="54.3067%" y="181" width="0.2325%" height="15" fill="rgb(252,105,26)"/><text x="54.5567%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (93 samples, 0.16%)</title><rect x="54.6274%" y="149" width="0.1578%" height="15" fill="rgb(220,39,43)"/><text x="54.8774%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (85 samples, 0.14%)</title><rect x="54.6409%" y="133" width="0.1442%" height="15" fill="rgb(229,68,48)"/><text x="54.8909%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (101 samples, 0.17%)</title><rect x="54.6274%" y="165" width="0.1714%" height="15" fill="rgb(252,8,32)"/><text x="54.8774%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (192 samples, 0.33%)</title><rect x="54.6019%" y="213" width="0.3258%" height="15" fill="rgb(223,20,43)"/><text x="54.8519%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (190 samples, 0.32%)</title><rect x="54.6053%" y="197" width="0.3224%" height="15" fill="rgb(229,81,49)"/><text x="54.8553%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (185 samples, 0.31%)</title><rect x="54.6138%" y="181" width="0.3139%" height="15" fill="rgb(236,28,36)"/><text x="54.8638%" y="191.50"></text></g><g><title>alloc::alloc::box_free (76 samples, 0.13%)</title><rect x="54.7988%" y="165" width="0.1290%" height="15" fill="rgb(249,185,26)"/><text x="55.0488%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (71 samples, 0.12%)</title><rect x="54.8072%" y="149" width="0.1205%" height="15" fill="rgb(249,174,33)"/><text x="55.0572%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (70 samples, 0.12%)</title><rect x="54.8089%" y="133" width="0.1188%" height="15" fill="rgb(233,201,37)"/><text x="55.0589%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (108 samples, 0.18%)</title><rect x="54.9600%" y="213" width="0.1833%" height="15" fill="rgb(221,78,26)"/><text x="55.2100%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (108 samples, 0.18%)</title><rect x="54.9600%" y="197" width="0.1833%" height="15" fill="rgb(250,127,30)"/><text x="55.2100%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (108 samples, 0.18%)</title><rect x="54.9600%" y="181" width="0.1833%" height="15" fill="rgb(230,49,44)"/><text x="55.2100%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (144 samples, 0.24%)</title><rect x="55.1636%" y="213" width="0.2443%" height="15" fill="rgb(229,67,23)"/><text x="55.4136%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_store (144 samples, 0.24%)</title><rect x="55.1636%" y="197" width="0.2443%" height="15" fill="rgb(249,83,47)"/><text x="55.4136%" y="207.50"></text></g><g><title>&lt;futures_util::future::future::shared::Shared&lt;Fut&gt; as core::future::future::Future&gt;::poll (1,391 samples, 2.36%)</title><rect x="53.2868%" y="229" width="2.3603%" height="15" fill="rgb(215,43,3)"/><text x="53.5368%" y="239.50">&lt;f..</text></g><g><title>slab::Slab&lt;T&gt;::drain (113 samples, 0.19%)</title><rect x="55.4554%" y="213" width="0.1917%" height="15" fill="rgb(238,154,13)"/><text x="55.7054%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (62 samples, 0.11%)</title><rect x="55.7202%" y="229" width="0.1052%" height="15" fill="rgb(219,56,2)"/><text x="55.9702%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (155 samples, 0.26%)</title><rect x="55.8254%" y="229" width="0.2630%" height="15" fill="rgb(233,0,4)"/><text x="56.0754%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (362 samples, 0.61%)</title><rect x="57.9872%" y="165" width="0.6143%" height="15" fill="rgb(235,30,7)"/><text x="58.2372%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,030 samples, 1.75%)</title><rect x="57.2779%" y="181" width="1.7478%" height="15" fill="rgb(250,79,13)"/><text x="57.5279%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (250 samples, 0.42%)</title><rect x="58.6014%" y="165" width="0.4242%" height="15" fill="rgb(211,146,34)"/><text x="58.8514%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (251 samples, 0.43%)</title><rect x="59.0257%" y="181" width="0.4259%" height="15" fill="rgb(228,22,38)"/><text x="59.2757%" y="191.50"></text></g><g><title>core::hash::sip::u8to64_le (313 samples, 0.53%)</title><rect x="59.4516%" y="181" width="0.5311%" height="15" fill="rgb(235,168,5)"/><text x="59.7016%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,246 samples, 3.81%)</title><rect x="56.3718%" y="197" width="3.8112%" height="15" fill="rgb(221,155,16)"/><text x="56.6218%" y="207.50">&lt;cor..</text></g><g><title>core::intrinsics::copy_nonoverlapping (118 samples, 0.20%)</title><rect x="59.9827%" y="181" width="0.2002%" height="15" fill="rgb(215,215,53)"/><text x="60.2327%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,392 samples, 4.06%)</title><rect x="56.1478%" y="229" width="4.0589%" height="15" fill="rgb(223,4,10)"/><text x="56.3978%" y="239.50">&lt;std..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2,260 samples, 3.83%)</title><rect x="56.3718%" y="213" width="3.8349%" height="15" fill="rgb(234,103,6)"/><text x="56.6218%" y="223.50">&lt;cor..</text></g><g><title>&lt;u64 as compiler_builtins::int::Int&gt;::aborting_div (77 samples, 0.13%)</title><rect x="60.2593%" y="229" width="0.1307%" height="15" fill="rgb(227,97,0)"/><text x="60.5093%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_div (77 samples, 0.13%)</title><rect x="60.2593%" y="213" width="0.1307%" height="15" fill="rgb(234,150,53)"/><text x="60.5093%" y="223.50"></text></g><g><title>&lt;cs::builtins::Equals as cs::lang::Function&gt;::call (67 samples, 0.11%)</title><rect x="60.3899%" y="213" width="0.1137%" height="15" fill="rgb(228,201,54)"/><text x="60.6399%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (64 samples, 0.11%)</title><rect x="60.3950%" y="197" width="0.1086%" height="15" fill="rgb(222,22,37)"/><text x="60.6450%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (64 samples, 0.11%)</title><rect x="60.3950%" y="181" width="0.1086%" height="15" fill="rgb(237,53,32)"/><text x="60.6450%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (78 samples, 0.13%)</title><rect x="60.6547%" y="213" width="0.1324%" height="15" fill="rgb(233,25,53)"/><text x="60.9047%" y="223.50"></text></g><g><title>_int_free (114 samples, 0.19%)</title><rect x="60.7921%" y="213" width="0.1934%" height="15" fill="rgb(210,40,34)"/><text x="61.0421%" y="223.50"></text></g><g><title>[[heap]] (423 samples, 0.72%)</title><rect x="60.3899%" y="229" width="0.7178%" height="15" fill="rgb(241,220,44)"/><text x="60.6399%" y="239.50"></text></g><g><title>__GI___libc_malloc (99 samples, 0.17%)</title><rect x="61.1230%" y="213" width="0.1680%" height="15" fill="rgb(235,28,35)"/><text x="61.3730%" y="223.50"></text></g><g><title>[[stack]] (250 samples, 0.42%)</title><rect x="61.1077%" y="229" width="0.4242%" height="15" fill="rgb(210,56,17)"/><text x="61.3577%" y="239.50"></text></g><g><title>_int_free (103 samples, 0.17%)</title><rect x="61.3572%" y="213" width="0.1748%" height="15" fill="rgb(224,130,29)"/><text x="61.6072%" y="223.50"></text></g><g><title>&lt;cs::builtins::Equals as cs::lang::Function&gt;::call (148 samples, 0.25%)</title><rect x="61.7220%" y="213" width="0.2511%" height="15" fill="rgb(235,212,8)"/><text x="61.9720%" y="223.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (117 samples, 0.20%)</title><rect x="61.7746%" y="197" width="0.1985%" height="15" fill="rgb(223,33,50)"/><text x="62.0246%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (117 samples, 0.20%)</title><rect x="61.7746%" y="181" width="0.1985%" height="15" fill="rgb(219,149,13)"/><text x="62.0246%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (117 samples, 0.20%)</title><rect x="61.7746%" y="165" width="0.1985%" height="15" fill="rgb(250,156,29)"/><text x="62.0246%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove::{{closure}} (60 samples, 0.10%)</title><rect x="61.8713%" y="149" width="0.1018%" height="15" fill="rgb(216,193,19)"/><text x="62.1213%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (355 samples, 0.60%)</title><rect x="61.9731%" y="213" width="0.6024%" height="15" fill="rgb(216,135,14)"/><text x="62.2231%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (355 samples, 0.60%)</title><rect x="61.9731%" y="197" width="0.6024%" height="15" fill="rgb(241,47,5)"/><text x="62.2231%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (355 samples, 0.60%)</title><rect x="61.9731%" y="181" width="0.6024%" height="15" fill="rgb(233,42,35)"/><text x="62.2231%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (100 samples, 0.17%)</title><rect x="62.4058%" y="165" width="0.1697%" height="15" fill="rgb(231,13,6)"/><text x="62.6558%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (281 samples, 0.48%)</title><rect x="62.7164%" y="213" width="0.4768%" height="15" fill="rgb(207,181,40)"/><text x="62.9664%" y="223.50"></text></g><g><title>_int_free (193 samples, 0.33%)</title><rect x="63.2356%" y="213" width="0.3275%" height="15" fill="rgb(254,173,49)"/><text x="63.4856%" y="223.50"></text></g><g><title>core::slice::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (721 samples, 1.22%)</title><rect x="63.6734%" y="213" width="1.2234%" height="15" fill="rgb(221,1,38)"/><text x="63.9234%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::SlicePartialEq&lt;A&gt;&gt;::equal (720 samples, 1.22%)</title><rect x="63.6751%" y="197" width="1.2217%" height="15" fill="rgb(206,124,46)"/><text x="63.9251%" y="207.50"></text></g><g><title>__memcmp_avx2_movbe (595 samples, 1.01%)</title><rect x="63.8872%" y="181" width="1.0096%" height="15" fill="rgb(249,21,11)"/><text x="64.1372%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (165 samples, 0.28%)</title><rect x="65.9557%" y="197" width="0.2800%" height="15" fill="rgb(222,201,40)"/><text x="66.2057%" y="207.50"></text></g><g><title>core::mem::replace (294 samples, 0.50%)</title><rect x="66.2357%" y="197" width="0.4989%" height="15" fill="rgb(235,61,29)"/><text x="66.4857%" y="207.50"></text></g><g><title>core::mem::swap (263 samples, 0.45%)</title><rect x="66.2883%" y="181" width="0.4463%" height="15" fill="rgb(219,207,3)"/><text x="66.5383%" y="191.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (263 samples, 0.45%)</title><rect x="66.2883%" y="165" width="0.4463%" height="15" fill="rgb(222,56,46)"/><text x="66.5383%" y="175.50"></text></g><g><title>core::ptr::swap_nonoverlapping (263 samples, 0.45%)</title><rect x="66.2883%" y="149" width="0.4463%" height="15" fill="rgb(239,76,54)"/><text x="66.5383%" y="159.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (263 samples, 0.45%)</title><rect x="66.2883%" y="133" width="0.4463%" height="15" fill="rgb(231,124,27)"/><text x="66.5383%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (263 samples, 0.45%)</title><rect x="66.2883%" y="117" width="0.4463%" height="15" fill="rgb(249,195,6)"/><text x="66.5383%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (102 samples, 0.17%)</title><rect x="67.1605%" y="117" width="0.1731%" height="15" fill="rgb(237,174,47)"/><text x="67.4105%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (232 samples, 0.39%)</title><rect x="67.0434%" y="133" width="0.3937%" height="15" fill="rgb(206,201,31)"/><text x="67.2934%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (357 samples, 0.61%)</title><rect x="67.6797%" y="117" width="0.6058%" height="15" fill="rgb(231,57,52)"/><text x="67.9297%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,017 samples, 1.73%)</title><rect x="66.8143%" y="149" width="1.7257%" height="15" fill="rgb(248,177,22)"/><text x="67.0643%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (650 samples, 1.10%)</title><rect x="67.4370%" y="133" width="1.1030%" height="15" fill="rgb(215,211,37)"/><text x="67.6870%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (150 samples, 0.25%)</title><rect x="68.2855%" y="117" width="0.2545%" height="15" fill="rgb(241,128,51)"/><text x="68.5355%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1,019 samples, 1.73%)</title><rect x="66.8143%" y="181" width="1.7291%" height="15" fill="rgb(227,165,31)"/><text x="67.0643%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,019 samples, 1.73%)</title><rect x="66.8143%" y="165" width="1.7291%" height="15" fill="rgb(228,167,24)"/><text x="67.0643%" y="175.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (91 samples, 0.15%)</title><rect x="68.7402%" y="133" width="0.1544%" height="15" fill="rgb(228,143,12)"/><text x="68.9902%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (227 samples, 0.39%)</title><rect x="68.5434%" y="181" width="0.3852%" height="15" fill="rgb(249,149,8)"/><text x="68.7934%" y="191.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (111 samples, 0.19%)</title><rect x="68.7402%" y="165" width="0.1884%" height="15" fill="rgb(243,35,44)"/><text x="68.9902%" y="175.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (111 samples, 0.19%)</title><rect x="68.7402%" y="149" width="0.1884%" height="15" fill="rgb(246,89,9)"/><text x="68.9902%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (1,337 samples, 2.27%)</title><rect x="66.8024%" y="197" width="2.2687%" height="15" fill="rgb(233,213,13)"/><text x="67.0524%" y="207.50">h..</text></g><g><title>&lt;uuid::Uuid as core::hash::Hash&gt;::hash (84 samples, 0.14%)</title><rect x="68.9286%" y="181" width="0.1425%" height="15" fill="rgb(233,141,41)"/><text x="69.1786%" y="191.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: _]&gt;::hash (84 samples, 0.14%)</title><rect x="68.9286%" y="165" width="0.1425%" height="15" fill="rgb(239,167,4)"/><text x="69.1786%" y="175.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (89 samples, 0.15%)</title><rect x="69.8195%" y="165" width="0.1510%" height="15" fill="rgb(209,217,16)"/><text x="70.0695%" y="175.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (88 samples, 0.15%)</title><rect x="69.8211%" y="149" width="0.1493%" height="15" fill="rgb(219,88,35)"/><text x="70.0711%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (114 samples, 0.19%)</title><rect x="69.7787%" y="181" width="0.1934%" height="15" fill="rgb(220,193,23)"/><text x="70.0287%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (59 samples, 0.10%)</title><rect x="69.9722%" y="181" width="0.1001%" height="15" fill="rgb(230,90,52)"/><text x="70.2222%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert::{{closure}} (175 samples, 0.30%)</title><rect x="70.0723%" y="181" width="0.2970%" height="15" fill="rgb(252,106,19)"/><text x="70.3223%" y="191.50"></text></g><g><title>&lt;uuid::Uuid as core::cmp::PartialEq&gt;::eq (175 samples, 0.30%)</title><rect x="70.0723%" y="165" width="0.2970%" height="15" fill="rgb(206,74,20)"/><text x="70.3223%" y="175.50"></text></g><g><title>core::array::&lt;impl core::cmp::PartialEq&lt;[B: _]&gt; for [A: _]&gt;::eq (175 samples, 0.30%)</title><rect x="70.0723%" y="149" width="0.2970%" height="15" fill="rgb(230,138,44)"/><text x="70.3223%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::probe_seq (131 samples, 0.22%)</title><rect x="70.3709%" y="181" width="0.2223%" height="15" fill="rgb(235,182,43)"/><text x="70.6209%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (258 samples, 0.44%)</title><rect x="70.5949%" y="149" width="0.4378%" height="15" fill="rgb(242,16,51)"/><text x="70.8449%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (362 samples, 0.61%)</title><rect x="70.5949%" y="181" width="0.6143%" height="15" fill="rgb(248,9,4)"/><text x="70.8449%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (362 samples, 0.61%)</title><rect x="70.5949%" y="165" width="0.6143%" height="15" fill="rgb(210,31,22)"/><text x="70.8449%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (104 samples, 0.18%)</title><rect x="71.0327%" y="149" width="0.1765%" height="15" fill="rgb(239,54,39)"/><text x="71.2827%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (155 samples, 0.26%)</title><rect x="71.2092%" y="165" width="0.2630%" height="15" fill="rgb(230,99,41)"/><text x="71.4592%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (214 samples, 0.36%)</title><rect x="71.2092%" y="181" width="0.3631%" height="15" fill="rgb(253,106,12)"/><text x="71.4592%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (59 samples, 0.10%)</title><rect x="71.4722%" y="165" width="0.1001%" height="15" fill="rgb(213,46,41)"/><text x="71.7222%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (59 samples, 0.10%)</title><rect x="71.4722%" y="149" width="0.1001%" height="15" fill="rgb(215,133,35)"/><text x="71.7222%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (59 samples, 0.10%)</title><rect x="71.4722%" y="133" width="0.1001%" height="15" fill="rgb(213,28,5)"/><text x="71.7222%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (3,987 samples, 6.77%)</title><rect x="64.8968%" y="213" width="6.7654%" height="15" fill="rgb(215,77,49)"/><text x="65.1468%" y="223.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (1,527 samples, 2.59%)</title><rect x="69.0711%" y="197" width="2.5911%" height="15" fill="rgb(248,100,22)"/><text x="69.3211%" y="207.50">ha..</text></g><g><title>[unknown] (5,999 samples, 10.18%)</title><rect x="61.5353%" y="229" width="10.1795%" height="15" fill="rgb(208,67,9)"/><text x="61.7853%" y="239.50">[unknown]</text></g><g><title>__rdl_alloc (257 samples, 0.44%)</title><rect x="71.8201%" y="229" width="0.4361%" height="15" fill="rgb(219,133,21)"/><text x="72.0701%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (253 samples, 0.43%)</title><rect x="71.8269%" y="213" width="0.4293%" height="15" fill="rgb(246,46,29)"/><text x="72.0769%" y="223.50"></text></g><g><title>__rdl_dealloc (124 samples, 0.21%)</title><rect x="72.2562%" y="229" width="0.2104%" height="15" fill="rgb(246,185,52)"/><text x="72.5062%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (124 samples, 0.21%)</title><rect x="72.2562%" y="213" width="0.2104%" height="15" fill="rgb(252,136,11)"/><text x="72.5062%" y="223.50"></text></g><g><title>__rust_alloc (100 samples, 0.17%)</title><rect x="72.4666%" y="229" width="0.1697%" height="15" fill="rgb(219,138,53)"/><text x="72.7166%" y="239.50"></text></g><g><title>__rust_dealloc (99 samples, 0.17%)</title><rect x="72.6363%" y="229" width="0.1680%" height="15" fill="rgb(211,51,23)"/><text x="72.8863%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow (133 samples, 0.23%)</title><rect x="72.9196%" y="229" width="0.2257%" height="15" fill="rgb(247,221,28)"/><text x="73.1696%" y="239.50"></text></g><g><title>alloc::alloc::box_free (71 samples, 0.12%)</title><rect x="73.2370%" y="165" width="0.1205%" height="15" fill="rgb(251,222,45)"/><text x="73.4870%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (71 samples, 0.12%)</title><rect x="73.2370%" y="149" width="0.1205%" height="15" fill="rgb(217,162,53)"/><text x="73.4870%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (71 samples, 0.12%)</title><rect x="73.2370%" y="133" width="0.1205%" height="15" fill="rgb(229,93,14)"/><text x="73.4870%" y="143.50"></text></g><g><title>core::ptr::drop_in_place (95 samples, 0.16%)</title><rect x="73.2251%" y="213" width="0.1612%" height="15" fill="rgb(209,67,49)"/><text x="73.4751%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (95 samples, 0.16%)</title><rect x="73.2251%" y="197" width="0.1612%" height="15" fill="rgb(213,87,29)"/><text x="73.4751%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (90 samples, 0.15%)</title><rect x="73.2336%" y="181" width="0.1527%" height="15" fill="rgb(205,151,52)"/><text x="73.4836%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (244 samples, 0.41%)</title><rect x="73.1742%" y="229" width="0.4140%" height="15" fill="rgb(253,215,39)"/><text x="73.4242%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (119 samples, 0.20%)</title><rect x="73.3863%" y="213" width="0.2019%" height="15" fill="rgb(221,220,41)"/><text x="73.6363%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_sub (119 samples, 0.20%)</title><rect x="73.3863%" y="197" width="0.2019%" height="15" fill="rgb(218,133,21)"/><text x="73.6363%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::drain (76 samples, 0.13%)</title><rect x="73.5882%" y="229" width="0.1290%" height="15" fill="rgb(221,193,43)"/><text x="73.8382%" y="239.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (377 samples, 0.64%)</title><rect x="73.7579%" y="229" width="0.6397%" height="15" fill="rgb(240,128,52)"/><text x="74.0079%" y="239.50"></text></g><g><title>core::mem::replace (189 samples, 0.32%)</title><rect x="74.0769%" y="213" width="0.3207%" height="15" fill="rgb(253,114,12)"/><text x="74.3269%" y="223.50"></text></g><g><title>core::mem::swap (189 samples, 0.32%)</title><rect x="74.0769%" y="197" width="0.3207%" height="15" fill="rgb(215,223,47)"/><text x="74.3269%" y="207.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (189 samples, 0.32%)</title><rect x="74.0769%" y="181" width="0.3207%" height="15" fill="rgb(248,225,23)"/><text x="74.3269%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (111 samples, 0.19%)</title><rect x="74.2093%" y="165" width="0.1884%" height="15" fill="rgb(250,108,0)"/><text x="74.4593%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (175 samples, 0.30%)</title><rect x="74.6861%" y="213" width="0.2970%" height="15" fill="rgb(228,208,7)"/><text x="74.9361%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (456 samples, 0.77%)</title><rect x="74.3976%" y="229" width="0.7738%" height="15" fill="rgb(244,45,10)"/><text x="74.6476%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (111 samples, 0.19%)</title><rect x="74.9830%" y="213" width="0.1884%" height="15" fill="rgb(207,125,25)"/><text x="75.2330%" y="223.50"></text></g><g><title>core::hash::Hasher::write_usize (111 samples, 0.19%)</title><rect x="74.9830%" y="197" width="0.1884%" height="15" fill="rgb(210,195,18)"/><text x="75.2330%" y="207.50"></text></g><g><title>__GI___libc_free (80 samples, 0.14%)</title><rect x="77.5385%" y="149" width="0.1357%" height="15" fill="rgb(249,80,12)"/><text x="77.7885%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (497 samples, 0.84%)</title><rect x="77.4282%" y="181" width="0.8433%" height="15" fill="rgb(221,65,9)"/><text x="77.6782%" y="191.50"></text></g><g><title>core::ptr::drop_in_place (493 samples, 0.84%)</title><rect x="77.4350%" y="165" width="0.8366%" height="15" fill="rgb(235,49,36)"/><text x="77.6850%" y="175.50"></text></g><g><title>_int_free (352 samples, 0.60%)</title><rect x="77.6743%" y="149" width="0.5973%" height="15" fill="rgb(225,32,20)"/><text x="77.9243%" y="159.50"></text></g><g><title>alloc::alloc::box_free (240 samples, 0.41%)</title><rect x="78.3276%" y="181" width="0.4072%" height="15" fill="rgb(215,141,46)"/><text x="78.5776%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (232 samples, 0.39%)</title><rect x="78.3411%" y="165" width="0.3937%" height="15" fill="rgb(250,160,47)"/><text x="78.5911%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (232 samples, 0.39%)</title><rect x="78.3411%" y="149" width="0.3937%" height="15" fill="rgb(216,222,40)"/><text x="78.5911%" y="159.50"></text></g><g><title>_int_free (191 samples, 0.32%)</title><rect x="78.4107%" y="133" width="0.3241%" height="15" fill="rgb(234,217,39)"/><text x="78.6607%" y="143.50"></text></g><g><title>core::ptr::drop_in_place (2,215 samples, 3.76%)</title><rect x="75.1714%" y="229" width="3.7586%" height="15" fill="rgb(207,178,40)"/><text x="75.4214%" y="239.50">core..</text></g><g><title>core::ptr::drop_in_place (1,100 samples, 1.87%)</title><rect x="77.0634%" y="213" width="1.8666%" height="15" fill="rgb(221,136,13)"/><text x="77.3134%" y="223.50">c..</text></g><g><title>core::ptr::drop_in_place (994 samples, 1.69%)</title><rect x="77.2433%" y="197" width="1.6867%" height="15" fill="rgb(249,199,10)"/><text x="77.4933%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (115 samples, 0.20%)</title><rect x="78.7348%" y="181" width="0.1951%" height="15" fill="rgb(249,222,13)"/><text x="78.9848%" y="191.50"></text></g><g><title>__memcmp_avx2_movbe (431 samples, 0.73%)</title><rect x="79.1302%" y="197" width="0.7314%" height="15" fill="rgb(244,185,38)"/><text x="79.3802%" y="207.50"></text></g><g><title>core::slice::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (551 samples, 0.93%)</title><rect x="78.9300%" y="229" width="0.9350%" height="15" fill="rgb(236,202,9)"/><text x="79.1800%" y="239.50"></text></g><g><title>&lt;[A] as core::slice::SlicePartialEq&lt;A&gt;&gt;::equal (551 samples, 0.93%)</title><rect x="78.9300%" y="213" width="0.9350%" height="15" fill="rgb(250,229,37)"/><text x="79.1800%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (175 samples, 0.30%)</title><rect x="79.9498%" y="117" width="0.2970%" height="15" fill="rgb(206,174,23)"/><text x="80.1998%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (114 samples, 0.19%)</title><rect x="80.0533%" y="101" width="0.1934%" height="15" fill="rgb(211,33,43)"/><text x="80.3033%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (179 samples, 0.30%)</title><rect x="79.9498%" y="149" width="0.3037%" height="15" fill="rgb(245,58,50)"/><text x="80.1998%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (179 samples, 0.30%)</title><rect x="79.9498%" y="133" width="0.3037%" height="15" fill="rgb(244,68,36)"/><text x="80.1998%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (237 samples, 0.40%)</title><rect x="79.9430%" y="165" width="0.4022%" height="15" fill="rgb(232,229,15)"/><text x="80.1930%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (67 samples, 0.11%)</title><rect x="80.7066%" y="149" width="0.1137%" height="15" fill="rgb(254,30,23)"/><text x="80.9566%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (67 samples, 0.11%)</title><rect x="80.7066%" y="133" width="0.1137%" height="15" fill="rgb(235,160,14)"/><text x="80.9566%" y="143.50"></text></g><g><title>cs::env::ExecutionEnvironment::find_function (590 samples, 1.00%)</title><rect x="79.8700%" y="229" width="1.0012%" height="15" fill="rgb(212,155,44)"/><text x="80.1200%" y="239.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (547 samples, 0.93%)</title><rect x="79.9430%" y="213" width="0.9282%" height="15" fill="rgb(226,2,50)"/><text x="80.1930%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (547 samples, 0.93%)</title><rect x="79.9430%" y="197" width="0.9282%" height="15" fill="rgb(234,177,6)"/><text x="80.1930%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (547 samples, 0.93%)</title><rect x="79.9430%" y="181" width="0.9282%" height="15" fill="rgb(217,24,9)"/><text x="80.1930%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (310 samples, 0.53%)</title><rect x="80.3451%" y="165" width="0.5260%" height="15" fill="rgb(220,13,46)"/><text x="80.5951%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (77 samples, 0.13%)</title><rect x="81.5109%" y="213" width="0.1307%" height="15" fill="rgb(239,221,27)"/><text x="81.7609%" y="223.50"></text></g><g><title>alloc::rc::RcBoxPtr::inc_strong (77 samples, 0.13%)</title><rect x="81.5109%" y="197" width="0.1307%" height="15" fill="rgb(222,198,25)"/><text x="81.7609%" y="207.50"></text></g><g><title>&lt;cs::env::Interpreter as core::clone::Clone&gt;::clone (66 samples, 0.11%)</title><rect x="81.6416%" y="213" width="0.1120%" height="15" fill="rgb(211,99,13)"/><text x="81.8916%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (66 samples, 0.11%)</title><rect x="81.6416%" y="197" width="0.1120%" height="15" fill="rgb(232,111,31)"/><text x="81.8916%" y="207.50"></text></g><g><title>alloc::rc::RcBoxPtr::inc_strong (66 samples, 0.11%)</title><rect x="81.6416%" y="181" width="0.1120%" height="15" fill="rgb(245,82,37)"/><text x="81.8916%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (563 samples, 0.96%)</title><rect x="81.9877%" y="197" width="0.9553%" height="15" fill="rgb(227,149,46)"/><text x="82.2377%" y="207.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (1,312 samples, 2.23%)</title><rect x="81.7535%" y="213" width="2.2263%" height="15" fill="rgb(218,36,50)"/><text x="82.0035%" y="223.50">a..</text></g><g><title>alloc::alloc::exchange_malloc (611 samples, 1.04%)</title><rect x="82.9431%" y="197" width="1.0368%" height="15" fill="rgb(226,80,48)"/><text x="83.1931%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (611 samples, 1.04%)</title><rect x="82.9431%" y="181" width="1.0368%" height="15" fill="rgb(238,224,15)"/><text x="83.1931%" y="191.50"></text></g><g><title>alloc::alloc::alloc (601 samples, 1.02%)</title><rect x="82.9600%" y="165" width="1.0198%" height="15" fill="rgb(241,136,10)"/><text x="83.2100%" y="175.50"></text></g><g><title>__GI___libc_malloc (533 samples, 0.90%)</title><rect x="83.0754%" y="149" width="0.9044%" height="15" fill="rgb(208,32,45)"/><text x="83.3254%" y="159.50"></text></g><g><title>&lt;cs::lang::Assignment as core::clone::Clone&gt;::clone (435 samples, 0.74%)</title><rect x="84.2479%" y="197" width="0.7381%" height="15" fill="rgb(207,135,9)"/><text x="84.4979%" y="207.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::clone::Clone&gt;::clone (431 samples, 0.73%)</title><rect x="84.2547%" y="181" width="0.7314%" height="15" fill="rgb(206,86,44)"/><text x="84.5047%" y="191.50"></text></g><g><title>alloc::alloc::exchange_malloc (428 samples, 0.73%)</title><rect x="84.2598%" y="165" width="0.7263%" height="15" fill="rgb(245,177,15)"/><text x="84.5098%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (428 samples, 0.73%)</title><rect x="84.2598%" y="149" width="0.7263%" height="15" fill="rgb(206,64,50)"/><text x="84.5098%" y="159.50"></text></g><g><title>alloc::alloc::alloc (428 samples, 0.73%)</title><rect x="84.2598%" y="133" width="0.7263%" height="15" fill="rgb(234,36,40)"/><text x="84.5098%" y="143.50"></text></g><g><title>__GI___libc_malloc (422 samples, 0.72%)</title><rect x="84.2700%" y="117" width="0.7161%" height="15" fill="rgb(213,64,8)"/><text x="84.5200%" y="127.50"></text></g><g><title>_int_malloc (396 samples, 0.67%)</title><rect x="84.3141%" y="101" width="0.6720%" height="15" fill="rgb(210,75,36)"/><text x="84.5641%" y="111.50"></text></g><g><title>cs::env::Interpreter::evaluate_assignment (450 samples, 0.76%)</title><rect x="84.2344%" y="213" width="0.7636%" height="15" fill="rgb(229,88,21)"/><text x="84.4844%" y="223.50"></text></g><g><title>cs::env::Interpreter::evaluate (2,741 samples, 4.65%)</title><rect x="80.8712%" y="229" width="4.6511%" height="15" fill="rgb(252,204,47)"/><text x="81.1212%" y="239.50">cs::e..</text></g><g><title>futures_util::future::try_future::TryFutureExt::unwrap_or_else (272 samples, 0.46%)</title><rect x="85.0607%" y="213" width="0.4615%" height="15" fill="rgb(208,77,27)"/><text x="85.3107%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (224 samples, 0.38%)</title><rect x="85.1422%" y="197" width="0.3801%" height="15" fill="rgb(221,76,26)"/><text x="85.3922%" y="207.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (161 samples, 0.27%)</title><rect x="85.6631%" y="213" width="0.2732%" height="15" fill="rgb(225,139,18)"/><text x="85.9131%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (161 samples, 0.27%)</title><rect x="85.6631%" y="197" width="0.2732%" height="15" fill="rgb(230,137,11)"/><text x="85.9131%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (154 samples, 0.26%)</title><rect x="85.6750%" y="181" width="0.2613%" height="15" fill="rgb(212,28,1)"/><text x="85.9250%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (66 samples, 0.11%)</title><rect x="86.1450%" y="85" width="0.1120%" height="15" fill="rgb(248,164,17)"/><text x="86.3950%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (199 samples, 0.34%)</title><rect x="85.9703%" y="117" width="0.3377%" height="15" fill="rgb(222,171,42)"/><text x="86.2203%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (126 samples, 0.21%)</title><rect x="86.0941%" y="101" width="0.2138%" height="15" fill="rgb(243,84,45)"/><text x="86.3441%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (200 samples, 0.34%)</title><rect x="85.9703%" y="149" width="0.3394%" height="15" fill="rgb(252,49,23)"/><text x="86.2203%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (200 samples, 0.34%)</title><rect x="85.9703%" y="133" width="0.3394%" height="15" fill="rgb(215,19,7)"/><text x="86.2203%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (263 samples, 0.45%)</title><rect x="85.9686%" y="165" width="0.4463%" height="15" fill="rgb(238,81,41)"/><text x="86.2186%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (70 samples, 0.12%)</title><rect x="86.8713%" y="149" width="0.1188%" height="15" fill="rgb(210,199,37)"/><text x="87.1213%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (70 samples, 0.12%)</title><rect x="86.8713%" y="133" width="0.1188%" height="15" fill="rgb(244,192,49)"/><text x="87.1213%" y="143.50"></text></g><g><title>cs::env::Interpreter::get_local_variable (912 samples, 1.55%)</title><rect x="85.5223%" y="229" width="1.5475%" height="15" fill="rgb(226,211,11)"/><text x="85.7723%" y="239.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (660 samples, 1.12%)</title><rect x="85.9499%" y="213" width="1.1199%" height="15" fill="rgb(236,162,54)"/><text x="86.1999%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (660 samples, 1.12%)</title><rect x="85.9499%" y="197" width="1.1199%" height="15" fill="rgb(220,229,9)"/><text x="86.1999%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (660 samples, 1.12%)</title><rect x="85.9499%" y="181" width="1.1199%" height="15" fill="rgb(250,87,22)"/><text x="86.1999%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (386 samples, 0.65%)</title><rect x="86.4149%" y="165" width="0.6550%" height="15" fill="rgb(239,43,17)"/><text x="86.6649%" y="175.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (104 samples, 0.18%)</title><rect x="87.1666%" y="197" width="0.1765%" height="15" fill="rgb(231,177,25)"/><text x="87.4166%" y="207.50"></text></g><g><title>alloc::alloc::exchange_malloc (83 samples, 0.14%)</title><rect x="87.2022%" y="181" width="0.1408%" height="15" fill="rgb(219,179,1)"/><text x="87.4522%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (83 samples, 0.14%)</title><rect x="87.2022%" y="165" width="0.1408%" height="15" fill="rgb(238,219,53)"/><text x="87.4522%" y="175.50"></text></g><g><title>alloc::alloc::alloc (83 samples, 0.14%)</title><rect x="87.2022%" y="149" width="0.1408%" height="15" fill="rgb(232,167,36)"/><text x="87.4522%" y="159.50"></text></g><g><title>__GI___libc_malloc (72 samples, 0.12%)</title><rect x="87.2209%" y="133" width="0.1222%" height="15" fill="rgb(244,19,51)"/><text x="87.4709%" y="143.50"></text></g><g><title>cs::env::Interpreter::new_stack_frame (181 samples, 0.31%)</title><rect x="87.0698%" y="229" width="0.3071%" height="15" fill="rgb(224,6,22)"/><text x="87.3198%" y="239.50"></text></g><g><title>cs::env::Interpreter::with_env_and_new_locals (124 samples, 0.21%)</title><rect x="87.1666%" y="213" width="0.2104%" height="15" fill="rgb(224,145,5)"/><text x="87.4166%" y="223.50"></text></g><g><title>cs::env::Interpreter::set_local_variable (242 samples, 0.41%)</title><rect x="87.3770%" y="229" width="0.4106%" height="15" fill="rgb(234,130,49)"/><text x="87.6270%" y="239.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (167 samples, 0.28%)</title><rect x="87.5042%" y="213" width="0.2834%" height="15" fill="rgb(254,6,2)"/><text x="87.7542%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (144 samples, 0.24%)</title><rect x="87.5433%" y="197" width="0.2443%" height="15" fill="rgb(208,96,46)"/><text x="87.7933%" y="207.50"></text></g><g><title>cs::external_func::contains_futures (332 samples, 0.56%)</title><rect x="87.7876%" y="229" width="0.5634%" height="15" fill="rgb(239,3,39)"/><text x="88.0376%" y="239.50"></text></g><g><title>cs::lang::CodeNode::id (188 samples, 0.32%)</title><rect x="88.3510%" y="229" width="0.3190%" height="15" fill="rgb(233,210,1)"/><text x="88.6010%" y="239.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (66 samples, 0.11%)</title><rect x="88.8091%" y="197" width="0.1120%" height="15" fill="rgb(244,137,37)"/><text x="89.0591%" y="207.50"></text></g><g><title>futures_task::waker::wake_arc_raw (207 samples, 0.35%)</title><rect x="88.7786%" y="229" width="0.3513%" height="15" fill="rgb(240,136,2)"/><text x="89.0286%" y="239.50"></text></g><g><title>futures_task::arc_wake::ArcWake::wake (195 samples, 0.33%)</title><rect x="88.7990%" y="213" width="0.3309%" height="15" fill="rgb(239,18,37)"/><text x="89.0490%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (123 samples, 0.21%)</title><rect x="88.9211%" y="197" width="0.2087%" height="15" fill="rgb(218,185,22)"/><text x="89.1711%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (123 samples, 0.21%)</title><rect x="88.9211%" y="181" width="0.2087%" height="15" fill="rgb(225,218,4)"/><text x="89.1711%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (85 samples, 0.14%)</title><rect x="88.9856%" y="165" width="0.1442%" height="15" fill="rgb(230,182,32)"/><text x="89.2356%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_sub (85 samples, 0.14%)</title><rect x="88.9856%" y="149" width="0.1442%" height="15" fill="rgb(242,56,43)"/><text x="89.2356%" y="159.50"></text></g><g><title>&lt;futures_util::compat::compat03as01::Current as core::clone::Clone&gt;::clone (77 samples, 0.13%)</title><rect x="89.1451%" y="213" width="0.1307%" height="15" fill="rgb(233,99,24)"/><text x="89.3951%" y="223.50"></text></g><g><title>&lt;futures::task_impl::Task as core::clone::Clone&gt;::clone (77 samples, 0.13%)</title><rect x="89.1451%" y="197" width="0.1307%" height="15" fill="rgb(234,209,42)"/><text x="89.3951%" y="207.50"></text></g><g><title>futures_util::compat::compat03as01::Current::as_waker::clone (112 samples, 0.19%)</title><rect x="89.1366%" y="229" width="0.1900%" height="15" fill="rgb(227,7,12)"/><text x="89.3866%" y="239.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (145 samples, 0.25%)</title><rect x="89.4506%" y="213" width="0.2460%" height="15" fill="rgb(245,203,43)"/><text x="89.7006%" y="223.50"></text></g><g><title>futures_util::future::future::shared::Inner&lt;Fut&gt;::record_waker (244 samples, 0.41%)</title><rect x="89.3267%" y="229" width="0.4140%" height="15" fill="rgb(238,205,33)"/><text x="89.5767%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (290 samples, 0.49%)</title><rect x="89.8035%" y="213" width="0.4921%" height="15" fill="rgb(231,56,7)"/><text x="90.0535%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (74 samples, 0.13%)</title><rect x="90.3703%" y="165" width="0.1256%" height="15" fill="rgb(244,186,29)"/><text x="90.6203%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (74 samples, 0.13%)</title><rect x="90.3703%" y="149" width="0.1256%" height="15" fill="rgb(234,111,31)"/><text x="90.6203%" y="159.50"></text></g><g><title>core::ptr::drop_in_place (181 samples, 0.31%)</title><rect x="90.3703%" y="197" width="0.3071%" height="15" fill="rgb(241,149,10)"/><text x="90.6203%" y="207.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (181 samples, 0.31%)</title><rect x="90.3703%" y="181" width="0.3071%" height="15" fill="rgb(249,206,44)"/><text x="90.6203%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (105 samples, 0.18%)</title><rect x="90.4992%" y="165" width="0.1782%" height="15" fill="rgb(251,153,30)"/><text x="90.7492%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_sub (105 samples, 0.18%)</title><rect x="90.4992%" y="149" width="0.1782%" height="15" fill="rgb(239,152,38)"/><text x="90.7492%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::try_unwrap (334 samples, 0.57%)</title><rect x="90.2956%" y="213" width="0.5668%" height="15" fill="rgb(249,139,47)"/><text x="90.5456%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (109 samples, 0.18%)</title><rect x="90.6774%" y="197" width="0.1850%" height="15" fill="rgb(244,64,35)"/><text x="90.9274%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (109 samples, 0.18%)</title><rect x="90.6774%" y="181" width="0.1850%" height="15" fill="rgb(216,46,15)"/><text x="90.9274%" y="191.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (176 samples, 0.30%)</title><rect x="90.8623%" y="197" width="0.2986%" height="15" fill="rgb(250,74,19)"/><text x="91.1123%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (101 samples, 0.17%)</title><rect x="90.9896%" y="181" width="0.1714%" height="15" fill="rgb(249,42,33)"/><text x="91.2396%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_sub (101 samples, 0.17%)</title><rect x="90.9896%" y="165" width="0.1714%" height="15" fill="rgb(242,149,17)"/><text x="91.2396%" y="175.50"></text></g><g><title>futures_util::future::future::shared::Inner&lt;Fut&gt;::take_or_clone_output (843 samples, 1.43%)</title><rect x="89.7407%" y="229" width="1.4305%" height="15" fill="rgb(244,29,21)"/><text x="89.9907%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (182 samples, 0.31%)</title><rect x="90.8623%" y="213" width="0.3088%" height="15" fill="rgb(220,130,37)"/><text x="91.1123%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (161 samples, 0.27%)</title><rect x="91.3799%" y="213" width="0.2732%" height="15" fill="rgb(211,67,2)"/><text x="91.6299%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (168 samples, 0.29%)</title><rect x="91.6531%" y="213" width="0.2851%" height="15" fill="rgb(235,68,52)"/><text x="91.9031%" y="223.50"></text></g><g><title>alloc::alloc::exchange_malloc (109 samples, 0.18%)</title><rect x="91.7532%" y="197" width="0.1850%" height="15" fill="rgb(246,142,3)"/><text x="92.0032%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (109 samples, 0.18%)</title><rect x="91.7532%" y="181" width="0.1850%" height="15" fill="rgb(241,25,7)"/><text x="92.0032%" y="191.50"></text></g><g><title>alloc::alloc::alloc (107 samples, 0.18%)</title><rect x="91.7566%" y="165" width="0.1816%" height="15" fill="rgb(242,119,39)"/><text x="92.0066%" y="175.50"></text></g><g><title>__GI___libc_malloc (92 samples, 0.16%)</title><rect x="91.7821%" y="149" width="0.1561%" height="15" fill="rgb(241,98,45)"/><text x="92.0321%" y="159.50"></text></g><g><title>futures_util::future::future::shared::Shared&lt;Fut&gt;::new (463 samples, 0.79%)</title><rect x="91.1712%" y="229" width="0.7857%" height="15" fill="rgb(254,28,30)"/><text x="91.4212%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove_entry (162 samples, 0.27%)</title><rect x="91.9806%" y="229" width="0.2749%" height="15" fill="rgb(241,142,54)"/><text x="92.2306%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (78 samples, 0.13%)</title><rect x="92.1231%" y="213" width="0.1324%" height="15" fill="rgb(222,85,15)"/><text x="92.3731%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (260 samples, 0.44%)</title><rect x="92.5609%" y="213" width="0.4412%" height="15" fill="rgb(210,85,47)"/><text x="92.8109%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (260 samples, 0.44%)</title><rect x="92.5609%" y="197" width="0.4412%" height="15" fill="rgb(224,206,25)"/><text x="92.8109%" y="207.50"></text></g><g><title>core::ptr::write (260 samples, 0.44%)</title><rect x="92.5609%" y="181" width="0.4412%" height="15" fill="rgb(243,201,19)"/><text x="92.8109%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (231 samples, 0.39%)</title><rect x="92.6101%" y="165" width="0.3920%" height="15" fill="rgb(236,59,4)"/><text x="92.8601%" y="175.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (80 samples, 0.14%)</title><rect x="93.5824%" y="197" width="0.1357%" height="15" fill="rgb(254,179,45)"/><text x="93.8324%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (67 samples, 0.11%)</title><rect x="93.6045%" y="181" width="0.1137%" height="15" fill="rgb(226,14,10)"/><text x="93.8545%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (178 samples, 0.30%)</title><rect x="93.7911%" y="197" width="0.3020%" height="15" fill="rgb(244,27,41)"/><text x="94.0411%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (178 samples, 0.30%)</title><rect x="93.7911%" y="181" width="0.3020%" height="15" fill="rgb(235,35,32)"/><text x="94.0411%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (178 samples, 0.30%)</title><rect x="93.7911%" y="165" width="0.3020%" height="15" fill="rgb(218,68,31)"/><text x="94.0411%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (748 samples, 1.27%)</title><rect x="93.0021%" y="213" width="1.2693%" height="15" fill="rgb(207,120,37)"/><text x="93.2521%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (104 samples, 0.18%)</title><rect x="94.0949%" y="197" width="0.1765%" height="15" fill="rgb(227,98,0)"/><text x="94.3449%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (104 samples, 0.18%)</title><rect x="94.0949%" y="181" width="0.1765%" height="15" fill="rgb(207,7,3)"/><text x="94.3449%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (1,236 samples, 2.10%)</title><rect x="92.2555%" y="229" width="2.0973%" height="15" fill="rgb(206,98,19)"/><text x="92.5055%" y="239.50">h..</text></g><g><title>alloc::alloc::alloc (212 samples, 0.36%)</title><rect x="94.5344%" y="213" width="0.3597%" height="15" fill="rgb(217,5,26)"/><text x="94.7844%" y="223.50"></text></g><g><title>__GI___libc_malloc (193 samples, 0.33%)</title><rect x="94.5666%" y="197" width="0.3275%" height="15" fill="rgb(235,190,38)"/><text x="94.8166%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::new_uninitialized (357 samples, 0.61%)</title><rect x="94.3528%" y="229" width="0.6058%" height="15" fill="rgb(247,86,24)"/><text x="94.6028%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (112 samples, 0.19%)</title><rect x="95.0910%" y="213" width="0.1900%" height="15" fill="rgb(205,101,16)"/><text x="95.3410%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (64 samples, 0.11%)</title><rect x="95.5932%" y="213" width="0.1086%" height="15" fill="rgb(246,168,33)"/><text x="95.8432%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize (414 samples, 0.70%)</title><rect x="95.0299%" y="229" width="0.7025%" height="15" fill="rgb(231,114,1)"/><text x="95.2799%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (216 samples, 0.37%)</title><rect x="96.0751%" y="213" width="0.3665%" height="15" fill="rgb(207,184,53)"/><text x="96.3251%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::try_with_capacity (467 samples, 0.79%)</title><rect x="95.7324%" y="229" width="0.7924%" height="15" fill="rgb(224,95,51)"/><text x="95.9824%" y="239.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (94 samples, 0.16%)</title><rect x="96.5706%" y="229" width="0.1595%" height="15" fill="rgb(212,188,45)"/><text x="96.8206%" y="239.50"></text></g><g><title>mio::poll::SetReadiness::set_readiness (85 samples, 0.14%)</title><rect x="96.7471%" y="229" width="0.1442%" height="15" fill="rgb(223,154,38)"/><text x="96.9971%" y="239.50"></text></g><g><title>mio::poll::RegistrationInner::set_readiness (77 samples, 0.13%)</title><rect x="96.7607%" y="213" width="0.1307%" height="15" fill="rgb(251,22,52)"/><text x="97.0107%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (68 samples, 0.12%)</title><rect x="97.2952%" y="101" width="0.1154%" height="15" fill="rgb(229,209,22)"/><text x="97.5452%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (206 samples, 0.35%)</title><rect x="97.1170%" y="133" width="0.3496%" height="15" fill="rgb(234,138,34)"/><text x="97.3670%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (140 samples, 0.24%)</title><rect x="97.2290%" y="117" width="0.2376%" height="15" fill="rgb(212,95,11)"/><text x="97.4790%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (207 samples, 0.35%)</title><rect x="97.1170%" y="165" width="0.3513%" height="15" fill="rgb(240,179,47)"/><text x="97.3670%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (207 samples, 0.35%)</title><rect x="97.1170%" y="149" width="0.3513%" height="15" fill="rgb(240,163,11)"/><text x="97.3670%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (277 samples, 0.47%)</title><rect x="97.1136%" y="181" width="0.4700%" height="15" fill="rgb(236,37,12)"/><text x="97.3636%" y="191.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (664 samples, 1.13%)</title><rect x="96.9847%" y="229" width="1.1267%" height="15" fill="rgb(232,164,16)"/><text x="97.2347%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (588 samples, 1.00%)</title><rect x="97.1136%" y="213" width="0.9978%" height="15" fill="rgb(244,205,15)"/><text x="97.3636%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (588 samples, 1.00%)</title><rect x="97.1136%" y="197" width="0.9978%" height="15" fill="rgb(223,117,47)"/><text x="97.3636%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (311 samples, 0.53%)</title><rect x="97.5837%" y="181" width="0.5277%" height="15" fill="rgb(244,107,35)"/><text x="97.8337%" y="191.50"></text></g><g><title>std::panicking::panicking (89 samples, 0.15%)</title><rect x="98.1759%" y="229" width="0.1510%" height="15" fill="rgb(205,140,8)"/><text x="98.4259%" y="239.50"></text></g><g><title>std::panicking::update_panic_count (61 samples, 0.10%)</title><rect x="98.2234%" y="213" width="0.1035%" height="15" fill="rgb(228,84,46)"/><text x="98.4734%" y="223.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (61 samples, 0.10%)</title><rect x="98.2234%" y="197" width="0.1035%" height="15" fill="rgb(254,188,9)"/><text x="98.4734%" y="207.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (61 samples, 0.10%)</title><rect x="98.2234%" y="181" width="0.1035%" height="15" fill="rgb(206,112,54)"/><text x="98.4734%" y="191.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (428 samples, 0.73%)</title><rect x="98.3269%" y="229" width="0.7263%" height="15" fill="rgb(216,84,49)"/><text x="98.5769%" y="239.50"></text></g><g><title>std::sys_common::mutex::Mutex::raw_lock (386 samples, 0.65%)</title><rect x="98.3982%" y="213" width="0.6550%" height="15" fill="rgb(214,194,35)"/><text x="98.6482%" y="223.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (386 samples, 0.65%)</title><rect x="98.3982%" y="197" width="0.6550%" height="15" fill="rgb(249,28,3)"/><text x="98.6482%" y="207.50"></text></g><g><title>__GI___pthread_mutex_lock (377 samples, 0.64%)</title><rect x="98.4134%" y="181" width="0.6397%" height="15" fill="rgb(222,56,52)"/><text x="98.6634%" y="191.50"></text></g><g><title>alloc::alloc::exchange_malloc (59 samples, 0.10%)</title><rect x="99.3162%" y="213" width="0.1001%" height="15" fill="rgb(245,217,50)"/><text x="99.5662%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (59 samples, 0.10%)</title><rect x="99.3162%" y="197" width="0.1001%" height="15" fill="rgb(213,201,24)"/><text x="99.5662%" y="207.50"></text></g><g><title>alloc::alloc::alloc (59 samples, 0.10%)</title><rect x="99.3162%" y="181" width="0.1001%" height="15" fill="rgb(248,116,28)"/><text x="99.5662%" y="191.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::new (296 samples, 0.50%)</title><rect x="99.0531%" y="229" width="0.5023%" height="15" fill="rgb(219,72,43)"/><text x="99.3031%" y="239.50"></text></g><g><title>std::sys_common::mutex::Mutex::init (82 samples, 0.14%)</title><rect x="99.4163%" y="213" width="0.1391%" height="15" fill="rgb(209,138,14)"/><text x="99.6663%" y="223.50"></text></g><g><title>std::sys::unix::mutex::Mutex::init (82 samples, 0.14%)</title><rect x="99.4163%" y="197" width="0.1391%" height="15" fill="rgb(222,18,33)"/><text x="99.6663%" y="207.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (87 samples, 0.15%)</title><rect x="99.5775%" y="229" width="0.1476%" height="15" fill="rgb(213,199,7)"/><text x="99.8275%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (64 samples, 0.11%)</title><rect x="99.6165%" y="213" width="0.1086%" height="15" fill="rgb(250,110,10)"/><text x="99.8665%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (67 samples, 0.11%)</title><rect x="99.8286%" y="181" width="0.1137%" height="15" fill="rgb(248,123,6)"/><text x="100.0786%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (67 samples, 0.11%)</title><rect x="99.8286%" y="165" width="0.1137%" height="15" fill="rgb(206,91,31)"/><text x="100.0786%" y="175.50"></text></g><g><title>all (58,932 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(211,154,13)"/><text x="0.2500%" y="271.50"></text></g><g><title>for_profiling (58,932 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(225,148,7)"/><text x="0.2500%" y="255.50">for_profiling</text></g><g><title>tokio_reactor::HandlePriv::wakeup (162 samples, 0.27%)</title><rect x="99.7251%" y="229" width="0.2749%" height="15" fill="rgb(220,160,43)"/><text x="99.9751%" y="239.50"></text></g><g><title>tokio_reactor::HandlePriv::inner (113 samples, 0.19%)</title><rect x="99.8083%" y="213" width="0.1917%" height="15" fill="rgb(213,52,39)"/><text x="100.0583%" y="223.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::upgrade (113 samples, 0.19%)</title><rect x="99.8083%" y="197" width="0.1917%" height="15" fill="rgb(243,137,7)"/><text x="100.0583%" y="207.50"></text></g></svg></svg>