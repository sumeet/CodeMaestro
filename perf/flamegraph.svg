<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (2,558 samples, 2.52%)</title><rect x="0.0118%" y="245" width="2.5209%" height="15" fill="rgb(227,0,7)"/><text x="0.2618%" y="255.50">&lt;I..</text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (406 samples, 0.40%)</title><rect x="2.5328%" y="245" width="0.4001%" height="15" fill="rgb(217,0,24)"/><text x="2.7828%" y="255.50"></text></g><g><title>&lt;cs::code_function::CodeFunction as core::clone::Clone&gt;::clone (168 samples, 0.17%)</title><rect x="3.0748%" y="229" width="0.1656%" height="15" fill="rgb(221,193,54)"/><text x="3.3248%" y="239.50"></text></g><g><title>&lt;T as objekt::Clone&gt;::clone_box (399 samples, 0.39%)</title><rect x="2.9329%" y="245" width="0.3932%" height="15" fill="rgb(248,212,6)"/><text x="3.1829%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (148 samples, 0.15%)</title><rect x="3.5863%" y="181" width="0.1459%" height="15" fill="rgb(208,68,35)"/><text x="3.8363%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (148 samples, 0.15%)</title><rect x="3.5863%" y="165" width="0.1459%" height="15" fill="rgb(232,128,0)"/><text x="3.8363%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (134 samples, 0.13%)</title><rect x="3.6001%" y="149" width="0.1321%" height="15" fill="rgb(207,160,47)"/><text x="3.8501%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (134 samples, 0.13%)</title><rect x="3.6001%" y="133" width="0.1321%" height="15" fill="rgb(228,23,34)"/><text x="3.8501%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (678 samples, 0.67%)</title><rect x="3.7321%" y="117" width="0.6682%" height="15" fill="rgb(218,30,26)"/><text x="3.9821%" y="127.50"></text></g><g><title>alloc::alloc::alloc (673 samples, 0.66%)</title><rect x="3.7371%" y="101" width="0.6633%" height="15" fill="rgb(220,122,19)"/><text x="3.9871%" y="111.50"></text></g><g><title>__GI___libc_malloc (659 samples, 0.65%)</title><rect x="3.7509%" y="85" width="0.6495%" height="15" fill="rgb(250,228,42)"/><text x="4.0009%" y="95.50"></text></g><g><title>_int_malloc (275 samples, 0.27%)</title><rect x="4.1293%" y="69" width="0.2710%" height="15" fill="rgb(240,193,28)"/><text x="4.3793%" y="79.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,011 samples, 1.00%)</title><rect x="3.4158%" y="245" width="0.9964%" height="15" fill="rgb(216,20,37)"/><text x="3.6658%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (862 samples, 0.85%)</title><rect x="3.5626%" y="229" width="0.8495%" height="15" fill="rgb(206,188,39)"/><text x="3.8126%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (848 samples, 0.84%)</title><rect x="3.5764%" y="213" width="0.8357%" height="15" fill="rgb(217,207,13)"/><text x="3.8264%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (838 samples, 0.83%)</title><rect x="3.5863%" y="197" width="0.8259%" height="15" fill="rgb(231,73,38)"/><text x="3.8363%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (690 samples, 0.68%)</title><rect x="3.7321%" y="181" width="0.6800%" height="15" fill="rgb(225,20,46)"/><text x="3.9821%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (690 samples, 0.68%)</title><rect x="3.7321%" y="165" width="0.6800%" height="15" fill="rgb(210,31,41)"/><text x="3.9821%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (690 samples, 0.68%)</title><rect x="3.7321%" y="149" width="0.6800%" height="15" fill="rgb(221,200,47)"/><text x="3.9821%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (690 samples, 0.68%)</title><rect x="3.7321%" y="133" width="0.6800%" height="15" fill="rgb(226,26,5)"/><text x="3.9821%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (113 samples, 0.11%)</title><rect x="4.7659%" y="213" width="0.1114%" height="15" fill="rgb(249,33,26)"/><text x="5.0159%" y="223.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (105 samples, 0.10%)</title><rect x="4.7738%" y="197" width="0.1035%" height="15" fill="rgb(235,183,28)"/><text x="5.0238%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (3,831 samples, 3.78%)</title><rect x="5.1493%" y="101" width="3.7755%" height="15" fill="rgb(221,5,38)"/><text x="5.3993%" y="111.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (3,831 samples, 3.78%)</title><rect x="5.1493%" y="85" width="3.7755%" height="15" fill="rgb(247,18,42)"/><text x="5.3993%" y="95.50">&lt;all..</text></g><g><title>core::ptr::write (3,752 samples, 3.70%)</title><rect x="5.2272%" y="69" width="3.6976%" height="15" fill="rgb(241,131,45)"/><text x="5.4772%" y="79.50">core..</text></g><g><title>__memmove_avx_unaligned_erms (3,622 samples, 3.57%)</title><rect x="5.3553%" y="53" width="3.5695%" height="15" fill="rgb(249,31,29)"/><text x="5.6053%" y="63.50">__me..</text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::{{closure}} (3,955 samples, 3.90%)</title><rect x="5.1237%" y="133" width="3.8977%" height="15" fill="rgb(225,111,53)"/><text x="5.3737%" y="143.50">core..</text></g><g><title>core::iter::adapters::map_fold::{{closure}} (3,955 samples, 3.90%)</title><rect x="5.1237%" y="117" width="3.8977%" height="15" fill="rgb(238,160,17)"/><text x="5.3737%" y="127.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4,172 samples, 4.11%)</title><rect x="4.9561%" y="213" width="4.1116%" height="15" fill="rgb(214,148,48)"/><text x="5.2061%" y="223.50">core..</text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,172 samples, 4.11%)</title><rect x="4.9561%" y="197" width="4.1116%" height="15" fill="rgb(232,36,49)"/><text x="5.2061%" y="207.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,172 samples, 4.11%)</title><rect x="4.9561%" y="181" width="4.1116%" height="15" fill="rgb(209,103,24)"/><text x="5.2061%" y="191.50">&lt;cor..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (4,172 samples, 4.11%)</title><rect x="4.9561%" y="165" width="4.1116%" height="15" fill="rgb(229,88,8)"/><text x="5.2061%" y="175.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4,072 samples, 4.01%)</title><rect x="5.0547%" y="149" width="4.0130%" height="15" fill="rgb(213,181,19)"/><text x="5.3047%" y="159.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (4,744 samples, 4.68%)</title><rect x="4.4437%" y="245" width="4.6753%" height="15" fill="rgb(254,191,54)"/><text x="4.6937%" y="255.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4,417 samples, 4.35%)</title><rect x="4.7659%" y="229" width="4.3530%" height="15" fill="rgb(241,83,37)"/><text x="5.0159%" y="239.50">&lt;allo..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (584 samples, 0.58%)</title><rect x="9.2806%" y="85" width="0.5755%" height="15" fill="rgb(233,36,39)"/><text x="9.5306%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (584 samples, 0.58%)</title><rect x="9.2806%" y="69" width="0.5755%" height="15" fill="rgb(226,3,54)"/><text x="9.5306%" y="79.50"></text></g><g><title>core::ptr::write (580 samples, 0.57%)</title><rect x="9.2845%" y="53" width="0.5716%" height="15" fill="rgb(245,192,40)"/><text x="9.5345%" y="63.50"></text></g><g><title>__memmove_avx_unaligned_erms (547 samples, 0.54%)</title><rect x="9.3170%" y="37" width="0.5391%" height="15" fill="rgb(238,167,29)"/><text x="9.5670%" y="47.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (1,334 samples, 1.31%)</title><rect x="9.2806%" y="101" width="1.3147%" height="15" fill="rgb(232,182,51)"/><text x="9.5306%" y="111.50"></text></g><g><title>cs::env::Interpreter::evaluate_function_call::{{closure}} (750 samples, 0.74%)</title><rect x="9.8561%" y="85" width="0.7391%" height="15" fill="rgb(231,60,39)"/><text x="10.1061%" y="95.50"></text></g><g><title>__memmove_avx_unaligned_erms (693 samples, 0.68%)</title><rect x="9.9123%" y="69" width="0.6830%" height="15" fill="rgb(208,69,12)"/><text x="10.1623%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::{{closure}} (1,339 samples, 1.32%)</title><rect x="9.2806%" y="133" width="1.3196%" height="15" fill="rgb(235,93,37)"/><text x="9.5306%" y="143.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (1,339 samples, 1.32%)</title><rect x="9.2806%" y="117" width="1.3196%" height="15" fill="rgb(213,116,39)"/><text x="9.5306%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,381 samples, 1.36%)</title><rect x="9.2412%" y="213" width="1.3610%" height="15" fill="rgb(222,207,29)"/><text x="9.4912%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,381 samples, 1.36%)</title><rect x="9.2412%" y="197" width="1.3610%" height="15" fill="rgb(206,96,30)"/><text x="9.4912%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,381 samples, 1.36%)</title><rect x="9.2412%" y="181" width="1.3610%" height="15" fill="rgb(218,138,4)"/><text x="9.4912%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,381 samples, 1.36%)</title><rect x="9.2412%" y="165" width="1.3610%" height="15" fill="rgb(250,191,14)"/><text x="9.4912%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,361 samples, 1.34%)</title><rect x="9.2609%" y="149" width="1.3413%" height="15" fill="rgb(239,60,40)"/><text x="9.5109%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,460 samples, 1.44%)</title><rect x="9.1663%" y="229" width="1.4388%" height="15" fill="rgb(206,27,48)"/><text x="9.4163%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1,510 samples, 1.49%)</title><rect x="9.1190%" y="245" width="1.4881%" height="15" fill="rgb(225,35,8)"/><text x="9.3690%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (143 samples, 0.14%)</title><rect x="10.7894%" y="229" width="0.1409%" height="15" fill="rgb(250,213,24)"/><text x="11.0394%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (144 samples, 0.14%)</title><rect x="11.1668%" y="197" width="0.1419%" height="15" fill="rgb(247,123,22)"/><text x="11.4168%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1,926 samples, 1.90%)</title><rect x="11.4004%" y="133" width="1.8981%" height="15" fill="rgb(231,138,38)"/><text x="11.6504%" y="143.50">&lt;..</text></g><g><title>alloc::alloc::alloc (1,855 samples, 1.83%)</title><rect x="11.4704%" y="117" width="1.8281%" height="15" fill="rgb(231,145,46)"/><text x="11.7204%" y="127.50">a..</text></g><g><title>__GI___libc_malloc (1,773 samples, 1.75%)</title><rect x="11.5512%" y="101" width="1.7473%" height="15" fill="rgb(251,118,11)"/><text x="11.8012%" y="111.50"></text></g><g><title>_int_malloc (1,118 samples, 1.10%)</title><rect x="12.1967%" y="85" width="1.1018%" height="15" fill="rgb(217,147,25)"/><text x="12.4467%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2,875 samples, 2.83%)</title><rect x="10.6071%" y="245" width="2.8333%" height="15" fill="rgb(247,81,37)"/><text x="10.8571%" y="255.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2,547 samples, 2.51%)</title><rect x="10.9303%" y="229" width="2.5101%" height="15" fill="rgb(209,12,38)"/><text x="11.1803%" y="239.50">al..</text></g><g><title>alloc::slice::hack::to_vec (2,544 samples, 2.51%)</title><rect x="10.9333%" y="213" width="2.5071%" height="15" fill="rgb(227,1,9)"/><text x="11.1833%" y="223.50">al..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,163 samples, 2.13%)</title><rect x="11.3088%" y="197" width="2.1317%" height="15" fill="rgb(248,47,43)"/><text x="11.5588%" y="207.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (2,077 samples, 2.05%)</title><rect x="11.3935%" y="181" width="2.0469%" height="15" fill="rgb(221,10,30)"/><text x="11.6435%" y="191.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,077 samples, 2.05%)</title><rect x="11.3935%" y="165" width="2.0469%" height="15" fill="rgb(210,229,1)"/><text x="11.6435%" y="175.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2,070 samples, 2.04%)</title><rect x="11.4004%" y="149" width="2.0400%" height="15" fill="rgb(222,148,37)"/><text x="11.6504%" y="159.50">a..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,523 samples, 1.50%)</title><rect x="14.6782%" y="229" width="1.5009%" height="15" fill="rgb(234,67,33)"/><text x="14.9282%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,308 samples, 1.29%)</title><rect x="14.8901%" y="213" width="1.2891%" height="15" fill="rgb(247,98,35)"/><text x="15.1401%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (3,340 samples, 3.29%)</title><rect x="16.1802%" y="229" width="3.2916%" height="15" fill="rgb(247,138,52)"/><text x="16.4302%" y="239.50">__m..</text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (152 samples, 0.15%)</title><rect x="20.5263%" y="213" width="0.1498%" height="15" fill="rgb(213,79,30)"/><text x="20.7763%" y="223.50"></text></g><g><title>core::ptr::read (140 samples, 0.14%)</title><rect x="20.5381%" y="197" width="0.1380%" height="15" fill="rgb(246,177,23)"/><text x="20.7881%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (114 samples, 0.11%)</title><rect x="20.5637%" y="181" width="0.1123%" height="15" fill="rgb(230,62,27)"/><text x="20.8137%" y="191.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (151 samples, 0.15%)</title><rect x="20.6800%" y="213" width="0.1488%" height="15" fill="rgb(216,154,8)"/><text x="20.9300%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (5,930 samples, 5.84%)</title><rect x="20.8594%" y="213" width="5.8441%" height="15" fill="rgb(244,35,45)"/><text x="21.1094%" y="223.50">__memmo..</text></g><g><title>_int_free (190 samples, 0.19%)</title><rect x="26.7035%" y="213" width="0.1872%" height="15" fill="rgb(251,115,12)"/><text x="26.9535%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (253 samples, 0.25%)</title><rect x="26.9429%" y="213" width="0.2493%" height="15" fill="rgb(240,54,50)"/><text x="27.1929%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (230 samples, 0.23%)</title><rect x="26.9656%" y="197" width="0.2267%" height="15" fill="rgb(233,84,52)"/><text x="27.2156%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (115 samples, 0.11%)</title><rect x="27.2593%" y="197" width="0.1133%" height="15" fill="rgb(207,117,47)"/><text x="27.5093%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (134 samples, 0.13%)</title><rect x="27.3825%" y="117" width="0.1321%" height="15" fill="rgb(249,43,39)"/><text x="27.6325%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (134 samples, 0.13%)</title><rect x="27.3825%" y="101" width="0.1321%" height="15" fill="rgb(209,38,44)"/><text x="27.6325%" y="111.50"></text></g><g><title>_int_free (102 samples, 0.10%)</title><rect x="27.4140%" y="85" width="0.1005%" height="15" fill="rgb(236,212,23)"/><text x="27.6640%" y="95.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop (149 samples, 0.15%)</title><rect x="27.3726%" y="197" width="0.1468%" height="15" fill="rgb(242,79,21)"/><text x="27.6226%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (143 samples, 0.14%)</title><rect x="27.3785%" y="181" width="0.1409%" height="15" fill="rgb(211,96,35)"/><text x="27.6285%" y="191.50"></text></g><g><title>&lt;&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (142 samples, 0.14%)</title><rect x="27.3795%" y="165" width="0.1399%" height="15" fill="rgb(253,215,40)"/><text x="27.6295%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (139 samples, 0.14%)</title><rect x="27.3825%" y="149" width="0.1370%" height="15" fill="rgb(211,81,21)"/><text x="27.6325%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (139 samples, 0.14%)</title><rect x="27.3825%" y="133" width="0.1370%" height="15" fill="rgb(208,190,38)"/><text x="27.6325%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (245 samples, 0.24%)</title><rect x="27.6072%" y="181" width="0.2415%" height="15" fill="rgb(235,213,38)"/><text x="27.8572%" y="191.50"></text></g><g><title>__GI___libc_free (128 samples, 0.13%)</title><rect x="28.0034%" y="133" width="0.1261%" height="15" fill="rgb(237,122,38)"/><text x="28.2534%" y="143.50"></text></g><g><title>core::ptr::drop_in_place (1,287 samples, 1.27%)</title><rect x="27.1923%" y="213" width="1.2684%" height="15" fill="rgb(244,218,35)"/><text x="27.4423%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (954 samples, 0.94%)</title><rect x="27.5204%" y="197" width="0.9402%" height="15" fill="rgb(240,68,47)"/><text x="27.7704%" y="207.50"></text></g><g><title>alloc::alloc::box_free (539 samples, 0.53%)</title><rect x="27.9294%" y="181" width="0.5312%" height="15" fill="rgb(210,16,53)"/><text x="28.1794%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (515 samples, 0.51%)</title><rect x="27.9531%" y="165" width="0.5075%" height="15" fill="rgb(235,124,12)"/><text x="28.2031%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (515 samples, 0.51%)</title><rect x="27.9531%" y="149" width="0.5075%" height="15" fill="rgb(224,169,11)"/><text x="28.2031%" y="159.50"></text></g><g><title>_int_free (336 samples, 0.33%)</title><rect x="28.1295%" y="133" width="0.3311%" height="15" fill="rgb(250,166,2)"/><text x="28.3795%" y="143.50"></text></g><g><title>cs::external_func::resolve_all_futures (536 samples, 0.53%)</title><rect x="28.4606%" y="213" width="0.5282%" height="15" fill="rgb(242,216,29)"/><text x="28.7106%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (492 samples, 0.48%)</title><rect x="28.5040%" y="197" width="0.4849%" height="15" fill="rgb(230,116,27)"/><text x="28.7540%" y="207.50"></text></g><g><title>cs::env::Interpreter::evaluate::{{closure}} (9,729 samples, 9.59%)</title><rect x="19.4718%" y="229" width="9.5881%" height="15" fill="rgb(228,99,48)"/><text x="19.7218%" y="239.50">cs::env::Inter..</text></g><g><title>__memmove_avx_unaligned_erms (296 samples, 0.29%)</title><rect x="29.1456%" y="213" width="0.2917%" height="15" fill="rgb(253,11,6)"/><text x="29.3956%" y="223.50"></text></g><g><title>cs::env::Interpreter::evaluate_assignment::{{closure}} (576 samples, 0.57%)</title><rect x="29.0598%" y="229" width="0.5677%" height="15" fill="rgb(247,143,39)"/><text x="29.3098%" y="239.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (519 samples, 0.51%)</title><rect x="30.2454%" y="213" width="0.5115%" height="15" fill="rgb(236,97,10)"/><text x="30.4954%" y="223.50"></text></g><g><title>core::ptr::read (468 samples, 0.46%)</title><rect x="30.2957%" y="197" width="0.4612%" height="15" fill="rgb(233,208,19)"/><text x="30.5457%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (320 samples, 0.32%)</title><rect x="30.4415%" y="181" width="0.3154%" height="15" fill="rgb(216,164,2)"/><text x="30.6915%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (3,313 samples, 3.27%)</title><rect x="30.7687%" y="213" width="3.2650%" height="15" fill="rgb(220,129,5)"/><text x="31.0187%" y="223.50">__m..</text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop (118 samples, 0.12%)</title><rect x="34.0751%" y="197" width="0.1163%" height="15" fill="rgb(242,17,10)"/><text x="34.3251%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (118 samples, 0.12%)</title><rect x="34.0751%" y="181" width="0.1163%" height="15" fill="rgb(242,107,0)"/><text x="34.3251%" y="191.50"></text></g><g><title>&lt;&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (114 samples, 0.11%)</title><rect x="34.0790%" y="165" width="0.1123%" height="15" fill="rgb(251,28,31)"/><text x="34.3290%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (111 samples, 0.11%)</title><rect x="34.0820%" y="149" width="0.1094%" height="15" fill="rgb(233,223,10)"/><text x="34.3320%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (111 samples, 0.11%)</title><rect x="34.0820%" y="133" width="0.1094%" height="15" fill="rgb(215,21,27)"/><text x="34.3320%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (111 samples, 0.11%)</title><rect x="34.0820%" y="117" width="0.1094%" height="15" fill="rgb(232,23,21)"/><text x="34.3320%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (110 samples, 0.11%)</title><rect x="34.0830%" y="101" width="0.1084%" height="15" fill="rgb(244,5,23)"/><text x="34.3330%" y="111.50"></text></g><g><title>core::ptr::drop_in_place (301 samples, 0.30%)</title><rect x="34.0337%" y="213" width="0.2966%" height="15" fill="rgb(226,81,46)"/><text x="34.2837%" y="223.50"></text></g><g><title>cs::external_func::resolve_all_futures (364 samples, 0.36%)</title><rect x="34.3303%" y="213" width="0.3587%" height="15" fill="rgb(247,70,30)"/><text x="34.5803%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (350 samples, 0.34%)</title><rect x="34.3441%" y="197" width="0.3449%" height="15" fill="rgb(212,68,19)"/><text x="34.5941%" y="207.50"></text></g><g><title>cs::lang::Value::unwrap_early_return (250 samples, 0.25%)</title><rect x="34.6891%" y="213" width="0.2464%" height="15" fill="rgb(240,187,13)"/><text x="34.9391%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (219 samples, 0.22%)</title><rect x="34.7196%" y="197" width="0.2158%" height="15" fill="rgb(223,113,26)"/><text x="34.9696%" y="207.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (431 samples, 0.42%)</title><rect x="34.9354%" y="213" width="0.4248%" height="15" fill="rgb(206,192,2)"/><text x="35.1854%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (376 samples, 0.37%)</title><rect x="34.9897%" y="197" width="0.3706%" height="15" fill="rgb(241,108,4)"/><text x="35.2397%" y="207.50"></text></g><g><title>cs::env::Interpreter::evaluate_function_call::{{closure}} (5,866 samples, 5.78%)</title><rect x="29.6275%" y="229" width="5.7810%" height="15" fill="rgb(247,173,49)"/><text x="29.8775%" y="239.50">cs::env..</text></g><g><title>__memmove_avx_unaligned_erms (1,758 samples, 1.73%)</title><rect x="35.8342%" y="213" width="1.7325%" height="15" fill="rgb(224,114,35)"/><text x="36.0842%" y="223.50"></text></g><g><title>cs::external_func::resolve_all_futures::{{closure}} (2,394 samples, 2.36%)</title><rect x="35.4085%" y="229" width="2.3593%" height="15" fill="rgb(245,159,27)"/><text x="35.6585%" y="239.50">c..</text></g><g><title>cs::external_func::resolve_futures (197 samples, 0.19%)</title><rect x="37.5737%" y="213" width="0.1941%" height="15" fill="rgb(245,172,44)"/><text x="37.8237%" y="223.50"></text></g><g><title>cs::lang::Value::new_future (145 samples, 0.14%)</title><rect x="37.6249%" y="197" width="0.1429%" height="15" fill="rgb(236,23,11)"/><text x="37.8749%" y="207.50"></text></g><g><title>cs::lang::Value::new_value_future (145 samples, 0.14%)</title><rect x="37.6249%" y="181" width="0.1429%" height="15" fill="rgb(205,117,38)"/><text x="37.8749%" y="191.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (24,819 samples, 24.46%)</title><rect x="13.5350%" y="245" width="24.4594%" height="15" fill="rgb(237,72,25)"/><text x="13.7850%" y="255.50">&lt;core::future::from_generator::GenFutur..</text></g><g><title>cs::external_func::resolve_futures::{{closure}} (230 samples, 0.23%)</title><rect x="37.7678%" y="229" width="0.2267%" height="15" fill="rgb(244,70,9)"/><text x="38.0178%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (116 samples, 0.11%)</title><rect x="38.0329%" y="165" width="0.1143%" height="15" fill="rgb(217,125,39)"/><text x="38.2829%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (116 samples, 0.11%)</title><rect x="38.0329%" y="149" width="0.1143%" height="15" fill="rgb(235,36,10)"/><text x="38.2829%" y="159.50"></text></g><g><title>core::ptr::write (116 samples, 0.11%)</title><rect x="38.0329%" y="133" width="0.1143%" height="15" fill="rgb(251,123,47)"/><text x="38.2829%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::{{closure}} (216 samples, 0.21%)</title><rect x="38.0329%" y="197" width="0.2129%" height="15" fill="rgb(221,13,13)"/><text x="38.2829%" y="207.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (216 samples, 0.21%)</title><rect x="38.0329%" y="181" width="0.2129%" height="15" fill="rgb(238,131,9)"/><text x="38.2829%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (257 samples, 0.25%)</title><rect x="37.9945%" y="245" width="0.2533%" height="15" fill="rgb(211,50,8)"/><text x="38.2445%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (247 samples, 0.24%)</title><rect x="38.0043%" y="229" width="0.2434%" height="15" fill="rgb(245,182,24)"/><text x="38.2543%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (218 samples, 0.21%)</title><rect x="38.0329%" y="213" width="0.2148%" height="15" fill="rgb(242,14,37)"/><text x="38.2829%" y="223.50"></text></g><g><title>&lt;cs::builtins::DivideTemp as cs::lang::Function&gt;::call (192 samples, 0.19%)</title><rect x="38.3355%" y="245" width="0.1892%" height="15" fill="rgb(246,228,12)"/><text x="38.5855%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (110 samples, 0.11%)</title><rect x="38.4163%" y="229" width="0.1084%" height="15" fill="rgb(213,55,15)"/><text x="38.6663%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (110 samples, 0.11%)</title><rect x="38.4163%" y="213" width="0.1084%" height="15" fill="rgb(209,9,3)"/><text x="38.6663%" y="223.50"></text></g><g><title>&lt;cs::builtins::Equals as cs::lang::Function&gt;::call (273 samples, 0.27%)</title><rect x="38.5247%" y="245" width="0.2690%" height="15" fill="rgb(230,59,30)"/><text x="38.7747%" y="255.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (150 samples, 0.15%)</title><rect x="38.6459%" y="229" width="0.1478%" height="15" fill="rgb(209,121,21)"/><text x="38.8959%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (150 samples, 0.15%)</title><rect x="38.6459%" y="213" width="0.1478%" height="15" fill="rgb(220,109,13)"/><text x="38.8959%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (147 samples, 0.14%)</title><rect x="38.6489%" y="197" width="0.1449%" height="15" fill="rgb(232,18,1)"/><text x="38.8989%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (154 samples, 0.15%)</title><rect x="38.8460%" y="197" width="0.1518%" height="15" fill="rgb(215,41,42)"/><text x="39.0960%" y="207.50"></text></g><g><title>&lt;cs::builtins::Subtract as cs::lang::Function&gt;::call (239 samples, 0.24%)</title><rect x="38.7937%" y="245" width="0.2355%" height="15" fill="rgb(224,123,36)"/><text x="39.0437%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (189 samples, 0.19%)</title><rect x="38.8430%" y="229" width="0.1863%" height="15" fill="rgb(240,125,3)"/><text x="39.0930%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (189 samples, 0.19%)</title><rect x="38.8430%" y="213" width="0.1863%" height="15" fill="rgb(205,98,50)"/><text x="39.0930%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (106 samples, 0.10%)</title><rect x="39.1899%" y="229" width="0.1045%" height="15" fill="rgb(205,185,37)"/><text x="39.4399%" y="239.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (106 samples, 0.10%)</title><rect x="39.1899%" y="213" width="0.1045%" height="15" fill="rgb(238,207,15)"/><text x="39.4399%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (106 samples, 0.10%)</title><rect x="39.1899%" y="197" width="0.1045%" height="15" fill="rgb(213,199,42)"/><text x="39.4399%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (258 samples, 0.25%)</title><rect x="39.3141%" y="229" width="0.2543%" height="15" fill="rgb(235,201,11)"/><text x="39.5641%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (102 samples, 0.10%)</title><rect x="39.6019%" y="229" width="0.1005%" height="15" fill="rgb(207,46,11)"/><text x="39.8519%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (102 samples, 0.10%)</title><rect x="39.6019%" y="213" width="0.1005%" height="15" fill="rgb(241,35,35)"/><text x="39.8519%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (189 samples, 0.19%)</title><rect x="39.7960%" y="197" width="0.1863%" height="15" fill="rgb(243,32,47)"/><text x="40.0460%" y="207.50"></text></g><g><title>&lt;cs::code_function::CodeFunction as cs::lang::Function&gt;::call (1,036 samples, 1.02%)</title><rect x="39.0293%" y="245" width="1.0210%" height="15" fill="rgb(247,202,23)"/><text x="39.2793%" y="255.50"></text></g><g><title>cs::lang::Value::new_future (267 samples, 0.26%)</title><rect x="39.7871%" y="229" width="0.2631%" height="15" fill="rgb(219,102,11)"/><text x="40.0371%" y="239.50"></text></g><g><title>cs::lang::Value::new_value_future (262 samples, 0.26%)</title><rect x="39.7921%" y="213" width="0.2582%" height="15" fill="rgb(243,110,44)"/><text x="40.0421%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::clone::Clone&gt;::clone (3,858 samples, 3.80%)</title><rect x="43.2857%" y="213" width="3.8021%" height="15" fill="rgb(222,74,54)"/><text x="43.5357%" y="223.50">&lt;all..</text></g><g><title>alloc::alloc::exchange_malloc (3,771 samples, 3.72%)</title><rect x="43.3714%" y="197" width="3.7164%" height="15" fill="rgb(216,99,12)"/><text x="43.6214%" y="207.50">allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (3,771 samples, 3.72%)</title><rect x="43.3714%" y="181" width="3.7164%" height="15" fill="rgb(226,22,26)"/><text x="43.6214%" y="191.50">&lt;all..</text></g><g><title>alloc::alloc::alloc (3,761 samples, 3.71%)</title><rect x="43.3813%" y="165" width="3.7065%" height="15" fill="rgb(217,163,10)"/><text x="43.6313%" y="175.50">allo..</text></g><g><title>__GI___libc_malloc (3,658 samples, 3.61%)</title><rect x="43.4828%" y="149" width="3.6050%" height="15" fill="rgb(213,25,53)"/><text x="43.7328%" y="159.50">__GI..</text></g><g><title>_int_malloc (2,905 samples, 2.86%)</title><rect x="44.2249%" y="133" width="2.8629%" height="15" fill="rgb(252,105,26)"/><text x="44.4749%" y="143.50">_i..</text></g><g><title>unlink_chunk.constprop.0 (126 samples, 0.12%)</title><rect x="46.9636%" y="117" width="0.1242%" height="15" fill="rgb(220,39,43)"/><text x="47.2136%" y="127.50"></text></g><g><title>&lt;cs::lang::Argument as core::clone::Clone&gt;::clone (4,167 samples, 4.11%)</title><rect x="43.1517%" y="229" width="4.1066%" height="15" fill="rgb(229,68,48)"/><text x="43.4017%" y="239.50">&lt;cs:..</text></g><g><title>&lt;uuid::Uuid as core::clone::Clone&gt;::clone (173 samples, 0.17%)</title><rect x="47.0878%" y="213" width="0.1705%" height="15" fill="rgb(252,8,32)"/><text x="47.3378%" y="223.50"></text></g><g><title>&lt;cs::lang::Assignment as core::clone::Clone&gt;::clone (749 samples, 0.74%)</title><rect x="47.2583%" y="229" width="0.7381%" height="15" fill="rgb(223,20,43)"/><text x="47.5083%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::clone::Clone&gt;::clone (714 samples, 0.70%)</title><rect x="47.2928%" y="213" width="0.7037%" height="15" fill="rgb(229,81,49)"/><text x="47.5428%" y="223.50"></text></g><g><title>alloc::alloc::exchange_malloc (703 samples, 0.69%)</title><rect x="47.3036%" y="197" width="0.6928%" height="15" fill="rgb(236,28,36)"/><text x="47.5536%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (703 samples, 0.69%)</title><rect x="47.3036%" y="181" width="0.6928%" height="15" fill="rgb(249,185,26)"/><text x="47.5536%" y="191.50"></text></g><g><title>alloc::alloc::alloc (703 samples, 0.69%)</title><rect x="47.3036%" y="165" width="0.6928%" height="15" fill="rgb(249,174,33)"/><text x="47.5536%" y="175.50"></text></g><g><title>__GI___libc_malloc (695 samples, 0.68%)</title><rect x="47.3115%" y="149" width="0.6849%" height="15" fill="rgb(233,201,37)"/><text x="47.5615%" y="159.50"></text></g><g><title>_int_malloc (611 samples, 0.60%)</title><rect x="47.3943%" y="133" width="0.6021%" height="15" fill="rgb(221,78,26)"/><text x="47.6443%" y="143.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::clone::Clone&gt;::clone (232 samples, 0.23%)</title><rect x="48.0733%" y="213" width="0.2286%" height="15" fill="rgb(250,127,30)"/><text x="48.3233%" y="223.50"></text></g><g><title>alloc::alloc::exchange_malloc (222 samples, 0.22%)</title><rect x="48.0832%" y="197" width="0.2188%" height="15" fill="rgb(230,49,44)"/><text x="48.3332%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (222 samples, 0.22%)</title><rect x="48.0832%" y="181" width="0.2188%" height="15" fill="rgb(229,67,23)"/><text x="48.3332%" y="191.50"></text></g><g><title>alloc::alloc::alloc (221 samples, 0.22%)</title><rect x="48.0842%" y="165" width="0.2178%" height="15" fill="rgb(249,83,47)"/><text x="48.3342%" y="175.50"></text></g><g><title>__GI___libc_malloc (215 samples, 0.21%)</title><rect x="48.0901%" y="149" width="0.2119%" height="15" fill="rgb(215,43,3)"/><text x="48.3401%" y="159.50"></text></g><g><title>_int_malloc (162 samples, 0.16%)</title><rect x="48.1423%" y="133" width="0.1597%" height="15" fill="rgb(238,154,13)"/><text x="48.3923%" y="143.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (131 samples, 0.13%)</title><rect x="48.3020%" y="213" width="0.1291%" height="15" fill="rgb(219,56,2)"/><text x="48.5520%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::clone::Clone&gt;::clone (129 samples, 0.13%)</title><rect x="48.3039%" y="197" width="0.1271%" height="15" fill="rgb(233,0,4)"/><text x="48.5539%" y="207.50"></text></g><g><title>alloc::alloc::exchange_malloc (119 samples, 0.12%)</title><rect x="48.3138%" y="181" width="0.1173%" height="15" fill="rgb(235,30,7)"/><text x="48.5638%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (119 samples, 0.12%)</title><rect x="48.3138%" y="165" width="0.1173%" height="15" fill="rgb(250,79,13)"/><text x="48.5638%" y="175.50"></text></g><g><title>alloc::alloc::alloc (118 samples, 0.12%)</title><rect x="48.3148%" y="149" width="0.1163%" height="15" fill="rgb(211,146,34)"/><text x="48.5648%" y="159.50"></text></g><g><title>__GI___libc_malloc (112 samples, 0.11%)</title><rect x="48.3207%" y="133" width="0.1104%" height="15" fill="rgb(228,22,38)"/><text x="48.5707%" y="143.50"></text></g><g><title>&lt;cs::lang::Conditional as core::clone::Clone&gt;::clone (382 samples, 0.38%)</title><rect x="48.0733%" y="229" width="0.3765%" height="15" fill="rgb(235,168,5)"/><text x="48.3233%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::clone::Clone&gt;::clone (166 samples, 0.16%)</title><rect x="48.4537%" y="213" width="0.1636%" height="15" fill="rgb(221,155,16)"/><text x="48.7037%" y="223.50"></text></g><g><title>alloc::alloc::exchange_malloc (163 samples, 0.16%)</title><rect x="48.4567%" y="197" width="0.1606%" height="15" fill="rgb(215,215,53)"/><text x="48.7067%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (163 samples, 0.16%)</title><rect x="48.4567%" y="181" width="0.1606%" height="15" fill="rgb(223,4,10)"/><text x="48.7067%" y="191.50"></text></g><g><title>alloc::alloc::alloc (163 samples, 0.16%)</title><rect x="48.4567%" y="165" width="0.1606%" height="15" fill="rgb(234,103,6)"/><text x="48.7067%" y="175.50"></text></g><g><title>__GI___libc_malloc (152 samples, 0.15%)</title><rect x="48.4675%" y="149" width="0.1498%" height="15" fill="rgb(227,97,0)"/><text x="48.7175%" y="159.50"></text></g><g><title>_int_malloc (124 samples, 0.12%)</title><rect x="48.4951%" y="133" width="0.1222%" height="15" fill="rgb(234,150,53)"/><text x="48.7451%" y="143.50"></text></g><g><title>&lt;cs::lang::EarlyReturn as core::clone::Clone&gt;::clone (208 samples, 0.20%)</title><rect x="48.4498%" y="229" width="0.2050%" height="15" fill="rgb(228,201,54)"/><text x="48.6998%" y="239.50"></text></g><g><title>&lt;cs::lang::FunctionCall as core::clone::Clone&gt;::clone (2,162 samples, 2.13%)</title><rect x="48.6567%" y="229" width="2.1307%" height="15" fill="rgb(222,22,37)"/><text x="48.9067%" y="239.50">&lt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::clone::Clone&gt;::clone (2,040 samples, 2.01%)</title><rect x="48.7770%" y="213" width="2.0104%" height="15" fill="rgb(237,53,32)"/><text x="49.0270%" y="223.50">&lt;..</text></g><g><title>alloc::alloc::exchange_malloc (1,990 samples, 1.96%)</title><rect x="48.8263%" y="197" width="1.9612%" height="15" fill="rgb(233,25,53)"/><text x="49.0763%" y="207.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1,990 samples, 1.96%)</title><rect x="48.8263%" y="181" width="1.9612%" height="15" fill="rgb(210,40,34)"/><text x="49.0763%" y="191.50">&lt;..</text></g><g><title>alloc::alloc::alloc (1,974 samples, 1.95%)</title><rect x="48.8420%" y="165" width="1.9454%" height="15" fill="rgb(241,220,44)"/><text x="49.0920%" y="175.50">a..</text></g><g><title>__GI___libc_malloc (1,662 samples, 1.64%)</title><rect x="49.1495%" y="149" width="1.6379%" height="15" fill="rgb(235,28,35)"/><text x="49.3995%" y="159.50"></text></g><g><title>_int_malloc (1,083 samples, 1.07%)</title><rect x="49.7201%" y="133" width="1.0673%" height="15" fill="rgb(210,56,17)"/><text x="49.9701%" y="143.50"></text></g><g><title>&lt;cs::lang::FunctionReference as core::clone::Clone&gt;::clone (130 samples, 0.13%)</title><rect x="50.7874%" y="229" width="0.1281%" height="15" fill="rgb(224,130,29)"/><text x="51.0374%" y="239.50"></text></g><g><title>&lt;cs::lang::NumberLiteral as core::clone::Clone&gt;::clone (131 samples, 0.13%)</title><rect x="50.9155%" y="229" width="0.1291%" height="15" fill="rgb(235,212,8)"/><text x="51.1655%" y="239.50"></text></g><g><title>&lt;cs::lang::VariableReference as core::clone::Clone&gt;::clone (481 samples, 0.47%)</title><rect x="51.0446%" y="229" width="0.4740%" height="15" fill="rgb(223,33,50)"/><text x="51.2946%" y="239.50"></text></g><g><title>&lt;uuid::Uuid as core::clone::Clone&gt;::clone (371 samples, 0.37%)</title><rect x="51.1531%" y="213" width="0.3656%" height="15" fill="rgb(219,149,13)"/><text x="51.4031%" y="223.50"></text></g><g><title>&lt;cs::lang::CodeNode as core::clone::Clone&gt;::clone (11,653 samples, 11.48%)</title><rect x="40.0503%" y="245" width="11.4842%" height="15" fill="rgb(250,156,29)"/><text x="40.3003%" y="255.50">&lt;cs::lang::CodeNo..</text></g><g><title>&lt;cs::lang::Value as core::clone::Clone&gt;::clone (529 samples, 0.52%)</title><rect x="51.5344%" y="245" width="0.5213%" height="15" fill="rgb(216,193,19)"/><text x="51.7844%" y="255.50"></text></g><g><title>&lt;futures_util::fns::UnwrapOrElseFn&lt;F&gt; as futures_util::fns::FnOnce1&lt;core::result::Result&lt;T,E&gt;&gt;&gt;::call_once (483 samples, 0.48%)</title><rect x="52.2657%" y="229" width="0.4760%" height="15" fill="rgb(216,135,14)"/><text x="52.5157%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (404 samples, 0.40%)</title><rect x="52.3435%" y="213" width="0.3981%" height="15" fill="rgb(241,47,5)"/><text x="52.5935%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (392 samples, 0.39%)</title><rect x="52.3554%" y="197" width="0.3863%" height="15" fill="rgb(233,42,35)"/><text x="52.6054%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (162 samples, 0.16%)</title><rect x="52.7791%" y="229" width="0.1597%" height="15" fill="rgb(231,13,6)"/><text x="53.0291%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (366 samples, 0.36%)</title><rect x="53.0236%" y="213" width="0.3607%" height="15" fill="rgb(207,181,40)"/><text x="53.2736%" y="223.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1,551 samples, 1.53%)</title><rect x="52.2223%" y="245" width="1.5285%" height="15" fill="rgb(254,173,49)"/><text x="52.4723%" y="255.50"></text></g><g><title>futures_util::future::future::map::_::&lt;impl futures_util::future::future::map::Map&lt;Fut,F&gt;&gt;::project_replace (764 samples, 0.75%)</title><rect x="52.9979%" y="229" width="0.7529%" height="15" fill="rgb(221,1,38)"/><text x="53.2479%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (372 samples, 0.37%)</title><rect x="53.3843%" y="213" width="0.3666%" height="15" fill="rgb(206,124,46)"/><text x="53.6343%" y="223.50"></text></g><g><title>&lt;pin_project::__private::UnsafeOverwriteGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (366 samples, 0.36%)</title><rect x="53.3902%" y="197" width="0.3607%" height="15" fill="rgb(249,21,11)"/><text x="53.6402%" y="207.50"></text></g><g><title>core::ptr::write (366 samples, 0.36%)</title><rect x="53.3902%" y="181" width="0.3607%" height="15" fill="rgb(222,201,40)"/><text x="53.6402%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (357 samples, 0.35%)</title><rect x="53.3990%" y="165" width="0.3518%" height="15" fill="rgb(235,61,29)"/><text x="53.6490%" y="175.50"></text></g><g><title>&lt;futures_util::future::future::shared::Notifier as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (152 samples, 0.15%)</title><rect x="53.7509%" y="245" width="0.1498%" height="15" fill="rgb(219,207,3)"/><text x="54.0009%" y="255.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (114 samples, 0.11%)</title><rect x="53.7883%" y="229" width="0.1123%" height="15" fill="rgb(222,56,46)"/><text x="54.0383%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (401 samples, 0.40%)</title><rect x="54.1805%" y="229" width="0.3952%" height="15" fill="rgb(239,76,54)"/><text x="54.4305%" y="239.50"></text></g><g><title>std::sys_common::mutex::Mutex::raw_unlock (107 samples, 0.11%)</title><rect x="54.5807%" y="181" width="0.1054%" height="15" fill="rgb(231,124,27)"/><text x="54.8307%" y="191.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (107 samples, 0.11%)</title><rect x="54.5807%" y="165" width="0.1054%" height="15" fill="rgb(249,195,6)"/><text x="54.8307%" y="175.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (102 samples, 0.10%)</title><rect x="54.5856%" y="149" width="0.1005%" height="15" fill="rgb(237,174,47)"/><text x="54.8356%" y="159.50"></text></g><g><title>core::mem::drop (126 samples, 0.12%)</title><rect x="54.5757%" y="229" width="0.1242%" height="15" fill="rgb(206,201,31)"/><text x="54.8257%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (126 samples, 0.12%)</title><rect x="54.5757%" y="213" width="0.1242%" height="15" fill="rgb(231,57,52)"/><text x="54.8257%" y="223.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (121 samples, 0.12%)</title><rect x="54.5807%" y="197" width="0.1192%" height="15" fill="rgb(248,177,22)"/><text x="54.8307%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (228 samples, 0.22%)</title><rect x="54.7650%" y="229" width="0.2247%" height="15" fill="rgb(215,211,37)"/><text x="55.0150%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (222 samples, 0.22%)</title><rect x="54.7709%" y="213" width="0.2188%" height="15" fill="rgb(241,128,51)"/><text x="55.0209%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (208 samples, 0.20%)</title><rect x="54.7847%" y="197" width="0.2050%" height="15" fill="rgb(227,165,31)"/><text x="55.0347%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (155 samples, 0.15%)</title><rect x="55.1089%" y="229" width="0.1528%" height="15" fill="rgb(228,167,24)"/><text x="55.3589%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_store (155 samples, 0.15%)</title><rect x="55.1089%" y="213" width="0.1528%" height="15" fill="rgb(228,143,12)"/><text x="55.3589%" y="223.50"></text></g><g><title>&lt;futures_util::future::future::shared::Shared&lt;Fut&gt; as core::future::future::Future&gt;::poll (1,485 samples, 1.46%)</title><rect x="53.9007%" y="245" width="1.4635%" height="15" fill="rgb(249,149,8)"/><text x="54.1507%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (267 samples, 0.26%)</title><rect x="55.4972%" y="245" width="0.2631%" height="15" fill="rgb(243,35,44)"/><text x="55.7472%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (375 samples, 0.37%)</title><rect x="57.1588%" y="181" width="0.3696%" height="15" fill="rgb(246,89,9)"/><text x="57.4088%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,125 samples, 1.11%)</title><rect x="56.7005%" y="197" width="1.1087%" height="15" fill="rgb(233,213,13)"/><text x="56.9505%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (285 samples, 0.28%)</title><rect x="57.5283%" y="181" width="0.2809%" height="15" fill="rgb(233,141,41)"/><text x="57.7783%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (280 samples, 0.28%)</title><rect x="57.8092%" y="197" width="0.2759%" height="15" fill="rgb(239,167,4)"/><text x="58.0592%" y="207.50"></text></g><g><title>core::hash::sip::u8to64_le (365 samples, 0.36%)</title><rect x="58.0851%" y="197" width="0.3597%" height="15" fill="rgb(209,217,16)"/><text x="58.3351%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,700 samples, 2.66%)</title><rect x="55.8677%" y="245" width="2.6609%" height="15" fill="rgb(219,88,35)"/><text x="56.1177%" y="255.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2,491 samples, 2.45%)</title><rect x="56.0737%" y="229" width="2.4549%" height="15" fill="rgb(220,193,23)"/><text x="56.3237%" y="239.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,491 samples, 2.45%)</title><rect x="56.0737%" y="213" width="2.4549%" height="15" fill="rgb(230,90,52)"/><text x="56.3237%" y="223.50">&lt;c..</text></g><g><title>__GI___libc_malloc (130 samples, 0.13%)</title><rect x="58.6843%" y="229" width="0.1281%" height="15" fill="rgb(252,106,19)"/><text x="58.9343%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (167 samples, 0.16%)</title><rect x="58.8213%" y="229" width="0.1646%" height="15" fill="rgb(206,74,20)"/><text x="59.0713%" y="239.50"></text></g><g><title>_int_free (516 samples, 0.51%)</title><rect x="59.0155%" y="229" width="0.5085%" height="15" fill="rgb(230,138,44)"/><text x="59.2655%" y="239.50"></text></g><g><title>_int_malloc (451 samples, 0.44%)</title><rect x="59.5240%" y="229" width="0.4445%" height="15" fill="rgb(235,182,43)"/><text x="59.7740%" y="239.50"></text></g><g><title>[[heap]] (1,464 samples, 1.44%)</title><rect x="58.6390%" y="245" width="1.4428%" height="15" fill="rgb(242,16,51)"/><text x="58.8890%" y="255.50"></text></g><g><title>__GI___libc_malloc (321 samples, 0.32%)</title><rect x="60.1074%" y="229" width="0.3163%" height="15" fill="rgb(248,9,4)"/><text x="60.3574%" y="239.50"></text></g><g><title>_int_free (277 samples, 0.27%)</title><rect x="60.4839%" y="229" width="0.2730%" height="15" fill="rgb(210,31,22)"/><text x="60.7339%" y="239.50"></text></g><g><title>[[stack]] (696 samples, 0.69%)</title><rect x="60.0818%" y="245" width="0.6859%" height="15" fill="rgb(239,54,39)"/><text x="60.3318%" y="255.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (662 samples, 0.65%)</title><rect x="60.8111%" y="229" width="0.6524%" height="15" fill="rgb(230,99,41)"/><text x="61.0611%" y="239.50"></text></g><g><title>cs::env::Interpreter::evaluate::{{closure}} (662 samples, 0.65%)</title><rect x="60.8111%" y="213" width="0.6524%" height="15" fill="rgb(253,106,12)"/><text x="61.0611%" y="223.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (662 samples, 0.65%)</title><rect x="60.8111%" y="197" width="0.6524%" height="15" fill="rgb(213,46,41)"/><text x="61.0611%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (564 samples, 0.56%)</title><rect x="60.9077%" y="181" width="0.5558%" height="15" fill="rgb(215,133,35)"/><text x="61.1577%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (286 samples, 0.28%)</title><rect x="61.4783%" y="229" width="0.2819%" height="15" fill="rgb(213,28,5)"/><text x="61.7283%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (286 samples, 0.28%)</title><rect x="61.4783%" y="213" width="0.2819%" height="15" fill="rgb(215,77,49)"/><text x="61.7283%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (286 samples, 0.28%)</title><rect x="61.4783%" y="197" width="0.2819%" height="15" fill="rgb(248,100,22)"/><text x="61.7283%" y="207.50"></text></g><g><title>__GI___libc_malloc (197 samples, 0.19%)</title><rect x="61.8301%" y="229" width="0.1941%" height="15" fill="rgb(208,67,9)"/><text x="62.0801%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (250 samples, 0.25%)</title><rect x="62.0518%" y="229" width="0.2464%" height="15" fill="rgb(219,133,21)"/><text x="62.3018%" y="239.50"></text></g><g><title>_int_free (487 samples, 0.48%)</title><rect x="62.3268%" y="229" width="0.4799%" height="15" fill="rgb(246,46,29)"/><text x="62.5768%" y="239.50"></text></g><g><title>core::slice::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (791 samples, 0.78%)</title><rect x="62.9211%" y="229" width="0.7795%" height="15" fill="rgb(246,185,52)"/><text x="63.1711%" y="239.50"></text></g><g><title>&lt;[A] as core::slice::SlicePartialEq&lt;A&gt;&gt;::equal (791 samples, 0.78%)</title><rect x="62.9211%" y="213" width="0.7795%" height="15" fill="rgb(252,136,11)"/><text x="63.1711%" y="223.50"></text></g><g><title>__memcmp_avx2_movbe (698 samples, 0.69%)</title><rect x="63.0127%" y="197" width="0.6879%" height="15" fill="rgb(219,138,53)"/><text x="63.2627%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (340 samples, 0.34%)</title><rect x="63.8681%" y="213" width="0.3351%" height="15" fill="rgb(211,51,23)"/><text x="64.1181%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (340 samples, 0.34%)</title><rect x="63.8681%" y="197" width="0.3351%" height="15" fill="rgb(247,221,28)"/><text x="64.1181%" y="207.50"></text></g><g><title>core::ptr::write (340 samples, 0.34%)</title><rect x="63.8681%" y="181" width="0.3351%" height="15" fill="rgb(251,222,45)"/><text x="64.1181%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (307 samples, 0.30%)</title><rect x="63.9007%" y="165" width="0.3026%" height="15" fill="rgb(217,162,53)"/><text x="64.1507%" y="175.50"></text></g><g><title>hashbrown::raw::is_full (135 samples, 0.13%)</title><rect x="64.2988%" y="197" width="0.1330%" height="15" fill="rgb(229,93,14)"/><text x="64.5488%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (328 samples, 0.32%)</title><rect x="64.2052%" y="213" width="0.3232%" height="15" fill="rgb(209,67,49)"/><text x="64.4552%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (820 samples, 0.81%)</title><rect x="63.7814%" y="229" width="0.8081%" height="15" fill="rgb(213,87,29)"/><text x="64.0314%" y="239.50"></text></g><g><title>[unknown] (4,002 samples, 3.94%)</title><rect x="60.7815%" y="245" width="3.9440%" height="15" fill="rgb(205,151,52)"/><text x="61.0315%" y="255.50">[unk..</text></g><g><title>unlink_chunk.constprop.0 (115 samples, 0.11%)</title><rect x="64.6122%" y="229" width="0.1133%" height="15" fill="rgb(253,215,39)"/><text x="64.8622%" y="239.50"></text></g><g><title>__rdl_alloc (778 samples, 0.77%)</title><rect x="64.8280%" y="245" width="0.7667%" height="15" fill="rgb(221,220,41)"/><text x="65.0780%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (745 samples, 0.73%)</title><rect x="64.8605%" y="229" width="0.7342%" height="15" fill="rgb(218,133,21)"/><text x="65.1105%" y="239.50"></text></g><g><title>__rdl_dealloc (338 samples, 0.33%)</title><rect x="65.5948%" y="245" width="0.3331%" height="15" fill="rgb(221,193,43)"/><text x="65.8448%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (338 samples, 0.33%)</title><rect x="65.5948%" y="229" width="0.3331%" height="15" fill="rgb(240,128,52)"/><text x="65.8448%" y="239.50"></text></g><g><title>__rust_alloc (313 samples, 0.31%)</title><rect x="65.9279%" y="245" width="0.3085%" height="15" fill="rgb(253,114,12)"/><text x="66.1779%" y="255.50"></text></g><g><title>__rust_dealloc (307 samples, 0.30%)</title><rect x="66.2363%" y="245" width="0.3026%" height="15" fill="rgb(215,223,47)"/><text x="66.4863%" y="255.50"></text></g><g><title>__GI___libc_malloc (195 samples, 0.19%)</title><rect x="66.7734%" y="229" width="0.1922%" height="15" fill="rgb(248,225,23)"/><text x="67.0234%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow (402 samples, 0.40%)</title><rect x="66.6384%" y="245" width="0.3962%" height="15" fill="rgb(250,108,0)"/><text x="66.8884%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (107 samples, 0.11%)</title><rect x="67.1203%" y="229" width="0.1054%" height="15" fill="rgb(228,208,7)"/><text x="67.3703%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (107 samples, 0.11%)</title><rect x="67.1203%" y="213" width="0.1054%" height="15" fill="rgb(244,45,10)"/><text x="67.3703%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (257 samples, 0.25%)</title><rect x="67.0996%" y="245" width="0.2533%" height="15" fill="rgb(207,125,25)"/><text x="67.3496%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (129 samples, 0.13%)</title><rect x="67.2258%" y="229" width="0.1271%" height="15" fill="rgb(210,195,18)"/><text x="67.4758%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (129 samples, 0.13%)</title><rect x="67.2258%" y="213" width="0.1271%" height="15" fill="rgb(249,80,12)"/><text x="67.4758%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (367 samples, 0.36%)</title><rect x="67.4633%" y="245" width="0.3617%" height="15" fill="rgb(221,65,9)"/><text x="67.7133%" y="255.50"></text></g><g><title>core::mem::replace (180 samples, 0.18%)</title><rect x="67.6476%" y="229" width="0.1774%" height="15" fill="rgb(235,49,36)"/><text x="67.8976%" y="239.50"></text></g><g><title>core::mem::swap (180 samples, 0.18%)</title><rect x="67.6476%" y="213" width="0.1774%" height="15" fill="rgb(225,32,20)"/><text x="67.8976%" y="223.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (180 samples, 0.18%)</title><rect x="67.6476%" y="197" width="0.1774%" height="15" fill="rgb(215,141,46)"/><text x="67.8976%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (115 samples, 0.11%)</title><rect x="67.7116%" y="181" width="0.1133%" height="15" fill="rgb(250,160,47)"/><text x="67.9616%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (217 samples, 0.21%)</title><rect x="68.0231%" y="229" width="0.2139%" height="15" fill="rgb(216,222,40)"/><text x="68.2731%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (507 samples, 0.50%)</title><rect x="67.8250%" y="245" width="0.4997%" height="15" fill="rgb(234,217,39)"/><text x="68.0750%" y="255.50"></text></g><g><title>__GI___libc_free (109 samples, 0.11%)</title><rect x="72.3367%" y="181" width="0.1074%" height="15" fill="rgb(207,178,40)"/><text x="72.5867%" y="191.50"></text></g><g><title>_int_free (317 samples, 0.31%)</title><rect x="72.4441%" y="181" width="0.3124%" height="15" fill="rgb(221,136,13)"/><text x="72.6941%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (752 samples, 0.74%)</title><rect x="72.2105%" y="213" width="0.7411%" height="15" fill="rgb(249,199,10)"/><text x="72.4605%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (724 samples, 0.71%)</title><rect x="72.2381%" y="197" width="0.7135%" height="15" fill="rgb(249,222,13)"/><text x="72.4881%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (198 samples, 0.20%)</title><rect x="72.7565%" y="181" width="0.1951%" height="15" fill="rgb(244,185,38)"/><text x="73.0065%" y="191.50"></text></g><g><title>core::ptr::drop_in_place (194 samples, 0.19%)</title><rect x="72.7604%" y="165" width="0.1912%" height="15" fill="rgb(236,202,9)"/><text x="73.0104%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (194 samples, 0.19%)</title><rect x="72.7604%" y="149" width="0.1912%" height="15" fill="rgb(250,229,37)"/><text x="73.0104%" y="159.50"></text></g><g><title>core::ptr::drop_in_place (191 samples, 0.19%)</title><rect x="72.7634%" y="133" width="0.1882%" height="15" fill="rgb(206,174,23)"/><text x="73.0134%" y="143.50"></text></g><g><title>_int_free (314 samples, 0.31%)</title><rect x="73.0226%" y="213" width="0.3095%" height="15" fill="rgb(211,33,43)"/><text x="73.2726%" y="223.50"></text></g><g><title>__GI___libc_free (149 samples, 0.15%)</title><rect x="73.3665%" y="165" width="0.1468%" height="15" fill="rgb(245,58,50)"/><text x="73.6165%" y="175.50"></text></g><g><title>alloc::alloc::box_free (472 samples, 0.47%)</title><rect x="73.3320%" y="213" width="0.4652%" height="15" fill="rgb(244,68,36)"/><text x="73.5820%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (464 samples, 0.46%)</title><rect x="73.3399%" y="197" width="0.4573%" height="15" fill="rgb(232,229,15)"/><text x="73.5899%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (464 samples, 0.46%)</title><rect x="73.3399%" y="181" width="0.4573%" height="15" fill="rgb(254,30,23)"/><text x="73.5899%" y="191.50"></text></g><g><title>_int_free (288 samples, 0.28%)</title><rect x="73.5134%" y="165" width="0.2838%" height="15" fill="rgb(235,160,14)"/><text x="73.7634%" y="175.50"></text></g><g><title>__GI___libc_free (353 samples, 0.35%)</title><rect x="74.7117%" y="165" width="0.3479%" height="15" fill="rgb(212,155,44)"/><text x="74.9617%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,808 samples, 2.77%)</title><rect x="74.4151%" y="197" width="2.7673%" height="15" fill="rgb(226,2,50)"/><text x="74.6651%" y="207.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place (2,791 samples, 2.75%)</title><rect x="74.4319%" y="181" width="2.7506%" height="15" fill="rgb(234,177,6)"/><text x="74.6819%" y="191.50">co..</text></g><g><title>_int_free (2,154 samples, 2.12%)</title><rect x="75.0596%" y="165" width="2.1228%" height="15" fill="rgb(217,24,9)"/><text x="75.3096%" y="175.50">_..</text></g><g><title>unlink_chunk.constprop.0 (241 samples, 0.24%)</title><rect x="76.9449%" y="149" width="0.2375%" height="15" fill="rgb(220,13,46)"/><text x="77.1949%" y="159.50"></text></g><g><title>_int_free (567 samples, 0.56%)</title><rect x="77.2563%" y="197" width="0.5588%" height="15" fill="rgb(239,221,27)"/><text x="77.5063%" y="207.50"></text></g><g><title>__GI___libc_free (202 samples, 0.20%)</title><rect x="77.8851%" y="149" width="0.1991%" height="15" fill="rgb(222,198,25)"/><text x="78.1351%" y="159.50"></text></g><g><title>alloc::alloc::box_free (1,257 samples, 1.24%)</title><rect x="77.8151%" y="197" width="1.2388%" height="15" fill="rgb(211,99,13)"/><text x="78.0651%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (1,242 samples, 1.22%)</title><rect x="77.8299%" y="181" width="1.2240%" height="15" fill="rgb(232,111,31)"/><text x="78.0799%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (1,242 samples, 1.22%)</title><rect x="77.8299%" y="165" width="1.2240%" height="15" fill="rgb(245,82,37)"/><text x="78.0799%" y="175.50"></text></g><g><title>_int_free (984 samples, 0.97%)</title><rect x="78.0842%" y="149" width="0.9697%" height="15" fill="rgb(227,149,46)"/><text x="78.3342%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (102 samples, 0.10%)</title><rect x="79.0726%" y="165" width="0.1005%" height="15" fill="rgb(218,36,50)"/><text x="79.3226%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (102 samples, 0.10%)</title><rect x="79.0726%" y="149" width="0.1005%" height="15" fill="rgb(226,80,48)"/><text x="79.3226%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (127 samples, 0.13%)</title><rect x="79.0726%" y="181" width="0.1252%" height="15" fill="rgb(238,224,15)"/><text x="79.3226%" y="191.50"></text></g><g><title>__GI___libc_free (103 samples, 0.10%)</title><rect x="79.1978%" y="181" width="0.1015%" height="15" fill="rgb(241,136,10)"/><text x="79.4478%" y="191.50"></text></g><g><title>_int_free (168 samples, 0.17%)</title><rect x="79.2993%" y="181" width="0.1656%" height="15" fill="rgb(208,32,45)"/><text x="79.5493%" y="191.50"></text></g><g><title>core::ptr::drop_in_place (11,448 samples, 11.28%)</title><rect x="68.3246%" y="245" width="11.2822%" height="15" fill="rgb(207,135,9)"/><text x="68.5746%" y="255.50">core::ptr::drop_i..</text></g><g><title>core::ptr::drop_in_place (7,676 samples, 7.56%)</title><rect x="72.0420%" y="229" width="7.5648%" height="15" fill="rgb(206,86,44)"/><text x="72.2920%" y="239.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place (5,895 samples, 5.81%)</title><rect x="73.7972%" y="213" width="5.8096%" height="15" fill="rgb(245,177,15)"/><text x="74.0472%" y="223.50">core::p..</text></g><g><title>core::ptr::drop_in_place (561 samples, 0.55%)</title><rect x="79.0539%" y="197" width="0.5529%" height="15" fill="rgb(206,64,50)"/><text x="79.3039%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (144 samples, 0.14%)</title><rect x="79.4649%" y="181" width="0.1419%" height="15" fill="rgb(234,36,40)"/><text x="79.7149%" y="191.50"></text></g><g><title>core::slice::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (588 samples, 0.58%)</title><rect x="79.6462%" y="245" width="0.5795%" height="15" fill="rgb(213,64,8)"/><text x="79.8962%" y="255.50"></text></g><g><title>&lt;[A] as core::slice::SlicePartialEq&lt;A&gt;&gt;::equal (588 samples, 0.58%)</title><rect x="79.6462%" y="229" width="0.5795%" height="15" fill="rgb(210,75,36)"/><text x="79.8962%" y="239.50"></text></g><g><title>__memcmp_avx2_movbe (456 samples, 0.45%)</title><rect x="79.7763%" y="213" width="0.4494%" height="15" fill="rgb(229,88,21)"/><text x="80.0263%" y="223.50"></text></g><g><title>alloc::rc::RcBoxPtr::inc_strong (125 samples, 0.12%)</title><rect x="81.4990%" y="197" width="0.1232%" height="15" fill="rgb(252,204,47)"/><text x="81.7490%" y="207.50"></text></g><g><title>&lt;cs::env::Interpreter as core::clone::Clone&gt;::clone (139 samples, 0.14%)</title><rect x="81.4881%" y="229" width="0.1370%" height="15" fill="rgb(208,77,27)"/><text x="81.7381%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (128 samples, 0.13%)</title><rect x="81.4990%" y="213" width="0.1261%" height="15" fill="rgb(221,76,26)"/><text x="81.7490%" y="223.50"></text></g><g><title>_int_free (142 samples, 0.14%)</title><rect x="81.6714%" y="229" width="0.1399%" height="15" fill="rgb(225,139,18)"/><text x="81.9214%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (661 samples, 0.65%)</title><rect x="81.9602%" y="213" width="0.6514%" height="15" fill="rgb(230,137,11)"/><text x="82.2102%" y="223.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (1,510 samples, 1.49%)</title><rect x="81.8114%" y="229" width="1.4881%" height="15" fill="rgb(212,28,1)"/><text x="82.0614%" y="239.50"></text></g><g><title>alloc::alloc::exchange_malloc (698 samples, 0.69%)</title><rect x="82.6116%" y="213" width="0.6879%" height="15" fill="rgb(248,164,17)"/><text x="82.8616%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (698 samples, 0.69%)</title><rect x="82.6116%" y="197" width="0.6879%" height="15" fill="rgb(222,171,42)"/><text x="82.8616%" y="207.50"></text></g><g><title>alloc::alloc::alloc (683 samples, 0.67%)</title><rect x="82.6264%" y="181" width="0.6731%" height="15" fill="rgb(243,84,45)"/><text x="82.8764%" y="191.50"></text></g><g><title>__GI___libc_malloc (651 samples, 0.64%)</title><rect x="82.6579%" y="165" width="0.6416%" height="15" fill="rgb(252,49,23)"/><text x="82.9079%" y="175.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (112 samples, 0.11%)</title><rect x="83.6129%" y="213" width="0.1104%" height="15" fill="rgb(215,19,7)"/><text x="83.8629%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (112 samples, 0.11%)</title><rect x="83.6129%" y="197" width="0.1104%" height="15" fill="rgb(238,81,41)"/><text x="83.8629%" y="207.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned::{{closure}} (104 samples, 0.10%)</title><rect x="83.6208%" y="181" width="0.1025%" height="15" fill="rgb(210,199,37)"/><text x="83.8708%" y="191.50"></text></g><g><title>cs::lang::&lt;impl core::clone::Clone for alloc::boxed::Box&lt;dyn cs::lang::Function&gt;&gt;::clone (104 samples, 0.10%)</title><rect x="83.6208%" y="165" width="0.1025%" height="15" fill="rgb(244,192,49)"/><text x="83.8708%" y="175.50"></text></g><g><title>cs::env::Interpreter::evaluate_function_call (370 samples, 0.36%)</title><rect x="83.4907%" y="229" width="0.3646%" height="15" fill="rgb(226,211,11)"/><text x="83.7407%" y="239.50"></text></g><g><title>cs::env::Interpreter::evaluate (4,084 samples, 4.02%)</title><rect x="80.2395%" y="245" width="4.0248%" height="15" fill="rgb(236,162,54)"/><text x="80.4895%" y="255.50">cs::..</text></g><g><title>futures_util::future::try_future::TryFutureExt::unwrap_or_else (415 samples, 0.41%)</title><rect x="83.8553%" y="229" width="0.4090%" height="15" fill="rgb(220,229,9)"/><text x="84.1053%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (380 samples, 0.37%)</title><rect x="83.8898%" y="213" width="0.3745%" height="15" fill="rgb(250,87,22)"/><text x="84.1398%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (335 samples, 0.33%)</title><rect x="84.3629%" y="197" width="0.3301%" height="15" fill="rgb(239,43,17)"/><text x="84.6129%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (389 samples, 0.38%)</title><rect x="84.3294%" y="213" width="0.3834%" height="15" fill="rgb(231,177,25)"/><text x="84.5794%" y="223.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (399 samples, 0.39%)</title><rect x="84.3294%" y="229" width="0.3932%" height="15" fill="rgb(219,179,1)"/><text x="84.5794%" y="239.50"></text></g><g><title>cs::env::Interpreter::get_local_variable (479 samples, 0.47%)</title><rect x="84.2643%" y="245" width="0.4721%" height="15" fill="rgb(238,219,53)"/><text x="84.5143%" y="255.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (175 samples, 0.17%)</title><rect x="84.7866%" y="213" width="0.1725%" height="15" fill="rgb(232,167,36)"/><text x="85.0366%" y="223.50"></text></g><g><title>alloc::alloc::exchange_malloc (162 samples, 0.16%)</title><rect x="84.7994%" y="197" width="0.1597%" height="15" fill="rgb(244,19,51)"/><text x="85.0494%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (162 samples, 0.16%)</title><rect x="84.7994%" y="181" width="0.1597%" height="15" fill="rgb(224,6,22)"/><text x="85.0494%" y="191.50"></text></g><g><title>alloc::alloc::alloc (158 samples, 0.16%)</title><rect x="84.8034%" y="165" width="0.1557%" height="15" fill="rgb(224,145,5)"/><text x="85.0534%" y="175.50"></text></g><g><title>__GI___libc_malloc (136 samples, 0.13%)</title><rect x="84.8251%" y="149" width="0.1340%" height="15" fill="rgb(234,130,49)"/><text x="85.0751%" y="159.50"></text></g><g><title>cs::env::Interpreter::new_stack_frame (264 samples, 0.26%)</title><rect x="84.7364%" y="245" width="0.2602%" height="15" fill="rgb(254,6,2)"/><text x="84.9864%" y="255.50"></text></g><g><title>cs::env::Interpreter::with_env_and_new_locals (213 samples, 0.21%)</title><rect x="84.7866%" y="229" width="0.2099%" height="15" fill="rgb(208,96,46)"/><text x="85.0366%" y="239.50"></text></g><g><title>cs::env::Interpreter::set_local_variable (258 samples, 0.25%)</title><rect x="84.9966%" y="245" width="0.2543%" height="15" fill="rgb(239,3,39)"/><text x="85.2466%" y="255.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (165 samples, 0.16%)</title><rect x="85.0882%" y="229" width="0.1626%" height="15" fill="rgb(233,210,1)"/><text x="85.3382%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (134 samples, 0.13%)</title><rect x="85.1188%" y="213" width="0.1321%" height="15" fill="rgb(244,137,37)"/><text x="85.3688%" y="223.50"></text></g><g><title>cs::external_func::contains_futures (379 samples, 0.37%)</title><rect x="85.2508%" y="245" width="0.3735%" height="15" fill="rgb(240,136,2)"/><text x="85.5008%" y="255.50"></text></g><g><title>cs::lang::CodeNode::id (224 samples, 0.22%)</title><rect x="85.6243%" y="245" width="0.2208%" height="15" fill="rgb(239,18,37)"/><text x="85.8743%" y="255.50"></text></g><g><title>futures_task::waker::wake_arc_raw (217 samples, 0.21%)</title><rect x="85.9338%" y="245" width="0.2139%" height="15" fill="rgb(218,185,22)"/><text x="86.1838%" y="255.50"></text></g><g><title>futures_task::arc_wake::ArcWake::wake (210 samples, 0.21%)</title><rect x="85.9407%" y="229" width="0.2070%" height="15" fill="rgb(225,218,4)"/><text x="86.1907%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (153 samples, 0.15%)</title><rect x="85.9968%" y="213" width="0.1508%" height="15" fill="rgb(230,182,32)"/><text x="86.2468%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (153 samples, 0.15%)</title><rect x="85.9968%" y="197" width="0.1508%" height="15" fill="rgb(242,56,43)"/><text x="86.2468%" y="207.50"></text></g><g><title>futures_util::compat::compat03as01::Current::as_waker::clone (138 samples, 0.14%)</title><rect x="86.1565%" y="245" width="0.1360%" height="15" fill="rgb(233,99,24)"/><text x="86.4065%" y="255.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (123 samples, 0.12%)</title><rect x="86.3802%" y="229" width="0.1212%" height="15" fill="rgb(234,209,42)"/><text x="86.6302%" y="239.50"></text></g><g><title>futures_util::future::future::shared::Inner&lt;Fut&gt;::record_waker (234 samples, 0.23%)</title><rect x="86.2925%" y="245" width="0.2306%" height="15" fill="rgb(227,7,12)"/><text x="86.5425%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (333 samples, 0.33%)</title><rect x="86.5615%" y="229" width="0.3282%" height="15" fill="rgb(245,203,43)"/><text x="86.8115%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (187 samples, 0.18%)</title><rect x="86.9410%" y="213" width="0.1843%" height="15" fill="rgb(238,205,33)"/><text x="87.1910%" y="223.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (187 samples, 0.18%)</title><rect x="86.9410%" y="197" width="0.1843%" height="15" fill="rgb(231,56,7)"/><text x="87.1910%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (115 samples, 0.11%)</title><rect x="87.0119%" y="181" width="0.1133%" height="15" fill="rgb(244,186,29)"/><text x="87.2619%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_sub (115 samples, 0.11%)</title><rect x="87.0119%" y="165" width="0.1133%" height="15" fill="rgb(234,111,31)"/><text x="87.2619%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::try_unwrap (329 samples, 0.32%)</title><rect x="86.8897%" y="229" width="0.3242%" height="15" fill="rgb(241,149,10)"/><text x="87.1397%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (197 samples, 0.19%)</title><rect x="87.2140%" y="213" width="0.1941%" height="15" fill="rgb(249,206,44)"/><text x="87.4640%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (129 samples, 0.13%)</title><rect x="87.2810%" y="197" width="0.1271%" height="15" fill="rgb(251,153,30)"/><text x="87.5310%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_sub (129 samples, 0.13%)</title><rect x="87.2810%" y="181" width="0.1271%" height="15" fill="rgb(239,152,38)"/><text x="87.5310%" y="191.50"></text></g><g><title>futures_util::future::future::shared::Inner&lt;Fut&gt;::take_or_clone_output (904 samples, 0.89%)</title><rect x="86.5231%" y="245" width="0.8909%" height="15" fill="rgb(249,139,47)"/><text x="86.7731%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (203 samples, 0.20%)</title><rect x="87.2140%" y="229" width="0.2001%" height="15" fill="rgb(244,64,35)"/><text x="87.4640%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (138 samples, 0.14%)</title><rect x="87.5717%" y="229" width="0.1360%" height="15" fill="rgb(216,46,15)"/><text x="87.8217%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (188 samples, 0.19%)</title><rect x="87.7077%" y="229" width="0.1853%" height="15" fill="rgb(250,74,19)"/><text x="87.9577%" y="239.50"></text></g><g><title>alloc::alloc::exchange_malloc (143 samples, 0.14%)</title><rect x="87.7520%" y="213" width="0.1409%" height="15" fill="rgb(249,42,33)"/><text x="88.0020%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (143 samples, 0.14%)</title><rect x="87.7520%" y="197" width="0.1409%" height="15" fill="rgb(242,149,17)"/><text x="88.0020%" y="207.50"></text></g><g><title>alloc::alloc::alloc (139 samples, 0.14%)</title><rect x="87.7560%" y="181" width="0.1370%" height="15" fill="rgb(244,29,21)"/><text x="88.0060%" y="191.50"></text></g><g><title>__GI___libc_malloc (132 samples, 0.13%)</title><rect x="87.7629%" y="165" width="0.1301%" height="15" fill="rgb(220,130,37)"/><text x="88.0129%" y="175.50"></text></g><g><title>futures_util::future::future::shared::Shared&lt;Fut&gt;::new (498 samples, 0.49%)</title><rect x="87.4140%" y="245" width="0.4908%" height="15" fill="rgb(211,67,2)"/><text x="87.6640%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (124 samples, 0.12%)</title><rect x="87.9403%" y="197" width="0.1222%" height="15" fill="rgb(235,68,52)"/><text x="88.1903%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (124 samples, 0.12%)</title><rect x="87.9403%" y="181" width="0.1222%" height="15" fill="rgb(246,142,3)"/><text x="88.1903%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (124 samples, 0.12%)</title><rect x="87.9403%" y="165" width="0.1222%" height="15" fill="rgb(241,25,7)"/><text x="88.1903%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (158 samples, 0.16%)</title><rect x="87.9363%" y="213" width="0.1557%" height="15" fill="rgb(242,119,39)"/><text x="88.1863%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (128 samples, 0.13%)</title><rect x="88.2576%" y="165" width="0.1261%" height="15" fill="rgb(241,98,45)"/><text x="88.5076%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (145 samples, 0.14%)</title><rect x="88.2576%" y="197" width="0.1429%" height="15" fill="rgb(254,28,30)"/><text x="88.5076%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (145 samples, 0.14%)</title><rect x="88.2576%" y="181" width="0.1429%" height="15" fill="rgb(241,142,54)"/><text x="88.5076%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (527 samples, 0.52%)</title><rect x="87.9048%" y="245" width="0.5194%" height="15" fill="rgb(222,85,15)"/><text x="88.1548%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (495 samples, 0.49%)</title><rect x="87.9363%" y="229" width="0.4878%" height="15" fill="rgb(210,85,47)"/><text x="88.1863%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (337 samples, 0.33%)</title><rect x="88.0920%" y="213" width="0.3321%" height="15" fill="rgb(224,206,25)"/><text x="88.3420%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (136 samples, 0.13%)</title><rect x="89.1692%" y="229" width="0.1340%" height="15" fill="rgb(243,201,19)"/><text x="89.4192%" y="239.50"></text></g><g><title>core::mem::replace (254 samples, 0.25%)</title><rect x="89.3032%" y="229" width="0.2503%" height="15" fill="rgb(236,59,4)"/><text x="89.5532%" y="239.50"></text></g><g><title>core::mem::swap (226 samples, 0.22%)</title><rect x="89.3308%" y="213" width="0.2227%" height="15" fill="rgb(254,179,45)"/><text x="89.5808%" y="223.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (226 samples, 0.22%)</title><rect x="89.3308%" y="197" width="0.2227%" height="15" fill="rgb(226,14,10)"/><text x="89.5808%" y="207.50"></text></g><g><title>core::ptr::swap_nonoverlapping (226 samples, 0.22%)</title><rect x="89.3308%" y="181" width="0.2227%" height="15" fill="rgb(244,27,41)"/><text x="89.5808%" y="191.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (226 samples, 0.22%)</title><rect x="89.3308%" y="165" width="0.2227%" height="15" fill="rgb(235,35,32)"/><text x="89.5808%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (226 samples, 0.22%)</title><rect x="89.3308%" y="149" width="0.2227%" height="15" fill="rgb(218,68,31)"/><text x="89.5808%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (121 samples, 0.12%)</title><rect x="89.7733%" y="149" width="0.1192%" height="15" fill="rgb(207,120,37)"/><text x="90.0233%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (252 samples, 0.25%)</title><rect x="89.7142%" y="165" width="0.2483%" height="15" fill="rgb(227,98,0)"/><text x="89.9642%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (342 samples, 0.34%)</title><rect x="90.0670%" y="149" width="0.3370%" height="15" fill="rgb(207,7,3)"/><text x="90.3170%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (957 samples, 0.94%)</title><rect x="89.5881%" y="181" width="0.9431%" height="15" fill="rgb(206,98,19)"/><text x="89.8381%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (577 samples, 0.57%)</title><rect x="89.9626%" y="165" width="0.5686%" height="15" fill="rgb(217,5,26)"/><text x="90.2126%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (129 samples, 0.13%)</title><rect x="90.4041%" y="149" width="0.1271%" height="15" fill="rgb(235,190,38)"/><text x="90.6541%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (959 samples, 0.95%)</title><rect x="89.5881%" y="213" width="0.9451%" height="15" fill="rgb(247,86,24)"/><text x="89.8381%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (959 samples, 0.95%)</title><rect x="89.5881%" y="197" width="0.9451%" height="15" fill="rgb(205,101,16)"/><text x="89.8381%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (222 samples, 0.22%)</title><rect x="90.5332%" y="213" width="0.2188%" height="15" fill="rgb(246,168,33)"/><text x="90.7832%" y="223.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (109 samples, 0.11%)</title><rect x="90.6445%" y="197" width="0.1074%" height="15" fill="rgb(231,114,1)"/><text x="90.8945%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (109 samples, 0.11%)</title><rect x="90.6445%" y="181" width="0.1074%" height="15" fill="rgb(207,184,53)"/><text x="90.8945%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (1,292 samples, 1.27%)</title><rect x="89.5831%" y="229" width="1.2733%" height="15" fill="rgb(224,95,51)"/><text x="89.8331%" y="239.50"></text></g><g><title>&lt;uuid::Uuid as core::hash::Hash&gt;::hash (106 samples, 0.10%)</title><rect x="90.7519%" y="213" width="0.1045%" height="15" fill="rgb(212,188,45)"/><text x="91.0019%" y="223.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: _]&gt;::hash (106 samples, 0.10%)</title><rect x="90.7519%" y="197" width="0.1045%" height="15" fill="rgb(223,154,38)"/><text x="91.0019%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (105 samples, 0.10%)</title><rect x="91.3502%" y="197" width="0.1035%" height="15" fill="rgb(251,22,52)"/><text x="91.6002%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (105 samples, 0.10%)</title><rect x="91.3502%" y="181" width="0.1035%" height="15" fill="rgb(229,209,22)"/><text x="91.6002%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (129 samples, 0.13%)</title><rect x="91.3275%" y="213" width="0.1271%" height="15" fill="rgb(234,138,34)"/><text x="91.5775%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert::{{closure}} (183 samples, 0.18%)</title><rect x="91.5108%" y="213" width="0.1803%" height="15" fill="rgb(212,95,11)"/><text x="91.7608%" y="223.50"></text></g><g><title>&lt;uuid::Uuid as core::cmp::PartialEq&gt;::eq (183 samples, 0.18%)</title><rect x="91.5108%" y="197" width="0.1803%" height="15" fill="rgb(240,179,47)"/><text x="91.7608%" y="207.50"></text></g><g><title>core::array::&lt;impl core::cmp::PartialEq&lt;[B: _]&gt; for [A: _]&gt;::eq (183 samples, 0.18%)</title><rect x="91.5108%" y="181" width="0.1803%" height="15" fill="rgb(240,163,11)"/><text x="91.7608%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (422 samples, 0.42%)</title><rect x="91.7887%" y="181" width="0.4159%" height="15" fill="rgb(236,37,12)"/><text x="92.0387%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (525 samples, 0.52%)</title><rect x="91.7887%" y="213" width="0.5174%" height="15" fill="rgb(232,164,16)"/><text x="92.0387%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (525 samples, 0.52%)</title><rect x="91.7887%" y="197" width="0.5174%" height="15" fill="rgb(244,205,15)"/><text x="92.0387%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (103 samples, 0.10%)</title><rect x="92.2046%" y="181" width="0.1015%" height="15" fill="rgb(223,117,47)"/><text x="92.4546%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (155 samples, 0.15%)</title><rect x="92.3061%" y="197" width="0.1528%" height="15" fill="rgb(244,107,35)"/><text x="92.5561%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (213 samples, 0.21%)</title><rect x="92.3061%" y="213" width="0.2099%" height="15" fill="rgb(205,140,8)"/><text x="92.5561%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (4,203 samples, 4.14%)</title><rect x="88.4242%" y="245" width="4.1421%" height="15" fill="rgb(228,84,46)"/><text x="88.6742%" y="255.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (1,735 samples, 1.71%)</title><rect x="90.8564%" y="229" width="1.7099%" height="15" fill="rgb(254,188,9)"/><text x="91.1064%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove_entry (196 samples, 0.19%)</title><rect x="92.5663%" y="245" width="0.1932%" height="15" fill="rgb(206,112,54)"/><text x="92.8163%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::probe_seq (113 samples, 0.11%)</title><rect x="93.2069%" y="213" width="0.1114%" height="15" fill="rgb(216,84,49)"/><text x="93.4569%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (260 samples, 0.26%)</title><rect x="93.3626%" y="213" width="0.2562%" height="15" fill="rgb(214,194,35)"/><text x="93.6126%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (260 samples, 0.26%)</title><rect x="93.3626%" y="197" width="0.2562%" height="15" fill="rgb(249,28,3)"/><text x="93.6126%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (260 samples, 0.26%)</title><rect x="93.3626%" y="181" width="0.2562%" height="15" fill="rgb(222,56,52)"/><text x="93.6126%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (939 samples, 0.93%)</title><rect x="92.8215%" y="229" width="0.9254%" height="15" fill="rgb(245,217,50)"/><text x="93.0715%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (130 samples, 0.13%)</title><rect x="93.6188%" y="213" width="0.1281%" height="15" fill="rgb(213,201,24)"/><text x="93.8688%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (130 samples, 0.13%)</title><rect x="93.6188%" y="197" width="0.1281%" height="15" fill="rgb(248,116,28)"/><text x="93.8688%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (1,055 samples, 1.04%)</title><rect x="92.7594%" y="245" width="1.0397%" height="15" fill="rgb(219,72,43)"/><text x="93.0094%" y="255.50"></text></g><g><title>alloc::alloc::alloc (211 samples, 0.21%)</title><rect x="93.9696%" y="229" width="0.2079%" height="15" fill="rgb(209,138,14)"/><text x="94.2196%" y="239.50"></text></g><g><title>__GI___libc_malloc (180 samples, 0.18%)</title><rect x="94.0002%" y="213" width="0.1774%" height="15" fill="rgb(222,18,33)"/><text x="94.2502%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::new_uninitialized (470 samples, 0.46%)</title><rect x="93.7992%" y="245" width="0.4632%" height="15" fill="rgb(213,199,7)"/><text x="94.0492%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (130 samples, 0.13%)</title><rect x="94.2623%" y="245" width="0.1281%" height="15" fill="rgb(250,110,10)"/><text x="94.5123%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (383 samples, 0.38%)</title><rect x="94.5905%" y="229" width="0.3775%" height="15" fill="rgb(248,123,6)"/><text x="94.8405%" y="239.50"></text></g><g><title>core::mem::swap (196 samples, 0.19%)</title><rect x="95.0094%" y="229" width="0.1932%" height="15" fill="rgb(206,91,31)"/><text x="95.2594%" y="239.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (196 samples, 0.19%)</title><rect x="95.0094%" y="213" width="0.1932%" height="15" fill="rgb(211,154,13)"/><text x="95.2594%" y="223.50"></text></g><g><title>core::ptr::swap_nonoverlapping (196 samples, 0.19%)</title><rect x="95.0094%" y="197" width="0.1932%" height="15" fill="rgb(225,148,7)"/><text x="95.2594%" y="207.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (196 samples, 0.19%)</title><rect x="95.0094%" y="181" width="0.1932%" height="15" fill="rgb(220,160,43)"/><text x="95.2594%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (196 samples, 0.19%)</title><rect x="95.0094%" y="165" width="0.1932%" height="15" fill="rgb(213,52,39)"/><text x="95.2594%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (145 samples, 0.14%)</title><rect x="95.2025%" y="165" width="0.1429%" height="15" fill="rgb(243,137,7)"/><text x="95.4525%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::free_buckets (179 samples, 0.18%)</title><rect x="95.2025%" y="181" width="0.1764%" height="15" fill="rgb(230,79,13)"/><text x="95.4525%" y="191.50"></text></g><g><title>core::ptr::drop_in_place (185 samples, 0.18%)</title><rect x="95.2025%" y="229" width="0.1823%" height="15" fill="rgb(247,105,23)"/><text x="95.4525%" y="239.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (185 samples, 0.18%)</title><rect x="95.2025%" y="213" width="0.1823%" height="15" fill="rgb(223,179,41)"/><text x="95.4525%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize::{{closure}} (185 samples, 0.18%)</title><rect x="95.2025%" y="197" width="0.1823%" height="15" fill="rgb(218,9,34)"/><text x="95.4525%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (184 samples, 0.18%)</title><rect x="95.3957%" y="197" width="0.1813%" height="15" fill="rgb(222,106,8)"/><text x="95.6457%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (184 samples, 0.18%)</title><rect x="95.3957%" y="181" width="0.1813%" height="15" fill="rgb(211,220,0)"/><text x="95.6457%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (184 samples, 0.18%)</title><rect x="95.3957%" y="165" width="0.1813%" height="15" fill="rgb(229,52,16)"/><text x="95.6457%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (117 samples, 0.12%)</title><rect x="95.4617%" y="149" width="0.1153%" height="15" fill="rgb(212,155,18)"/><text x="95.7117%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert::{{closure}} (241 samples, 0.24%)</title><rect x="95.3848%" y="229" width="0.2375%" height="15" fill="rgb(242,21,14)"/><text x="95.6348%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (230 samples, 0.23%)</title><rect x="95.3957%" y="213" width="0.2267%" height="15" fill="rgb(222,19,48)"/><text x="95.6457%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::copy_from_nonoverlapping (170 samples, 0.17%)</title><rect x="95.6224%" y="229" width="0.1675%" height="15" fill="rgb(232,45,27)"/><text x="95.8724%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (170 samples, 0.17%)</title><rect x="95.6224%" y="213" width="0.1675%" height="15" fill="rgb(249,103,42)"/><text x="95.8724%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (170 samples, 0.17%)</title><rect x="95.6224%" y="197" width="0.1675%" height="15" fill="rgb(246,81,33)"/><text x="95.8724%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (159 samples, 0.16%)</title><rect x="95.6332%" y="181" width="0.1567%" height="15" fill="rgb(252,33,42)"/><text x="95.8832%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (329 samples, 0.32%)</title><rect x="95.7899%" y="229" width="0.3242%" height="15" fill="rgb(209,212,41)"/><text x="96.0399%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize (1,875 samples, 1.85%)</title><rect x="94.3905%" y="245" width="1.8478%" height="15" fill="rgb(207,154,6)"/><text x="94.6405%" y="255.50">h..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (342 samples, 0.34%)</title><rect x="96.5330%" y="229" width="0.3370%" height="15" fill="rgb(223,64,47)"/><text x="96.7830%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::try_with_capacity (718 samples, 0.71%)</title><rect x="96.2383%" y="245" width="0.7076%" height="15" fill="rgb(211,161,38)"/><text x="96.4883%" y="255.50"></text></g><g><title>mio::poll::SetReadiness::set_readiness (104 samples, 0.10%)</title><rect x="97.1371%" y="245" width="0.1025%" height="15" fill="rgb(219,138,40)"/><text x="97.3871%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (127 samples, 0.13%)</title><rect x="97.6239%" y="117" width="0.1252%" height="15" fill="rgb(241,228,46)"/><text x="97.8739%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (406 samples, 0.40%)</title><rect x="97.4032%" y="149" width="0.4001%" height="15" fill="rgb(223,209,38)"/><text x="97.6532%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (251 samples, 0.25%)</title><rect x="97.5559%" y="133" width="0.2474%" height="15" fill="rgb(236,164,45)"/><text x="97.8059%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (408 samples, 0.40%)</title><rect x="97.4032%" y="181" width="0.4021%" height="15" fill="rgb(231,15,5)"/><text x="97.6532%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (408 samples, 0.40%)</title><rect x="97.4032%" y="165" width="0.4021%" height="15" fill="rgb(252,35,15)"/><text x="97.6532%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (105 samples, 0.10%)</title><rect x="97.8053%" y="181" width="0.1035%" height="15" fill="rgb(248,181,18)"/><text x="98.0553%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (560 samples, 0.55%)</title><rect x="97.3943%" y="197" width="0.5519%" height="15" fill="rgb(233,39,42)"/><text x="97.6443%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (145 samples, 0.14%)</title><rect x="98.4439%" y="149" width="0.1429%" height="15" fill="rgb(238,110,33)"/><text x="98.6939%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (182 samples, 0.18%)</title><rect x="98.4439%" y="181" width="0.1794%" height="15" fill="rgb(233,195,10)"/><text x="98.6939%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (182 samples, 0.18%)</title><rect x="98.4439%" y="165" width="0.1794%" height="15" fill="rgb(254,105,3)"/><text x="98.6939%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (799 samples, 0.79%)</title><rect x="97.9462%" y="197" width="0.7874%" height="15" fill="rgb(221,225,9)"/><text x="98.1962%" y="207.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,435 samples, 1.41%)</title><rect x="97.3204%" y="245" width="1.4142%" height="15" fill="rgb(224,227,45)"/><text x="97.5704%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (1,362 samples, 1.34%)</title><rect x="97.3923%" y="229" width="1.3423%" height="15" fill="rgb(229,198,43)"/><text x="97.6423%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (1,362 samples, 1.34%)</title><rect x="97.3923%" y="213" width="1.3423%" height="15" fill="rgb(206,209,35)"/><text x="97.6423%" y="223.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (430 samples, 0.42%)</title><rect x="98.8883%" y="245" width="0.4238%" height="15" fill="rgb(245,195,53)"/><text x="99.1383%" y="255.50"></text></g><g><title>std::sys_common::mutex::Mutex::raw_lock (375 samples, 0.37%)</title><rect x="98.9425%" y="229" width="0.3696%" height="15" fill="rgb(240,92,26)"/><text x="99.1925%" y="239.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (375 samples, 0.37%)</title><rect x="98.9425%" y="213" width="0.3696%" height="15" fill="rgb(207,40,23)"/><text x="99.1925%" y="223.50"></text></g><g><title>__GI___pthread_mutex_lock (355 samples, 0.35%)</title><rect x="98.9623%" y="197" width="0.3499%" height="15" fill="rgb(223,111,35)"/><text x="99.2123%" y="207.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::new (406 samples, 0.40%)</title><rect x="99.3121%" y="245" width="0.4001%" height="15" fill="rgb(229,147,28)"/><text x="99.5621%" y="255.50"></text></g><g><title>std::sys_common::mutex::Mutex::init (141 samples, 0.14%)</title><rect x="99.5733%" y="229" width="0.1390%" height="15" fill="rgb(211,29,28)"/><text x="99.8233%" y="239.50"></text></g><g><title>std::sys::unix::mutex::Mutex::init (141 samples, 0.14%)</title><rect x="99.5733%" y="213" width="0.1390%" height="15" fill="rgb(228,72,33)"/><text x="99.8233%" y="223.50"></text></g><g><title>all (101,470 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(205,214,31)"/><text x="0.2500%" y="287.50"></text></g><g><title>for_profiling (101,470 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(224,111,15)"/><text x="0.2500%" y="271.50">for_profiling</text></g><g><title>tokio_reactor::HandlePriv::wakeup (183 samples, 0.18%)</title><rect x="99.8197%" y="245" width="0.1803%" height="15" fill="rgb(253,21,26)"/><text x="100.0697%" y="255.50"></text></g><g><title>tokio_reactor::HandlePriv::inner (116 samples, 0.11%)</title><rect x="99.8857%" y="229" width="0.1143%" height="15" fill="rgb(245,139,43)"/><text x="100.1357%" y="239.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::upgrade (116 samples, 0.11%)</title><rect x="99.8857%" y="213" width="0.1143%" height="15" fill="rgb(252,170,7)"/><text x="100.1357%" y="223.50"></text></g></svg></svg>