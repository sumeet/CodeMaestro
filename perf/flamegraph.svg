<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (2,856 samples, 2.11%)</title><rect x="0.0347%" y="245" width="2.1070%" height="15" fill="rgb(227,0,7)"/><text x="0.2847%" y="255.50">&lt;..</text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (464 samples, 0.34%)</title><rect x="2.1512%" y="245" width="0.3423%" height="15" fill="rgb(217,0,24)"/><text x="2.4012%" y="255.50"></text></g><g><title>&lt;cs::code_function::CodeFunction as core::clone::Clone&gt;::clone (188 samples, 0.14%)</title><rect x="2.6536%" y="229" width="0.1387%" height="15" fill="rgb(221,193,54)"/><text x="2.9036%" y="239.50"></text></g><g><title>&lt;T as objekt::Clone&gt;::clone_box (486 samples, 0.36%)</title><rect x="2.4950%" y="245" width="0.3585%" height="15" fill="rgb(248,212,6)"/><text x="2.7450%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (271 samples, 0.20%)</title><rect x="3.1405%" y="181" width="0.1999%" height="15" fill="rgb(208,68,35)"/><text x="3.3905%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (271 samples, 0.20%)</title><rect x="3.1405%" y="165" width="0.1999%" height="15" fill="rgb(232,128,0)"/><text x="3.3905%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (248 samples, 0.18%)</title><rect x="3.1575%" y="149" width="0.1830%" height="15" fill="rgb(207,160,47)"/><text x="3.4075%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (248 samples, 0.18%)</title><rect x="3.1575%" y="133" width="0.1830%" height="15" fill="rgb(228,23,34)"/><text x="3.4075%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (194 samples, 0.14%)</title><rect x="3.1973%" y="117" width="0.1431%" height="15" fill="rgb(218,30,26)"/><text x="3.4473%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1,829 samples, 1.35%)</title><rect x="3.3405%" y="117" width="1.3493%" height="15" fill="rgb(220,122,19)"/><text x="3.5905%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1,827 samples, 1.35%)</title><rect x="3.3419%" y="101" width="1.3478%" height="15" fill="rgb(250,228,42)"/><text x="3.5919%" y="111.50"></text></g><g><title>__GI___libc_malloc (1,793 samples, 1.32%)</title><rect x="3.3670%" y="85" width="1.3228%" height="15" fill="rgb(240,193,28)"/><text x="3.6170%" y="95.50"></text></g><g><title>_int_malloc (1,112 samples, 0.82%)</title><rect x="3.8694%" y="69" width="0.8204%" height="15" fill="rgb(216,20,37)"/><text x="4.1194%" y="79.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,381 samples, 1.76%)</title><rect x="2.9443%" y="245" width="1.7565%" height="15" fill="rgb(206,188,39)"/><text x="3.1943%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2,176 samples, 1.61%)</title><rect x="3.0955%" y="229" width="1.6053%" height="15" fill="rgb(217,207,13)"/><text x="3.3455%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2,122 samples, 1.57%)</title><rect x="3.1354%" y="213" width="1.5655%" height="15" fill="rgb(231,73,38)"/><text x="3.3854%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (2,115 samples, 1.56%)</title><rect x="3.1405%" y="197" width="1.5603%" height="15" fill="rgb(225,20,46)"/><text x="3.3905%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,844 samples, 1.36%)</title><rect x="3.3405%" y="181" width="1.3604%" height="15" fill="rgb(210,31,41)"/><text x="3.5905%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1,844 samples, 1.36%)</title><rect x="3.3405%" y="165" width="1.3604%" height="15" fill="rgb(221,200,47)"/><text x="3.5905%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,844 samples, 1.36%)</title><rect x="3.3405%" y="149" width="1.3604%" height="15" fill="rgb(226,26,5)"/><text x="3.5905%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,844 samples, 1.36%)</title><rect x="3.3405%" y="133" width="1.3604%" height="15" fill="rgb(249,33,26)"/><text x="3.5905%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (141 samples, 0.10%)</title><rect x="4.9679%" y="213" width="0.1040%" height="15" fill="rgb(235,183,28)"/><text x="5.2179%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (4,168 samples, 3.07%)</title><rect x="5.3198%" y="101" width="3.0749%" height="15" fill="rgb(221,5,38)"/><text x="5.5698%" y="111.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (4,168 samples, 3.07%)</title><rect x="5.3198%" y="85" width="3.0749%" height="15" fill="rgb(247,18,42)"/><text x="5.5698%" y="95.50">&lt;al..</text></g><g><title>core::ptr::write (4,090 samples, 3.02%)</title><rect x="5.3774%" y="69" width="3.0173%" height="15" fill="rgb(241,131,45)"/><text x="5.6274%" y="79.50">cor..</text></g><g><title>__memmove_avx_unaligned_erms (3,974 samples, 2.93%)</title><rect x="5.4629%" y="53" width="2.9318%" height="15" fill="rgb(249,31,29)"/><text x="5.7129%" y="63.50">__..</text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::{{closure}} (4,288 samples, 3.16%)</title><rect x="5.3028%" y="133" width="3.1634%" height="15" fill="rgb(225,111,53)"/><text x="5.5528%" y="143.50">cor..</text></g><g><title>core::iter::adapters::map_fold::{{closure}} (4,288 samples, 3.16%)</title><rect x="5.3028%" y="117" width="3.1634%" height="15" fill="rgb(238,160,17)"/><text x="5.5528%" y="127.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4,549 samples, 3.36%)</title><rect x="5.1450%" y="213" width="3.3560%" height="15" fill="rgb(214,148,48)"/><text x="5.3950%" y="223.50">cor..</text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,549 samples, 3.36%)</title><rect x="5.1450%" y="197" width="3.3560%" height="15" fill="rgb(232,36,49)"/><text x="5.3950%" y="207.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,549 samples, 3.36%)</title><rect x="5.1450%" y="181" width="3.3560%" height="15" fill="rgb(209,103,24)"/><text x="5.3950%" y="191.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (4,549 samples, 3.36%)</title><rect x="5.1450%" y="165" width="3.3560%" height="15" fill="rgb(229,88,8)"/><text x="5.3950%" y="175.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4,410 samples, 3.25%)</title><rect x="5.2475%" y="149" width="3.2534%" height="15" fill="rgb(213,181,19)"/><text x="5.4975%" y="159.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (5,190 samples, 3.83%)</title><rect x="4.7274%" y="245" width="3.8288%" height="15" fill="rgb(254,191,54)"/><text x="4.9774%" y="255.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4,864 samples, 3.59%)</title><rect x="4.9679%" y="229" width="3.5883%" height="15" fill="rgb(241,83,37)"/><text x="5.2179%" y="239.50">&lt;all..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (578 samples, 0.43%)</title><rect x="8.7731%" y="85" width="0.4264%" height="15" fill="rgb(233,36,39)"/><text x="9.0231%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (578 samples, 0.43%)</title><rect x="8.7731%" y="69" width="0.4264%" height="15" fill="rgb(226,3,54)"/><text x="9.0231%" y="79.50"></text></g><g><title>core::ptr::write (572 samples, 0.42%)</title><rect x="8.7776%" y="53" width="0.4220%" height="15" fill="rgb(245,192,40)"/><text x="9.0276%" y="63.50"></text></g><g><title>__memmove_avx_unaligned_erms (545 samples, 0.40%)</title><rect x="8.7975%" y="37" width="0.4021%" height="15" fill="rgb(238,167,29)"/><text x="9.0475%" y="47.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (1,434 samples, 1.06%)</title><rect x="8.7731%" y="101" width="1.0579%" height="15" fill="rgb(232,182,51)"/><text x="9.0231%" y="111.50"></text></g><g><title>cs::env::Interpreter::evaluate_function_call::{{closure}} (856 samples, 0.63%)</title><rect x="9.1996%" y="85" width="0.6315%" height="15" fill="rgb(231,60,39)"/><text x="9.4496%" y="95.50"></text></g><g><title>__memmove_avx_unaligned_erms (768 samples, 0.57%)</title><rect x="9.2645%" y="69" width="0.5666%" height="15" fill="rgb(208,69,12)"/><text x="9.5145%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::{{closure}} (1,448 samples, 1.07%)</title><rect x="8.7731%" y="133" width="1.0682%" height="15" fill="rgb(235,93,37)"/><text x="9.0231%" y="143.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (1,448 samples, 1.07%)</title><rect x="8.7731%" y="117" width="1.0682%" height="15" fill="rgb(213,116,39)"/><text x="9.0231%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,479 samples, 1.09%)</title><rect x="8.7525%" y="213" width="1.0911%" height="15" fill="rgb(222,207,29)"/><text x="9.0025%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,479 samples, 1.09%)</title><rect x="8.7525%" y="197" width="1.0911%" height="15" fill="rgb(206,96,30)"/><text x="9.0025%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,479 samples, 1.09%)</title><rect x="8.7525%" y="181" width="1.0911%" height="15" fill="rgb(218,138,4)"/><text x="9.0025%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,477 samples, 1.09%)</title><rect x="8.7540%" y="165" width="1.0896%" height="15" fill="rgb(250,191,14)"/><text x="9.0040%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,463 samples, 1.08%)</title><rect x="8.7643%" y="149" width="1.0793%" height="15" fill="rgb(239,60,40)"/><text x="9.0143%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,575 samples, 1.16%)</title><rect x="8.6831%" y="229" width="1.1619%" height="15" fill="rgb(206,27,48)"/><text x="8.9331%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1,669 samples, 1.23%)</title><rect x="8.6175%" y="245" width="1.2313%" height="15" fill="rgb(225,35,8)"/><text x="8.8675%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (213 samples, 0.16%)</title><rect x="9.9904%" y="229" width="0.1571%" height="15" fill="rgb(250,213,24)"/><text x="10.2404%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (185 samples, 0.14%)</title><rect x="10.3158%" y="197" width="0.1365%" height="15" fill="rgb(247,123,22)"/><text x="10.5658%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (3,272 samples, 2.41%)</title><rect x="10.5164%" y="133" width="2.4139%" height="15" fill="rgb(231,138,38)"/><text x="10.7664%" y="143.50">&lt;a..</text></g><g><title>alloc::alloc::alloc (3,203 samples, 2.36%)</title><rect x="10.5673%" y="117" width="2.3630%" height="15" fill="rgb(231,145,46)"/><text x="10.8173%" y="127.50">al..</text></g><g><title>__GI___libc_malloc (3,099 samples, 2.29%)</title><rect x="10.6440%" y="101" width="2.2862%" height="15" fill="rgb(251,118,11)"/><text x="10.8940%" y="111.50">_..</text></g><g><title>_int_malloc (1,039 samples, 0.77%)</title><rect x="12.1638%" y="85" width="0.7665%" height="15" fill="rgb(217,147,25)"/><text x="12.4138%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (4,337 samples, 3.20%)</title><rect x="9.8488%" y="245" width="3.1996%" height="15" fill="rgb(247,81,37)"/><text x="10.0988%" y="255.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3,932 samples, 2.90%)</title><rect x="10.1475%" y="229" width="2.9008%" height="15" fill="rgb(209,12,38)"/><text x="10.3975%" y="239.50">al..</text></g><g><title>alloc::slice::hack::to_vec (3,931 samples, 2.90%)</title><rect x="10.1483%" y="213" width="2.9000%" height="15" fill="rgb(227,1,9)"/><text x="10.3983%" y="223.50">al..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3,519 samples, 2.60%)</title><rect x="10.4522%" y="197" width="2.5961%" height="15" fill="rgb(248,47,43)"/><text x="10.7022%" y="207.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (3,436 samples, 2.53%)</title><rect x="10.5135%" y="181" width="2.5349%" height="15" fill="rgb(221,10,30)"/><text x="10.7635%" y="191.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,436 samples, 2.53%)</title><rect x="10.5135%" y="165" width="2.5349%" height="15" fill="rgb(210,229,1)"/><text x="10.7635%" y="175.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3,432 samples, 2.53%)</title><rect x="10.5164%" y="149" width="2.5319%" height="15" fill="rgb(222,148,37)"/><text x="10.7664%" y="159.50">al..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,830 samples, 1.35%)</title><rect x="14.1439%" y="229" width="1.3501%" height="15" fill="rgb(234,67,33)"/><text x="14.3939%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,551 samples, 1.14%)</title><rect x="14.3497%" y="213" width="1.1442%" height="15" fill="rgb(247,98,35)"/><text x="14.5997%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (3,497 samples, 2.58%)</title><rect x="15.4939%" y="229" width="2.5799%" height="15" fill="rgb(247,138,52)"/><text x="15.7439%" y="239.50">__..</text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (717 samples, 0.53%)</title><rect x="19.2401%" y="213" width="0.5290%" height="15" fill="rgb(213,79,30)"/><text x="19.4901%" y="223.50"></text></g><g><title>core::ptr::read (687 samples, 0.51%)</title><rect x="19.2623%" y="197" width="0.5068%" height="15" fill="rgb(246,177,23)"/><text x="19.5123%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (602 samples, 0.44%)</title><rect x="19.3250%" y="181" width="0.4441%" height="15" fill="rgb(230,62,27)"/><text x="19.5750%" y="191.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (170 samples, 0.13%)</title><rect x="19.7750%" y="213" width="0.1254%" height="15" fill="rgb(216,154,8)"/><text x="20.0250%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (7,008 samples, 5.17%)</title><rect x="19.9373%" y="213" width="5.1700%" height="15" fill="rgb(244,35,45)"/><text x="20.1873%" y="223.50">__memm..</text></g><g><title>_int_free (432 samples, 0.32%)</title><rect x="25.1073%" y="213" width="0.3187%" height="15" fill="rgb(251,115,12)"/><text x="25.3573%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (288 samples, 0.21%)</title><rect x="25.4939%" y="213" width="0.2125%" height="15" fill="rgb(240,54,50)"/><text x="25.7439%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (259 samples, 0.19%)</title><rect x="25.5153%" y="197" width="0.1911%" height="15" fill="rgb(233,84,52)"/><text x="25.7653%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (171 samples, 0.13%)</title><rect x="25.7425%" y="197" width="0.1262%" height="15" fill="rgb(207,117,47)"/><text x="25.9925%" y="207.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop (249 samples, 0.18%)</title><rect x="25.8687%" y="197" width="0.1837%" height="15" fill="rgb(249,43,39)"/><text x="26.1187%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (249 samples, 0.18%)</title><rect x="25.8687%" y="181" width="0.1837%" height="15" fill="rgb(209,38,44)"/><text x="26.1187%" y="191.50"></text></g><g><title>&lt;&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (240 samples, 0.18%)</title><rect x="25.8753%" y="165" width="0.1771%" height="15" fill="rgb(236,212,23)"/><text x="26.1253%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (236 samples, 0.17%)</title><rect x="25.8783%" y="149" width="0.1741%" height="15" fill="rgb(242,79,21)"/><text x="26.1283%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (236 samples, 0.17%)</title><rect x="25.8783%" y="133" width="0.1741%" height="15" fill="rgb(211,96,35)"/><text x="26.1283%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (236 samples, 0.17%)</title><rect x="25.8783%" y="117" width="0.1741%" height="15" fill="rgb(253,215,40)"/><text x="26.1283%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (236 samples, 0.17%)</title><rect x="25.8783%" y="101" width="0.1741%" height="15" fill="rgb(211,81,21)"/><text x="26.1283%" y="111.50"></text></g><g><title>_int_free (176 samples, 0.13%)</title><rect x="25.9225%" y="85" width="0.1298%" height="15" fill="rgb(208,190,38)"/><text x="26.1725%" y="95.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (254 samples, 0.19%)</title><rect x="26.2272%" y="181" width="0.1874%" height="15" fill="rgb(235,213,38)"/><text x="26.4772%" y="191.50"></text></g><g><title>__GI___libc_free (212 samples, 0.16%)</title><rect x="26.5201%" y="133" width="0.1564%" height="15" fill="rgb(237,122,38)"/><text x="26.7701%" y="143.50"></text></g><g><title>core::ptr::drop_in_place (1,769 samples, 1.31%)</title><rect x="25.7064%" y="213" width="1.3051%" height="15" fill="rgb(244,218,35)"/><text x="25.9564%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (1,295 samples, 0.96%)</title><rect x="26.0561%" y="197" width="0.9554%" height="15" fill="rgb(240,68,47)"/><text x="26.3061%" y="207.50"></text></g><g><title>alloc::alloc::box_free (741 samples, 0.55%)</title><rect x="26.4648%" y="181" width="0.5467%" height="15" fill="rgb(210,16,53)"/><text x="26.7148%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (697 samples, 0.51%)</title><rect x="26.4972%" y="165" width="0.5142%" height="15" fill="rgb(235,124,12)"/><text x="26.7472%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (694 samples, 0.51%)</title><rect x="26.4994%" y="149" width="0.5120%" height="15" fill="rgb(224,169,11)"/><text x="26.7494%" y="159.50"></text></g><g><title>_int_free (454 samples, 0.33%)</title><rect x="26.6765%" y="133" width="0.3349%" height="15" fill="rgb(250,166,2)"/><text x="26.9265%" y="143.50"></text></g><g><title>cs::external_func::resolve_all_futures (760 samples, 0.56%)</title><rect x="27.0114%" y="213" width="0.5607%" height="15" fill="rgb(242,216,29)"/><text x="27.2614%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (728 samples, 0.54%)</title><rect x="27.0350%" y="197" width="0.5371%" height="15" fill="rgb(230,116,27)"/><text x="27.2850%" y="207.50"></text></g><g><title>cs::env::Interpreter::evaluate::{{closure}} (13,711 samples, 10.12%)</title><rect x="18.0738%" y="229" width="10.1151%" height="15" fill="rgb(228,99,48)"/><text x="18.3238%" y="239.50">cs::env::Interp..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (781 samples, 0.58%)</title><rect x="27.6127%" y="213" width="0.5762%" height="15" fill="rgb(253,11,6)"/><text x="27.8627%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (635 samples, 0.47%)</title><rect x="27.7204%" y="197" width="0.4685%" height="15" fill="rgb(247,143,39)"/><text x="27.9704%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (358 samples, 0.26%)</title><rect x="28.2752%" y="213" width="0.2641%" height="15" fill="rgb(236,97,10)"/><text x="28.5252%" y="223.50"></text></g><g><title>_int_free (229 samples, 0.17%)</title><rect x="28.5393%" y="213" width="0.1689%" height="15" fill="rgb(233,208,19)"/><text x="28.7893%" y="223.50"></text></g><g><title>cs::env::Interpreter::evaluate_assignment::{{closure}} (855 samples, 0.63%)</title><rect x="28.1889%" y="229" width="0.6308%" height="15" fill="rgb(216,164,2)"/><text x="28.4389%" y="239.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (736 samples, 0.54%)</title><rect x="29.4253%" y="213" width="0.5430%" height="15" fill="rgb(220,129,5)"/><text x="29.6753%" y="223.50"></text></g><g><title>core::ptr::read (671 samples, 0.50%)</title><rect x="29.4733%" y="197" width="0.4950%" height="15" fill="rgb(242,17,10)"/><text x="29.7233%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (495 samples, 0.37%)</title><rect x="29.6031%" y="181" width="0.3652%" height="15" fill="rgb(242,107,0)"/><text x="29.8531%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (3,655 samples, 2.70%)</title><rect x="29.9919%" y="213" width="2.6964%" height="15" fill="rgb(251,28,31)"/><text x="30.2419%" y="223.50">__..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (191 samples, 0.14%)</title><rect x="32.7407%" y="117" width="0.1409%" height="15" fill="rgb(233,223,10)"/><text x="32.9907%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (191 samples, 0.14%)</title><rect x="32.7407%" y="101" width="0.1409%" height="15" fill="rgb(215,21,27)"/><text x="32.9907%" y="111.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop (209 samples, 0.15%)</title><rect x="32.7281%" y="197" width="0.1542%" height="15" fill="rgb(232,23,21)"/><text x="32.9781%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (208 samples, 0.15%)</title><rect x="32.7289%" y="181" width="0.1534%" height="15" fill="rgb(244,5,23)"/><text x="32.9789%" y="191.50"></text></g><g><title>&lt;&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (202 samples, 0.15%)</title><rect x="32.7333%" y="165" width="0.1490%" height="15" fill="rgb(226,81,46)"/><text x="32.9833%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (192 samples, 0.14%)</title><rect x="32.7407%" y="149" width="0.1416%" height="15" fill="rgb(247,70,30)"/><text x="32.9907%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (192 samples, 0.14%)</title><rect x="32.7407%" y="133" width="0.1416%" height="15" fill="rgb(212,68,19)"/><text x="32.9907%" y="143.50"></text></g><g><title>core::ptr::drop_in_place (463 samples, 0.34%)</title><rect x="32.6883%" y="213" width="0.3416%" height="15" fill="rgb(240,187,13)"/><text x="32.9383%" y="223.50"></text></g><g><title>cs::external_func::resolve_all_futures (377 samples, 0.28%)</title><rect x="33.0299%" y="213" width="0.2781%" height="15" fill="rgb(223,113,26)"/><text x="33.2799%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (366 samples, 0.27%)</title><rect x="33.0380%" y="197" width="0.2700%" height="15" fill="rgb(206,192,2)"/><text x="33.2880%" y="207.50"></text></g><g><title>cs::lang::Value::unwrap_early_return (239 samples, 0.18%)</title><rect x="33.3080%" y="213" width="0.1763%" height="15" fill="rgb(241,108,4)"/><text x="33.5580%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (205 samples, 0.15%)</title><rect x="33.3331%" y="197" width="0.1512%" height="15" fill="rgb(247,173,49)"/><text x="33.5831%" y="207.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (519 samples, 0.38%)</title><rect x="33.4843%" y="213" width="0.3829%" height="15" fill="rgb(224,114,35)"/><text x="33.7343%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (460 samples, 0.34%)</title><rect x="33.5278%" y="197" width="0.3394%" height="15" fill="rgb(245,159,27)"/><text x="33.7778%" y="207.50"></text></g><g><title>cs::env::Interpreter::evaluate_function_call::{{closure}} (6,900 samples, 5.09%)</title><rect x="28.8196%" y="229" width="5.0904%" height="15" fill="rgb(245,172,44)"/><text x="29.0696%" y="239.50">cs::en..</text></g><g><title>__memmove_avx_unaligned_erms (1,872 samples, 1.38%)</title><rect x="34.4109%" y="213" width="1.3810%" height="15" fill="rgb(236,23,11)"/><text x="34.6609%" y="223.50"></text></g><g><title>cs::external_func::resolve_all_futures::{{closure}} (2,755 samples, 2.03%)</title><rect x="33.9100%" y="229" width="2.0325%" height="15" fill="rgb(205,117,38)"/><text x="34.1600%" y="239.50">c..</text></g><g><title>cs::external_func::resolve_futures (199 samples, 0.15%)</title><rect x="35.7956%" y="213" width="0.1468%" height="15" fill="rgb(237,72,25)"/><text x="36.0456%" y="223.50"></text></g><g><title>cs::lang::Value::new_future (150 samples, 0.11%)</title><rect x="35.8318%" y="197" width="0.1107%" height="15" fill="rgb(244,70,9)"/><text x="36.0818%" y="207.50"></text></g><g><title>cs::lang::Value::new_value_future (150 samples, 0.11%)</title><rect x="35.8318%" y="181" width="0.1107%" height="15" fill="rgb(217,125,39)"/><text x="36.0818%" y="191.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (31,134 samples, 22.97%)</title><rect x="13.1516%" y="245" width="22.9686%" height="15" fill="rgb(235,36,10)"/><text x="13.4016%" y="255.50">&lt;core::future::from_generator::GenFu..</text></g><g><title>cs::external_func::resolve_futures::{{closure}} (241 samples, 0.18%)</title><rect x="35.9425%" y="229" width="0.1778%" height="15" fill="rgb(251,123,47)"/><text x="36.1925%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (290 samples, 0.21%)</title><rect x="36.1210%" y="245" width="0.2139%" height="15" fill="rgb(221,13,13)"/><text x="36.3710%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (282 samples, 0.21%)</title><rect x="36.1269%" y="229" width="0.2080%" height="15" fill="rgb(238,131,9)"/><text x="36.3769%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (260 samples, 0.19%)</title><rect x="36.1431%" y="213" width="0.1918%" height="15" fill="rgb(211,50,8)"/><text x="36.3931%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::{{closure}} (260 samples, 0.19%)</title><rect x="36.1431%" y="197" width="0.1918%" height="15" fill="rgb(245,182,24)"/><text x="36.3931%" y="207.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (260 samples, 0.19%)</title><rect x="36.1431%" y="181" width="0.1918%" height="15" fill="rgb(242,14,37)"/><text x="36.3931%" y="191.50"></text></g><g><title>core::ops::function::FnMut::call_mut (163 samples, 0.12%)</title><rect x="36.2147%" y="165" width="0.1203%" height="15" fill="rgb(246,228,12)"/><text x="36.4647%" y="175.50"></text></g><g><title>&lt;cs::lang::ArgumentDefinition as core::clone::Clone&gt;::clone (162 samples, 0.12%)</title><rect x="36.2154%" y="149" width="0.1195%" height="15" fill="rgb(213,55,15)"/><text x="36.4654%" y="159.50"></text></g><g><title>core::ptr::drop_in_place (171 samples, 0.13%)</title><rect x="36.5179%" y="229" width="0.1262%" height="15" fill="rgb(209,9,3)"/><text x="36.7679%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (171 samples, 0.13%)</title><rect x="36.5179%" y="213" width="0.1262%" height="15" fill="rgb(230,59,30)"/><text x="36.7679%" y="223.50"></text></g><g><title>&lt;cs::builtins::DivideTemp as cs::lang::Function&gt;::call (374 samples, 0.28%)</title><rect x="36.3711%" y="245" width="0.2759%" height="15" fill="rgb(209,121,21)"/><text x="36.6211%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (159 samples, 0.12%)</title><rect x="36.6920%" y="229" width="0.1173%" height="15" fill="rgb(220,109,13)"/><text x="36.9420%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (151 samples, 0.11%)</title><rect x="36.6979%" y="213" width="0.1114%" height="15" fill="rgb(232,18,1)"/><text x="36.9479%" y="223.50"></text></g><g><title>&lt;cs::builtins::Equals as cs::lang::Function&gt;::call (371 samples, 0.27%)</title><rect x="36.6477%" y="245" width="0.2737%" height="15" fill="rgb(215,41,42)"/><text x="36.8977%" y="255.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (152 samples, 0.11%)</title><rect x="36.8093%" y="229" width="0.1121%" height="15" fill="rgb(224,123,36)"/><text x="37.0593%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (152 samples, 0.11%)</title><rect x="36.8093%" y="213" width="0.1121%" height="15" fill="rgb(240,125,3)"/><text x="37.0593%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (151 samples, 0.11%)</title><rect x="36.8100%" y="197" width="0.1114%" height="15" fill="rgb(205,98,50)"/><text x="37.0600%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (146 samples, 0.11%)</title><rect x="37.0498%" y="197" width="0.1077%" height="15" fill="rgb(205,185,37)"/><text x="37.2998%" y="207.50"></text></g><g><title>&lt;cs::builtins::Subtract as cs::lang::Function&gt;::call (382 samples, 0.28%)</title><rect x="36.9244%" y="245" width="0.2818%" height="15" fill="rgb(238,207,15)"/><text x="37.1744%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (215 samples, 0.16%)</title><rect x="37.0476%" y="229" width="0.1586%" height="15" fill="rgb(213,199,42)"/><text x="37.2976%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (215 samples, 0.16%)</title><rect x="37.0476%" y="213" width="0.1586%" height="15" fill="rgb(235,201,11)"/><text x="37.2976%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (263 samples, 0.19%)</title><rect x="37.5124%" y="229" width="0.1940%" height="15" fill="rgb(207,46,11)"/><text x="37.7624%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (187 samples, 0.14%)</title><rect x="37.8967%" y="197" width="0.1380%" height="15" fill="rgb(241,35,35)"/><text x="38.1467%" y="207.50"></text></g><g><title>&lt;cs::code_function::CodeFunction as cs::lang::Function&gt;::call (1,239 samples, 0.91%)</title><rect x="37.2091%" y="245" width="0.9141%" height="15" fill="rgb(243,32,47)"/><text x="37.4591%" y="255.50"></text></g><g><title>cs::lang::Value::new_future (321 samples, 0.24%)</title><rect x="37.8864%" y="229" width="0.2368%" height="15" fill="rgb(247,202,23)"/><text x="38.1364%" y="239.50"></text></g><g><title>cs::lang::Value::new_value_future (311 samples, 0.23%)</title><rect x="37.8938%" y="213" width="0.2294%" height="15" fill="rgb(219,102,11)"/><text x="38.1438%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::clone::Clone&gt;::clone (7,028 samples, 5.18%)</title><rect x="41.0336%" y="213" width="5.1848%" height="15" fill="rgb(243,110,44)"/><text x="41.2836%" y="223.50">&lt;alloc..</text></g><g><title>alloc::alloc::exchange_malloc (6,946 samples, 5.12%)</title><rect x="41.0941%" y="197" width="5.1243%" height="15" fill="rgb(222,74,54)"/><text x="41.3441%" y="207.50">alloc:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (6,946 samples, 5.12%)</title><rect x="41.0941%" y="181" width="5.1243%" height="15" fill="rgb(216,99,12)"/><text x="41.3441%" y="191.50">&lt;alloc..</text></g><g><title>alloc::alloc::alloc (6,939 samples, 5.12%)</title><rect x="41.0992%" y="165" width="5.1191%" height="15" fill="rgb(226,22,26)"/><text x="41.3492%" y="175.50">alloc:..</text></g><g><title>__GI___libc_malloc (6,805 samples, 5.02%)</title><rect x="41.1981%" y="149" width="5.0203%" height="15" fill="rgb(217,163,10)"/><text x="41.4481%" y="159.50">__GI__..</text></g><g><title>_int_malloc (2,769 samples, 2.04%)</title><rect x="44.1756%" y="133" width="2.0428%" height="15" fill="rgb(213,25,53)"/><text x="44.4256%" y="143.50">_..</text></g><g><title>&lt;cs::lang::Argument as core::clone::Clone&gt;::clone (7,427 samples, 5.48%)</title><rect x="40.9096%" y="229" width="5.4792%" height="15" fill="rgb(252,105,26)"/><text x="41.1596%" y="239.50">&lt;cs::la..</text></g><g><title>&lt;uuid::Uuid as core::clone::Clone&gt;::clone (231 samples, 0.17%)</title><rect x="46.2184%" y="213" width="0.1704%" height="15" fill="rgb(220,39,43)"/><text x="46.4684%" y="223.50"></text></g><g><title>&lt;cs::lang::Assignment as core::clone::Clone&gt;::clone (1,018 samples, 0.75%)</title><rect x="46.3888%" y="229" width="0.7510%" height="15" fill="rgb(229,68,48)"/><text x="46.6388%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::clone::Clone&gt;::clone (993 samples, 0.73%)</title><rect x="46.4072%" y="213" width="0.7326%" height="15" fill="rgb(252,8,32)"/><text x="46.6572%" y="223.50"></text></g><g><title>alloc::alloc::exchange_malloc (982 samples, 0.72%)</title><rect x="46.4153%" y="197" width="0.7245%" height="15" fill="rgb(223,20,43)"/><text x="46.6653%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (982 samples, 0.72%)</title><rect x="46.4153%" y="181" width="0.7245%" height="15" fill="rgb(229,81,49)"/><text x="46.6653%" y="191.50"></text></g><g><title>alloc::alloc::alloc (981 samples, 0.72%)</title><rect x="46.4161%" y="165" width="0.7237%" height="15" fill="rgb(236,28,36)"/><text x="46.6661%" y="175.50"></text></g><g><title>__GI___libc_malloc (964 samples, 0.71%)</title><rect x="46.4286%" y="149" width="0.7112%" height="15" fill="rgb(249,185,26)"/><text x="46.6786%" y="159.50"></text></g><g><title>_int_malloc (603 samples, 0.44%)</title><rect x="46.6949%" y="133" width="0.4449%" height="15" fill="rgb(249,174,33)"/><text x="46.9449%" y="143.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::clone::Clone&gt;::clone (494 samples, 0.36%)</title><rect x="47.1900%" y="213" width="0.3644%" height="15" fill="rgb(233,201,37)"/><text x="47.4400%" y="223.50"></text></g><g><title>alloc::alloc::exchange_malloc (490 samples, 0.36%)</title><rect x="47.1929%" y="197" width="0.3615%" height="15" fill="rgb(221,78,26)"/><text x="47.4429%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (490 samples, 0.36%)</title><rect x="47.1929%" y="181" width="0.3615%" height="15" fill="rgb(250,127,30)"/><text x="47.4429%" y="191.50"></text></g><g><title>alloc::alloc::alloc (488 samples, 0.36%)</title><rect x="47.1944%" y="165" width="0.3600%" height="15" fill="rgb(230,49,44)"/><text x="47.4444%" y="175.50"></text></g><g><title>__GI___libc_malloc (478 samples, 0.35%)</title><rect x="47.2018%" y="149" width="0.3526%" height="15" fill="rgb(229,67,23)"/><text x="47.4518%" y="159.50"></text></g><g><title>_int_malloc (157 samples, 0.12%)</title><rect x="47.4386%" y="133" width="0.1158%" height="15" fill="rgb(249,83,47)"/><text x="47.6886%" y="143.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (266 samples, 0.20%)</title><rect x="47.5544%" y="213" width="0.1962%" height="15" fill="rgb(215,43,3)"/><text x="47.8044%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::clone::Clone&gt;::clone (262 samples, 0.19%)</title><rect x="47.5574%" y="197" width="0.1933%" height="15" fill="rgb(238,154,13)"/><text x="47.8074%" y="207.50"></text></g><g><title>alloc::alloc::exchange_malloc (255 samples, 0.19%)</title><rect x="47.5625%" y="181" width="0.1881%" height="15" fill="rgb(219,56,2)"/><text x="47.8125%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (255 samples, 0.19%)</title><rect x="47.5625%" y="165" width="0.1881%" height="15" fill="rgb(233,0,4)"/><text x="47.8125%" y="175.50"></text></g><g><title>alloc::alloc::alloc (255 samples, 0.19%)</title><rect x="47.5625%" y="149" width="0.1881%" height="15" fill="rgb(235,30,7)"/><text x="47.8125%" y="159.50"></text></g><g><title>__GI___libc_malloc (251 samples, 0.19%)</title><rect x="47.5655%" y="133" width="0.1852%" height="15" fill="rgb(250,79,13)"/><text x="47.8155%" y="143.50"></text></g><g><title>&lt;cs::lang::Conditional as core::clone::Clone&gt;::clone (808 samples, 0.60%)</title><rect x="47.1870%" y="229" width="0.5961%" height="15" fill="rgb(211,146,34)"/><text x="47.4370%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::clone::Clone&gt;::clone (321 samples, 0.24%)</title><rect x="47.7853%" y="213" width="0.2368%" height="15" fill="rgb(228,22,38)"/><text x="48.0353%" y="223.50"></text></g><g><title>alloc::alloc::exchange_malloc (319 samples, 0.24%)</title><rect x="47.7868%" y="197" width="0.2353%" height="15" fill="rgb(235,168,5)"/><text x="48.0368%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (319 samples, 0.24%)</title><rect x="47.7868%" y="181" width="0.2353%" height="15" fill="rgb(221,155,16)"/><text x="48.0368%" y="191.50"></text></g><g><title>alloc::alloc::alloc (319 samples, 0.24%)</title><rect x="47.7868%" y="165" width="0.2353%" height="15" fill="rgb(215,215,53)"/><text x="48.0368%" y="175.50"></text></g><g><title>__GI___libc_malloc (317 samples, 0.23%)</title><rect x="47.7883%" y="149" width="0.2339%" height="15" fill="rgb(223,4,10)"/><text x="48.0383%" y="159.50"></text></g><g><title>_int_malloc (146 samples, 0.11%)</title><rect x="47.9144%" y="133" width="0.1077%" height="15" fill="rgb(234,103,6)"/><text x="48.1644%" y="143.50"></text></g><g><title>&lt;cs::lang::EarlyReturn as core::clone::Clone&gt;::clone (344 samples, 0.25%)</title><rect x="47.7831%" y="229" width="0.2538%" height="15" fill="rgb(227,97,0)"/><text x="48.0331%" y="239.50"></text></g><g><title>&lt;cs::lang::FunctionCall as core::clone::Clone&gt;::clone (3,436 samples, 2.53%)</title><rect x="48.0406%" y="229" width="2.5349%" height="15" fill="rgb(234,150,53)"/><text x="48.2906%" y="239.50">&lt;c..</text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::clone::Clone&gt;::clone (3,216 samples, 2.37%)</title><rect x="48.2029%" y="213" width="2.3726%" height="15" fill="rgb(228,201,54)"/><text x="48.4529%" y="223.50">&lt;a..</text></g><g><title>alloc::alloc::exchange_malloc (3,164 samples, 2.33%)</title><rect x="48.2412%" y="197" width="2.3342%" height="15" fill="rgb(222,22,37)"/><text x="48.4912%" y="207.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (3,164 samples, 2.33%)</title><rect x="48.2412%" y="181" width="2.3342%" height="15" fill="rgb(237,53,32)"/><text x="48.4912%" y="191.50">&lt;..</text></g><g><title>alloc::alloc::alloc (3,157 samples, 2.33%)</title><rect x="48.2464%" y="165" width="2.3290%" height="15" fill="rgb(233,25,53)"/><text x="48.4964%" y="175.50">a..</text></g><g><title>__GI___libc_malloc (2,954 samples, 2.18%)</title><rect x="48.3962%" y="149" width="2.1793%" height="15" fill="rgb(210,40,34)"/><text x="48.6462%" y="159.50">_..</text></g><g><title>_int_malloc (1,016 samples, 0.75%)</title><rect x="49.8259%" y="133" width="0.7495%" height="15" fill="rgb(241,220,44)"/><text x="50.0759%" y="143.50"></text></g><g><title>&lt;cs::lang::VariableReference as core::clone::Clone&gt;::clone (436 samples, 0.32%)</title><rect x="50.7643%" y="229" width="0.3217%" height="15" fill="rgb(235,28,35)"/><text x="51.0143%" y="239.50"></text></g><g><title>&lt;uuid::Uuid as core::clone::Clone&gt;::clone (312 samples, 0.23%)</title><rect x="50.8558%" y="213" width="0.2302%" height="15" fill="rgb(210,56,17)"/><text x="51.1058%" y="223.50"></text></g><g><title>&lt;cs::lang::CodeNode as core::clone::Clone&gt;::clone (17,586 samples, 12.97%)</title><rect x="38.1269%" y="245" width="12.9738%" height="15" fill="rgb(224,130,29)"/><text x="38.3769%" y="255.50">&lt;cs::lang::CodeNode..</text></g><g><title>&lt;cs::lang::Value as core::clone::Clone&gt;::clone (936 samples, 0.69%)</title><rect x="51.1096%" y="245" width="0.6905%" height="15" fill="rgb(235,212,8)"/><text x="51.3596%" y="255.50"></text></g><g><title>&lt;futures_util::fns::UnwrapOrElseFn&lt;F&gt; as futures_util::fns::FnOnce1&lt;core::result::Result&lt;T,E&gt;&gt;&gt;::call_once (592 samples, 0.44%)</title><rect x="52.0081%" y="229" width="0.4367%" height="15" fill="rgb(223,33,50)"/><text x="52.2581%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (467 samples, 0.34%)</title><rect x="52.1003%" y="213" width="0.3445%" height="15" fill="rgb(219,149,13)"/><text x="52.3503%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (446 samples, 0.33%)</title><rect x="52.1158%" y="197" width="0.3290%" height="15" fill="rgb(250,156,29)"/><text x="52.3658%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (160 samples, 0.12%)</title><rect x="52.4781%" y="229" width="0.1180%" height="15" fill="rgb(216,193,19)"/><text x="52.7281%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (707 samples, 0.52%)</title><rect x="52.6728%" y="213" width="0.5216%" height="15" fill="rgb(216,135,14)"/><text x="52.9228%" y="223.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2,231 samples, 1.65%)</title><rect x="51.9115%" y="245" width="1.6459%" height="15" fill="rgb(241,47,5)"/><text x="52.1615%" y="255.50"></text></g><g><title>futures_util::future::future::map::_::&lt;impl futures_util::future::future::map::Map&lt;Fut,F&gt;&gt;::project_replace (1,252 samples, 0.92%)</title><rect x="52.6337%" y="229" width="0.9236%" height="15" fill="rgb(233,42,35)"/><text x="52.8837%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (492 samples, 0.36%)</title><rect x="53.1944%" y="213" width="0.3630%" height="15" fill="rgb(231,13,6)"/><text x="53.4444%" y="223.50"></text></g><g><title>&lt;pin_project::__private::UnsafeOverwriteGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (470 samples, 0.35%)</title><rect x="53.2106%" y="197" width="0.3467%" height="15" fill="rgb(207,181,40)"/><text x="53.4606%" y="207.50"></text></g><g><title>core::ptr::write (470 samples, 0.35%)</title><rect x="53.2106%" y="181" width="0.3467%" height="15" fill="rgb(254,173,49)"/><text x="53.4606%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (463 samples, 0.34%)</title><rect x="53.2158%" y="165" width="0.3416%" height="15" fill="rgb(221,1,38)"/><text x="53.4658%" y="175.50"></text></g><g><title>&lt;futures_util::future::future::shared::Notifier as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (254 samples, 0.19%)</title><rect x="53.5574%" y="245" width="0.1874%" height="15" fill="rgb(206,124,46)"/><text x="53.8074%" y="255.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (161 samples, 0.12%)</title><rect x="53.6260%" y="229" width="0.1188%" height="15" fill="rgb(249,21,11)"/><text x="53.8760%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (505 samples, 0.37%)</title><rect x="54.0539%" y="229" width="0.3726%" height="15" fill="rgb(222,201,40)"/><text x="54.3039%" y="239.50"></text></g><g><title>core::mem::drop (148 samples, 0.11%)</title><rect x="54.4264%" y="229" width="0.1092%" height="15" fill="rgb(235,61,29)"/><text x="54.6764%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (148 samples, 0.11%)</title><rect x="54.4264%" y="213" width="0.1092%" height="15" fill="rgb(219,207,3)"/><text x="54.6764%" y="223.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (145 samples, 0.11%)</title><rect x="54.4286%" y="197" width="0.1070%" height="15" fill="rgb(222,56,46)"/><text x="54.6786%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (235 samples, 0.17%)</title><rect x="54.6603%" y="165" width="0.1734%" height="15" fill="rgb(239,76,54)"/><text x="54.9103%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (230 samples, 0.17%)</title><rect x="54.6640%" y="149" width="0.1697%" height="15" fill="rgb(231,124,27)"/><text x="54.9140%" y="159.50"></text></g><g><title>_int_free (190 samples, 0.14%)</title><rect x="54.6935%" y="133" width="0.1402%" height="15" fill="rgb(249,195,6)"/><text x="54.9435%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (248 samples, 0.18%)</title><rect x="54.6603%" y="181" width="0.1830%" height="15" fill="rgb(237,174,47)"/><text x="54.9103%" y="191.50"></text></g><g><title>core::ptr::drop_in_place (448 samples, 0.33%)</title><rect x="54.5865%" y="229" width="0.3305%" height="15" fill="rgb(206,201,31)"/><text x="54.8365%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (419 samples, 0.31%)</title><rect x="54.6079%" y="213" width="0.3091%" height="15" fill="rgb(231,57,52)"/><text x="54.8579%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (412 samples, 0.30%)</title><rect x="54.6131%" y="197" width="0.3039%" height="15" fill="rgb(248,177,22)"/><text x="54.8631%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (182 samples, 0.13%)</title><rect x="55.0092%" y="229" width="0.1343%" height="15" fill="rgb(215,211,37)"/><text x="55.2592%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_store (182 samples, 0.13%)</title><rect x="55.0092%" y="213" width="0.1343%" height="15" fill="rgb(241,128,51)"/><text x="55.2592%" y="223.50"></text></g><g><title>&lt;futures_util::future::future::shared::Shared&lt;Fut&gt; as core::future::future::Future&gt;::poll (2,042 samples, 1.51%)</title><rect x="53.7447%" y="245" width="1.5065%" height="15" fill="rgb(227,165,31)"/><text x="53.9947%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (250 samples, 0.18%)</title><rect x="55.4253%" y="245" width="0.1844%" height="15" fill="rgb(228,167,24)"/><text x="55.6753%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (258 samples, 0.19%)</title><rect x="57.0085%" y="181" width="0.1903%" height="15" fill="rgb(228,143,12)"/><text x="57.2585%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,009 samples, 0.74%)</title><rect x="56.5754%" y="197" width="0.7444%" height="15" fill="rgb(249,149,8)"/><text x="56.8254%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (164 samples, 0.12%)</title><rect x="57.1988%" y="181" width="0.1210%" height="15" fill="rgb(243,35,44)"/><text x="57.4488%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (293 samples, 0.22%)</title><rect x="57.3198%" y="197" width="0.2162%" height="15" fill="rgb(246,89,9)"/><text x="57.5698%" y="207.50"></text></g><g><title>core::hash::sip::u8to64_le (341 samples, 0.25%)</title><rect x="57.5360%" y="197" width="0.2516%" height="15" fill="rgb(233,213,13)"/><text x="57.7860%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,733 samples, 2.02%)</title><rect x="55.8532%" y="213" width="2.0162%" height="15" fill="rgb(233,141,41)"/><text x="56.1032%" y="223.50">&lt;..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,910 samples, 2.15%)</title><rect x="55.7374%" y="245" width="2.1468%" height="15" fill="rgb(239,167,4)"/><text x="55.9874%" y="255.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2,753 samples, 2.03%)</title><rect x="55.8532%" y="229" width="2.0310%" height="15" fill="rgb(209,217,16)"/><text x="56.1032%" y="239.50">&lt;..</text></g><g><title>&lt;tokio_current_thread::scheduler::ArcNode&lt;U&gt; as futures::task_impl::Notify&gt;::notify (227 samples, 0.17%)</title><rect x="57.9034%" y="245" width="0.1675%" height="15" fill="rgb(219,88,35)"/><text x="58.1534%" y="255.50"></text></g><g><title>tokio_current_thread::scheduler::Node&lt;U&gt;::notify (224 samples, 0.17%)</title><rect x="57.9056%" y="229" width="0.1653%" height="15" fill="rgb(220,193,23)"/><text x="58.1556%" y="239.50"></text></g><g><title>ImFontAtlasBuildWithStbTruetype (156 samples, 0.12%)</title><rect x="58.3039%" y="245" width="0.1151%" height="15" fill="rgb(230,90,52)"/><text x="58.5539%" y="255.50"></text></g><g><title>stbtt_PackFontRangesRenderIntoRects (136 samples, 0.10%)</title><rect x="58.3187%" y="229" width="0.1003%" height="15" fill="rgb(252,106,19)"/><text x="58.5687%" y="239.50"></text></g><g><title>stbtt_MakeGlyphBitmapSubpixel (136 samples, 0.10%)</title><rect x="58.3187%" y="213" width="0.1003%" height="15" fill="rgb(206,74,20)"/><text x="58.5687%" y="223.50"></text></g><g><title>__GI___libc_malloc (147 samples, 0.11%)</title><rect x="58.5349%" y="229" width="0.1084%" height="15" fill="rgb(230,138,44)"/><text x="58.7849%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (186 samples, 0.14%)</title><rect x="58.6514%" y="229" width="0.1372%" height="15" fill="rgb(235,182,43)"/><text x="58.9014%" y="239.50"></text></g><g><title>_int_free (590 samples, 0.44%)</title><rect x="58.7886%" y="229" width="0.4353%" height="15" fill="rgb(242,16,51)"/><text x="59.0386%" y="239.50"></text></g><g><title>_int_malloc (447 samples, 0.33%)</title><rect x="59.2239%" y="229" width="0.3298%" height="15" fill="rgb(248,9,4)"/><text x="59.4739%" y="239.50"></text></g><g><title>[[heap]] (1,601 samples, 1.18%)</title><rect x="58.4537%" y="245" width="1.1811%" height="15" fill="rgb(210,31,22)"/><text x="58.7037%" y="255.50"></text></g><g><title>__GI___libc_malloc (366 samples, 0.27%)</title><rect x="59.6488%" y="229" width="0.2700%" height="15" fill="rgb(239,54,39)"/><text x="59.8988%" y="239.50"></text></g><g><title>_int_free (279 samples, 0.21%)</title><rect x="59.9808%" y="229" width="0.2058%" height="15" fill="rgb(230,99,41)"/><text x="60.2308%" y="239.50"></text></g><g><title>[[stack]] (767 samples, 0.57%)</title><rect x="59.6348%" y="245" width="0.5658%" height="15" fill="rgb(253,106,12)"/><text x="59.8848%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (188 samples, 0.14%)</title><rect x="60.5341%" y="165" width="0.1387%" height="15" fill="rgb(213,46,41)"/><text x="60.7841%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (505 samples, 0.37%)</title><rect x="60.4375%" y="181" width="0.3726%" height="15" fill="rgb(215,133,35)"/><text x="60.6875%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (186 samples, 0.14%)</title><rect x="60.6728%" y="165" width="0.1372%" height="15" fill="rgb(213,28,5)"/><text x="60.9228%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (655 samples, 0.48%)</title><rect x="60.3696%" y="229" width="0.4832%" height="15" fill="rgb(215,77,49)"/><text x="60.6196%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (655 samples, 0.48%)</title><rect x="60.3696%" y="213" width="0.4832%" height="15" fill="rgb(248,100,22)"/><text x="60.6196%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (655 samples, 0.48%)</title><rect x="60.3696%" y="197" width="0.4832%" height="15" fill="rgb(208,67,9)"/><text x="60.6196%" y="207.50"></text></g><g><title>__GI___libc_malloc (201 samples, 0.15%)</title><rect x="60.9155%" y="229" width="0.1483%" height="15" fill="rgb(219,133,21)"/><text x="61.1655%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (205 samples, 0.15%)</title><rect x="61.1081%" y="229" width="0.1512%" height="15" fill="rgb(246,46,29)"/><text x="61.3581%" y="239.50"></text></g><g><title>_int_free (560 samples, 0.41%)</title><rect x="61.2741%" y="229" width="0.4131%" height="15" fill="rgb(246,185,52)"/><text x="61.5241%" y="239.50"></text></g><g><title>core::slice::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,117 samples, 0.82%)</title><rect x="61.7949%" y="229" width="0.8241%" height="15" fill="rgb(252,136,11)"/><text x="62.0449%" y="239.50"></text></g><g><title>&lt;[A] as core::slice::SlicePartialEq&lt;A&gt;&gt;::equal (1,115 samples, 0.82%)</title><rect x="61.7964%" y="213" width="0.8226%" height="15" fill="rgb(219,138,53)"/><text x="62.0464%" y="223.50"></text></g><g><title>__memcmp_avx2_movbe (980 samples, 0.72%)</title><rect x="61.8960%" y="197" width="0.7230%" height="15" fill="rgb(211,51,23)"/><text x="62.1460%" y="207.50"></text></g><g><title>futures_util::future::future::shared::Shared&lt;Fut&gt;::new (175 samples, 0.13%)</title><rect x="62.6367%" y="229" width="0.1291%" height="15" fill="rgb(247,221,28)"/><text x="62.8867%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (137 samples, 0.10%)</title><rect x="62.6647%" y="213" width="0.1011%" height="15" fill="rgb(251,222,45)"/><text x="62.9147%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (348 samples, 0.26%)</title><rect x="62.8661%" y="213" width="0.2567%" height="15" fill="rgb(217,162,53)"/><text x="63.1161%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (348 samples, 0.26%)</title><rect x="62.8661%" y="197" width="0.2567%" height="15" fill="rgb(229,93,14)"/><text x="63.1161%" y="207.50"></text></g><g><title>core::ptr::write (348 samples, 0.26%)</title><rect x="62.8661%" y="181" width="0.2567%" height="15" fill="rgb(209,67,49)"/><text x="63.1161%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (313 samples, 0.23%)</title><rect x="62.8919%" y="165" width="0.2309%" height="15" fill="rgb(213,87,29)"/><text x="63.1419%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (141 samples, 0.10%)</title><rect x="63.4054%" y="197" width="0.1040%" height="15" fill="rgb(205,151,52)"/><text x="63.6554%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (141 samples, 0.10%)</title><rect x="63.4054%" y="181" width="0.1040%" height="15" fill="rgb(253,215,39)"/><text x="63.6554%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (141 samples, 0.10%)</title><rect x="63.4054%" y="165" width="0.1040%" height="15" fill="rgb(221,220,41)"/><text x="63.6554%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (627 samples, 0.46%)</title><rect x="63.1243%" y="213" width="0.4626%" height="15" fill="rgb(218,133,21)"/><text x="63.3743%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (1,145 samples, 0.84%)</title><rect x="62.7886%" y="229" width="0.8447%" height="15" fill="rgb(221,193,43)"/><text x="63.0386%" y="239.50"></text></g><g><title>[unknown] (4,616 samples, 3.41%)</title><rect x="60.3069%" y="245" width="3.4054%" height="15" fill="rgb(240,128,52)"/><text x="60.5569%" y="255.50">[un..</text></g><g><title>__divti3 (162 samples, 0.12%)</title><rect x="63.7462%" y="245" width="0.1195%" height="15" fill="rgb(253,114,12)"/><text x="63.9962%" y="255.50"></text></g><g><title>__rdl_alloc (815 samples, 0.60%)</title><rect x="63.8687%" y="245" width="0.6013%" height="15" fill="rgb(215,223,47)"/><text x="64.1187%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (782 samples, 0.58%)</title><rect x="63.8930%" y="229" width="0.5769%" height="15" fill="rgb(248,225,23)"/><text x="64.1430%" y="239.50"></text></g><g><title>__rdl_dealloc (497 samples, 0.37%)</title><rect x="64.4699%" y="245" width="0.3667%" height="15" fill="rgb(250,108,0)"/><text x="64.7199%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (497 samples, 0.37%)</title><rect x="64.4699%" y="229" width="0.3667%" height="15" fill="rgb(228,208,7)"/><text x="64.7199%" y="239.50"></text></g><g><title>__rust_alloc (355 samples, 0.26%)</title><rect x="64.8388%" y="245" width="0.2619%" height="15" fill="rgb(244,45,10)"/><text x="65.0888%" y="255.50"></text></g><g><title>__rust_dealloc (378 samples, 0.28%)</title><rect x="65.1007%" y="245" width="0.2789%" height="15" fill="rgb(207,125,25)"/><text x="65.3507%" y="255.50"></text></g><g><title>__GI___libc_malloc (346 samples, 0.26%)</title><rect x="65.6990%" y="229" width="0.2553%" height="15" fill="rgb(210,195,18)"/><text x="65.9490%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow (603 samples, 0.44%)</title><rect x="65.5640%" y="245" width="0.4449%" height="15" fill="rgb(249,80,12)"/><text x="65.8140%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (182 samples, 0.13%)</title><rect x="66.1011%" y="229" width="0.1343%" height="15" fill="rgb(221,65,9)"/><text x="66.3511%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (182 samples, 0.13%)</title><rect x="66.1011%" y="213" width="0.1343%" height="15" fill="rgb(235,49,36)"/><text x="66.3511%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (351 samples, 0.26%)</title><rect x="66.0671%" y="245" width="0.2589%" height="15" fill="rgb(225,32,20)"/><text x="66.3171%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (494 samples, 0.36%)</title><rect x="66.4677%" y="245" width="0.3644%" height="15" fill="rgb(215,141,46)"/><text x="66.7177%" y="255.50"></text></g><g><title>core::mem::replace (264 samples, 0.19%)</title><rect x="66.6374%" y="229" width="0.1948%" height="15" fill="rgb(250,160,47)"/><text x="66.8874%" y="239.50"></text></g><g><title>core::mem::swap (264 samples, 0.19%)</title><rect x="66.6374%" y="213" width="0.1948%" height="15" fill="rgb(216,222,40)"/><text x="66.8874%" y="223.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (264 samples, 0.19%)</title><rect x="66.6374%" y="197" width="0.1948%" height="15" fill="rgb(234,217,39)"/><text x="66.8874%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (148 samples, 0.11%)</title><rect x="66.7230%" y="181" width="0.1092%" height="15" fill="rgb(207,178,40)"/><text x="66.9730%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (202 samples, 0.15%)</title><rect x="67.0173%" y="229" width="0.1490%" height="15" fill="rgb(221,136,13)"/><text x="67.2673%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (570 samples, 0.42%)</title><rect x="66.8528%" y="245" width="0.4205%" height="15" fill="rgb(249,199,10)"/><text x="67.1028%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (145 samples, 0.11%)</title><rect x="67.1664%" y="229" width="0.1070%" height="15" fill="rgb(249,222,13)"/><text x="67.4164%" y="239.50"></text></g><g><title>core::hash::Hasher::write_usize (145 samples, 0.11%)</title><rect x="67.1664%" y="213" width="0.1070%" height="15" fill="rgb(244,185,38)"/><text x="67.4164%" y="223.50"></text></g><g><title>__GI___libc_free (137 samples, 0.10%)</title><rect x="71.0719%" y="181" width="0.1011%" height="15" fill="rgb(236,202,9)"/><text x="71.3219%" y="191.50"></text></g><g><title>_int_free (506 samples, 0.37%)</title><rect x="71.1730%" y="181" width="0.3733%" height="15" fill="rgb(250,229,37)"/><text x="71.4230%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,150 samples, 0.85%)</title><rect x="70.9384%" y="213" width="0.8484%" height="15" fill="rgb(206,174,23)"/><text x="71.1884%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (1,105 samples, 0.82%)</title><rect x="70.9716%" y="197" width="0.8152%" height="15" fill="rgb(211,33,43)"/><text x="71.2216%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (326 samples, 0.24%)</title><rect x="71.5463%" y="181" width="0.2405%" height="15" fill="rgb(245,58,50)"/><text x="71.7963%" y="191.50"></text></g><g><title>core::ptr::drop_in_place (316 samples, 0.23%)</title><rect x="71.5537%" y="165" width="0.2331%" height="15" fill="rgb(244,68,36)"/><text x="71.8037%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (316 samples, 0.23%)</title><rect x="71.5537%" y="149" width="0.2331%" height="15" fill="rgb(232,229,15)"/><text x="71.8037%" y="159.50"></text></g><g><title>core::ptr::drop_in_place (312 samples, 0.23%)</title><rect x="71.5566%" y="133" width="0.2302%" height="15" fill="rgb(254,30,23)"/><text x="71.8066%" y="143.50"></text></g><g><title>_int_free (214 samples, 0.16%)</title><rect x="71.6289%" y="117" width="0.1579%" height="15" fill="rgb(235,160,14)"/><text x="71.8789%" y="127.50"></text></g><g><title>_int_free (564 samples, 0.42%)</title><rect x="71.8510%" y="213" width="0.4161%" height="15" fill="rgb(212,155,44)"/><text x="72.1010%" y="223.50"></text></g><g><title>alloc::alloc::box_free (766 samples, 0.57%)</title><rect x="72.2671%" y="213" width="0.5651%" height="15" fill="rgb(226,2,50)"/><text x="72.5171%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (745 samples, 0.55%)</title><rect x="72.2826%" y="197" width="0.5496%" height="15" fill="rgb(234,177,6)"/><text x="72.5326%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (745 samples, 0.55%)</title><rect x="72.2826%" y="181" width="0.5496%" height="15" fill="rgb(217,24,9)"/><text x="72.5326%" y="191.50"></text></g><g><title>_int_free (569 samples, 0.42%)</title><rect x="72.4124%" y="165" width="0.4198%" height="15" fill="rgb(220,13,46)"/><text x="72.6624%" y="175.50"></text></g><g><title>__GI___libc_free (420 samples, 0.31%)</title><rect x="73.6385%" y="165" width="0.3098%" height="15" fill="rgb(239,221,27)"/><text x="73.8885%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5,561 samples, 4.10%)</title><rect x="73.3847%" y="197" width="4.1025%" height="15" fill="rgb(222,198,25)"/><text x="73.6347%" y="207.50">&lt;all..</text></g><g><title>core::ptr::drop_in_place (5,523 samples, 4.07%)</title><rect x="73.4128%" y="181" width="4.0745%" height="15" fill="rgb(211,99,13)"/><text x="73.6628%" y="191.50">core..</text></g><g><title>_int_free (4,797 samples, 3.54%)</title><rect x="73.9484%" y="165" width="3.5389%" height="15" fill="rgb(232,111,31)"/><text x="74.1984%" y="175.50">_in..</text></g><g><title>unlink_chunk.constprop.0 (255 samples, 0.19%)</title><rect x="77.2992%" y="149" width="0.1881%" height="15" fill="rgb(245,82,37)"/><text x="77.5492%" y="159.50"></text></g><g><title>_int_free (1,091 samples, 0.80%)</title><rect x="77.5441%" y="197" width="0.8049%" height="15" fill="rgb(227,149,46)"/><text x="77.7941%" y="207.50"></text></g><g><title>__GI___libc_free (224 samples, 0.17%)</title><rect x="78.3969%" y="149" width="0.1653%" height="15" fill="rgb(218,36,50)"/><text x="78.6469%" y="159.50"></text></g><g><title>alloc::alloc::box_free (2,442 samples, 1.80%)</title><rect x="78.3489%" y="197" width="1.8015%" height="15" fill="rgb(226,80,48)"/><text x="78.5989%" y="207.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (2,431 samples, 1.79%)</title><rect x="78.3571%" y="181" width="1.7934%" height="15" fill="rgb(238,224,15)"/><text x="78.6071%" y="191.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (2,431 samples, 1.79%)</title><rect x="78.3571%" y="165" width="1.7934%" height="15" fill="rgb(241,136,10)"/><text x="78.6071%" y="175.50">a..</text></g><g><title>_int_free (2,153 samples, 1.59%)</title><rect x="78.5622%" y="149" width="1.5883%" height="15" fill="rgb(208,32,45)"/><text x="78.8122%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (262 samples, 0.19%)</title><rect x="80.1712%" y="165" width="0.1933%" height="15" fill="rgb(207,135,9)"/><text x="80.4212%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (262 samples, 0.19%)</title><rect x="80.1712%" y="149" width="0.1933%" height="15" fill="rgb(206,86,44)"/><text x="80.4212%" y="159.50"></text></g><g><title>_int_free (242 samples, 0.18%)</title><rect x="80.1859%" y="133" width="0.1785%" height="15" fill="rgb(245,177,15)"/><text x="80.4359%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (278 samples, 0.21%)</title><rect x="80.1712%" y="181" width="0.2051%" height="15" fill="rgb(206,64,50)"/><text x="80.4212%" y="191.50"></text></g><g><title>_int_free (335 samples, 0.25%)</title><rect x="80.4648%" y="181" width="0.2471%" height="15" fill="rgb(234,36,40)"/><text x="80.7148%" y="191.50"></text></g><g><title>core::ptr::drop_in_place (18,431 samples, 13.60%)</title><rect x="67.2770%" y="245" width="13.5972%" height="15" fill="rgb(213,64,8)"/><text x="67.5270%" y="255.50">core::ptr::drop_in_pl..</text></g><g><title>core::ptr::drop_in_place (13,651 samples, 10.07%)</title><rect x="70.8034%" y="229" width="10.0708%" height="15" fill="rgb(210,75,36)"/><text x="71.0534%" y="239.50">core::ptr::drop..</text></g><g><title>core::ptr::drop_in_place (10,901 samples, 8.04%)</title><rect x="72.8322%" y="213" width="8.0421%" height="15" fill="rgb(229,88,21)"/><text x="73.0822%" y="223.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place (981 samples, 0.72%)</title><rect x="80.1505%" y="197" width="0.7237%" height="15" fill="rgb(252,204,47)"/><text x="80.4005%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (220 samples, 0.16%)</title><rect x="80.7119%" y="181" width="0.1623%" height="15" fill="rgb(208,77,27)"/><text x="80.9619%" y="191.50"></text></g><g><title>_int_free (157 samples, 0.12%)</title><rect x="80.7584%" y="165" width="0.1158%" height="15" fill="rgb(221,76,26)"/><text x="81.0084%" y="175.50"></text></g><g><title>core::slice::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (752 samples, 0.55%)</title><rect x="80.8919%" y="245" width="0.5548%" height="15" fill="rgb(225,139,18)"/><text x="81.1419%" y="255.50"></text></g><g><title>&lt;[A] as core::slice::SlicePartialEq&lt;A&gt;&gt;::equal (752 samples, 0.55%)</title><rect x="80.8919%" y="229" width="0.5548%" height="15" fill="rgb(230,137,11)"/><text x="81.1419%" y="239.50"></text></g><g><title>__memcmp_avx2_movbe (586 samples, 0.43%)</title><rect x="81.0144%" y="213" width="0.4323%" height="15" fill="rgb(212,28,1)"/><text x="81.2644%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (136 samples, 0.10%)</title><rect x="82.6499%" y="229" width="0.1003%" height="15" fill="rgb(248,164,17)"/><text x="82.8999%" y="239.50"></text></g><g><title>alloc::rc::RcBoxPtr::inc_strong (136 samples, 0.10%)</title><rect x="82.6499%" y="213" width="0.1003%" height="15" fill="rgb(222,171,42)"/><text x="82.8999%" y="223.50"></text></g><g><title>alloc::rc::RcBoxPtr::inc_strong (199 samples, 0.15%)</title><rect x="82.7776%" y="197" width="0.1468%" height="15" fill="rgb(243,84,45)"/><text x="83.0276%" y="207.50"></text></g><g><title>&lt;cs::env::Interpreter as core::clone::Clone&gt;::clone (239 samples, 0.18%)</title><rect x="82.7503%" y="229" width="0.1763%" height="15" fill="rgb(252,49,23)"/><text x="83.0003%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (202 samples, 0.15%)</title><rect x="82.7776%" y="213" width="0.1490%" height="15" fill="rgb(215,19,7)"/><text x="83.0276%" y="223.50"></text></g><g><title>_int_free (164 samples, 0.12%)</title><rect x="82.9701%" y="229" width="0.1210%" height="15" fill="rgb(238,81,41)"/><text x="83.2201%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (838 samples, 0.62%)</title><rect x="83.2903%" y="213" width="0.6182%" height="15" fill="rgb(210,199,37)"/><text x="83.5403%" y="223.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (1,990 samples, 1.47%)</title><rect x="83.0911%" y="229" width="1.4681%" height="15" fill="rgb(244,192,49)"/><text x="83.3411%" y="239.50"></text></g><g><title>alloc::alloc::exchange_malloc (882 samples, 0.65%)</title><rect x="83.9085%" y="213" width="0.6507%" height="15" fill="rgb(226,211,11)"/><text x="84.1585%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (882 samples, 0.65%)</title><rect x="83.9085%" y="197" width="0.6507%" height="15" fill="rgb(236,162,54)"/><text x="84.1585%" y="207.50"></text></g><g><title>alloc::alloc::alloc (856 samples, 0.63%)</title><rect x="83.9277%" y="181" width="0.6315%" height="15" fill="rgb(220,229,9)"/><text x="84.1777%" y="191.50"></text></g><g><title>__GI___libc_malloc (818 samples, 0.60%)</title><rect x="83.9557%" y="165" width="0.6035%" height="15" fill="rgb(250,87,22)"/><text x="84.2057%" y="175.50"></text></g><g><title>core::future::from_generator (148 samples, 0.11%)</title><rect x="84.5592%" y="229" width="0.1092%" height="15" fill="rgb(239,43,17)"/><text x="84.8092%" y="239.50"></text></g><g><title>cs::env::Interpreter::evaluate_function_call (562 samples, 0.41%)</title><rect x="84.7348%" y="229" width="0.4146%" height="15" fill="rgb(231,177,25)"/><text x="84.9848%" y="239.50"></text></g><g><title>cs::env::Interpreter::evaluate (5,510 samples, 4.06%)</title><rect x="81.4828%" y="245" width="4.0649%" height="15" fill="rgb(219,179,1)"/><text x="81.7328%" y="255.50">cs::..</text></g><g><title>futures_util::future::try_future::TryFutureExt::unwrap_or_else (540 samples, 0.40%)</title><rect x="85.1494%" y="229" width="0.3984%" height="15" fill="rgb(238,219,53)"/><text x="85.3994%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (501 samples, 0.37%)</title><rect x="85.1782%" y="213" width="0.3696%" height="15" fill="rgb(232,167,36)"/><text x="85.4282%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (301 samples, 0.22%)</title><rect x="85.6717%" y="197" width="0.2221%" height="15" fill="rgb(244,19,51)"/><text x="85.9217%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (345 samples, 0.25%)</title><rect x="85.6496%" y="213" width="0.2545%" height="15" fill="rgb(224,6,22)"/><text x="85.8996%" y="223.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (353 samples, 0.26%)</title><rect x="85.6496%" y="229" width="0.2604%" height="15" fill="rgb(224,145,5)"/><text x="85.8996%" y="239.50"></text></g><g><title>cs::env::Interpreter::get_local_variable (505 samples, 0.37%)</title><rect x="85.5478%" y="245" width="0.3726%" height="15" fill="rgb(234,130,49)"/><text x="85.7978%" y="255.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (312 samples, 0.23%)</title><rect x="85.9823%" y="213" width="0.2302%" height="15" fill="rgb(254,6,2)"/><text x="86.2323%" y="223.50"></text></g><g><title>alloc::alloc::exchange_malloc (278 samples, 0.21%)</title><rect x="86.0074%" y="197" width="0.2051%" height="15" fill="rgb(208,96,46)"/><text x="86.2574%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (278 samples, 0.21%)</title><rect x="86.0074%" y="181" width="0.2051%" height="15" fill="rgb(239,3,39)"/><text x="86.2574%" y="191.50"></text></g><g><title>alloc::alloc::alloc (269 samples, 0.20%)</title><rect x="86.0140%" y="165" width="0.1985%" height="15" fill="rgb(233,210,1)"/><text x="86.2640%" y="175.50"></text></g><g><title>__GI___libc_malloc (252 samples, 0.19%)</title><rect x="86.0266%" y="149" width="0.1859%" height="15" fill="rgb(244,137,37)"/><text x="86.2766%" y="159.50"></text></g><g><title>cs::env::Interpreter::new_stack_frame (457 samples, 0.34%)</title><rect x="85.9203%" y="245" width="0.3371%" height="15" fill="rgb(240,136,2)"/><text x="86.1703%" y="255.50"></text></g><g><title>cs::env::Interpreter::with_env_and_new_locals (382 samples, 0.28%)</title><rect x="85.9757%" y="229" width="0.2818%" height="15" fill="rgb(239,18,37)"/><text x="86.2257%" y="239.50"></text></g><g><title>cs::env::Interpreter::set_local_variable (282 samples, 0.21%)</title><rect x="86.2575%" y="245" width="0.2080%" height="15" fill="rgb(218,185,22)"/><text x="86.5075%" y="255.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (167 samples, 0.12%)</title><rect x="86.3423%" y="229" width="0.1232%" height="15" fill="rgb(225,218,4)"/><text x="86.5923%" y="239.50"></text></g><g><title>cs::external_func::contains_futures (466 samples, 0.34%)</title><rect x="86.4714%" y="245" width="0.3438%" height="15" fill="rgb(230,182,32)"/><text x="86.7214%" y="255.50"></text></g><g><title>cs::lang::CodeNode::id (261 samples, 0.19%)</title><rect x="86.8705%" y="245" width="0.1925%" height="15" fill="rgb(242,56,43)"/><text x="87.1205%" y="255.50"></text></g><g><title>futures_task::waker::wake_arc_raw (248 samples, 0.18%)</title><rect x="87.1605%" y="245" width="0.1830%" height="15" fill="rgb(233,99,24)"/><text x="87.4105%" y="255.50"></text></g><g><title>futures_task::arc_wake::ArcWake::wake (232 samples, 0.17%)</title><rect x="87.1723%" y="229" width="0.1712%" height="15" fill="rgb(234,209,42)"/><text x="87.4223%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (144 samples, 0.11%)</title><rect x="87.2372%" y="213" width="0.1062%" height="15" fill="rgb(227,7,12)"/><text x="87.4872%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (144 samples, 0.11%)</title><rect x="87.2372%" y="197" width="0.1062%" height="15" fill="rgb(245,203,43)"/><text x="87.4872%" y="207.50"></text></g><g><title>futures_util::compat::compat03as01::Current::as_waker::clone (163 samples, 0.12%)</title><rect x="87.3486%" y="245" width="0.1203%" height="15" fill="rgb(238,205,33)"/><text x="87.5986%" y="255.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (171 samples, 0.13%)</title><rect x="87.5883%" y="229" width="0.1262%" height="15" fill="rgb(231,56,7)"/><text x="87.8383%" y="239.50"></text></g><g><title>futures_util::future::future::shared::Inner&lt;Fut&gt;::record_waker (378 samples, 0.28%)</title><rect x="87.4688%" y="245" width="0.2789%" height="15" fill="rgb(244,186,29)"/><text x="87.7188%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (312 samples, 0.23%)</title><rect x="87.7964%" y="229" width="0.2302%" height="15" fill="rgb(234,111,31)"/><text x="88.0464%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (211 samples, 0.16%)</title><rect x="88.0605%" y="213" width="0.1557%" height="15" fill="rgb(241,149,10)"/><text x="88.3105%" y="223.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (211 samples, 0.16%)</title><rect x="88.0605%" y="197" width="0.1557%" height="15" fill="rgb(249,206,44)"/><text x="88.3105%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::try_unwrap (375 samples, 0.28%)</title><rect x="88.0266%" y="229" width="0.2767%" height="15" fill="rgb(251,153,30)"/><text x="88.2766%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (237 samples, 0.17%)</title><rect x="88.3032%" y="213" width="0.1748%" height="15" fill="rgb(239,152,38)"/><text x="88.5532%" y="223.50"></text></g><g><title>futures_util::future::future::shared::Inner&lt;Fut&gt;::take_or_clone_output (998 samples, 0.74%)</title><rect x="87.7477%" y="245" width="0.7363%" height="15" fill="rgb(249,139,47)"/><text x="87.9977%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (245 samples, 0.18%)</title><rect x="88.3032%" y="229" width="0.1807%" height="15" fill="rgb(244,64,35)"/><text x="88.5532%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (272 samples, 0.20%)</title><rect x="88.6477%" y="229" width="0.2007%" height="15" fill="rgb(216,46,15)"/><text x="88.8977%" y="239.50"></text></g><g><title>alloc::alloc::exchange_malloc (212 samples, 0.16%)</title><rect x="88.6920%" y="213" width="0.1564%" height="15" fill="rgb(250,74,19)"/><text x="88.9420%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (212 samples, 0.16%)</title><rect x="88.6920%" y="197" width="0.1564%" height="15" fill="rgb(249,42,33)"/><text x="88.9420%" y="207.50"></text></g><g><title>alloc::alloc::alloc (206 samples, 0.15%)</title><rect x="88.6964%" y="181" width="0.1520%" height="15" fill="rgb(242,149,17)"/><text x="88.9464%" y="191.50"></text></g><g><title>__GI___libc_malloc (197 samples, 0.15%)</title><rect x="88.7031%" y="165" width="0.1453%" height="15" fill="rgb(244,29,21)"/><text x="88.9531%" y="175.50"></text></g><g><title>futures_util::future::future::shared::Shared&lt;Fut&gt;::new (571 samples, 0.42%)</title><rect x="88.4840%" y="245" width="0.4212%" height="15" fill="rgb(220,130,37)"/><text x="88.7340%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (187 samples, 0.14%)</title><rect x="89.0668%" y="165" width="0.1380%" height="15" fill="rgb(211,67,2)"/><text x="89.3168%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (190 samples, 0.14%)</title><rect x="89.0668%" y="197" width="0.1402%" height="15" fill="rgb(235,68,52)"/><text x="89.3168%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (190 samples, 0.14%)</title><rect x="89.0668%" y="181" width="0.1402%" height="15" fill="rgb(246,142,3)"/><text x="89.3168%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (331 samples, 0.24%)</title><rect x="89.0439%" y="213" width="0.2442%" height="15" fill="rgb(241,25,7)"/><text x="89.2939%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (152 samples, 0.11%)</title><rect x="89.4312%" y="165" width="0.1121%" height="15" fill="rgb(242,119,39)"/><text x="89.6812%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (173 samples, 0.13%)</title><rect x="89.4312%" y="197" width="0.1276%" height="15" fill="rgb(241,98,45)"/><text x="89.6812%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (173 samples, 0.13%)</title><rect x="89.4312%" y="181" width="0.1276%" height="15" fill="rgb(254,28,30)"/><text x="89.6812%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (786 samples, 0.58%)</title><rect x="89.0026%" y="245" width="0.5799%" height="15" fill="rgb(241,142,54)"/><text x="89.2526%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (732 samples, 0.54%)</title><rect x="89.0424%" y="229" width="0.5400%" height="15" fill="rgb(222,85,15)"/><text x="89.2924%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (399 samples, 0.29%)</title><rect x="89.2881%" y="213" width="0.2944%" height="15" fill="rgb(210,85,47)"/><text x="89.5381%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (155 samples, 0.11%)</title><rect x="90.0752%" y="229" width="0.1143%" height="15" fill="rgb(224,206,25)"/><text x="90.3252%" y="239.50"></text></g><g><title>core::mem::replace (674 samples, 0.50%)</title><rect x="90.1896%" y="229" width="0.4972%" height="15" fill="rgb(243,201,19)"/><text x="90.4396%" y="239.50"></text></g><g><title>core::mem::swap (651 samples, 0.48%)</title><rect x="90.2066%" y="213" width="0.4803%" height="15" fill="rgb(236,59,4)"/><text x="90.4566%" y="223.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (651 samples, 0.48%)</title><rect x="90.2066%" y="197" width="0.4803%" height="15" fill="rgb(254,179,45)"/><text x="90.4566%" y="207.50"></text></g><g><title>core::ptr::swap_nonoverlapping (651 samples, 0.48%)</title><rect x="90.2066%" y="181" width="0.4803%" height="15" fill="rgb(226,14,10)"/><text x="90.4566%" y="191.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (651 samples, 0.48%)</title><rect x="90.2066%" y="165" width="0.4803%" height="15" fill="rgb(244,27,41)"/><text x="90.4566%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (651 samples, 0.48%)</title><rect x="90.2066%" y="149" width="0.4803%" height="15" fill="rgb(235,35,32)"/><text x="90.4566%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (281 samples, 0.21%)</title><rect x="90.8558%" y="165" width="0.2073%" height="15" fill="rgb(218,68,31)"/><text x="91.1058%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (354 samples, 0.26%)</title><rect x="91.1981%" y="149" width="0.2612%" height="15" fill="rgb(207,120,37)"/><text x="91.4481%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,109 samples, 0.82%)</title><rect x="90.7392%" y="181" width="0.8181%" height="15" fill="rgb(227,98,0)"/><text x="90.9892%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (670 samples, 0.49%)</title><rect x="91.0631%" y="165" width="0.4943%" height="15" fill="rgb(207,7,3)"/><text x="91.3131%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1,110 samples, 0.82%)</title><rect x="90.7392%" y="213" width="0.8189%" height="15" fill="rgb(206,98,19)"/><text x="90.9892%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,110 samples, 0.82%)</title><rect x="90.7392%" y="197" width="0.8189%" height="15" fill="rgb(217,5,26)"/><text x="90.9892%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (153 samples, 0.11%)</title><rect x="91.6717%" y="165" width="0.1129%" height="15" fill="rgb(235,190,38)"/><text x="91.9217%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (322 samples, 0.24%)</title><rect x="91.5581%" y="213" width="0.2376%" height="15" fill="rgb(247,86,24)"/><text x="91.8081%" y="223.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (168 samples, 0.12%)</title><rect x="91.6717%" y="197" width="0.1239%" height="15" fill="rgb(205,101,16)"/><text x="91.9217%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (168 samples, 0.12%)</title><rect x="91.6717%" y="181" width="0.1239%" height="15" fill="rgb(246,168,33)"/><text x="91.9217%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (1,562 samples, 1.15%)</title><rect x="90.7082%" y="229" width="1.1523%" height="15" fill="rgb(231,114,1)"/><text x="90.9582%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (136 samples, 0.10%)</title><rect x="92.2007%" y="213" width="0.1003%" height="15" fill="rgb(207,184,53)"/><text x="92.4507%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert::{{closure}} (195 samples, 0.14%)</title><rect x="92.3320%" y="213" width="0.1439%" height="15" fill="rgb(224,95,51)"/><text x="92.5820%" y="223.50"></text></g><g><title>&lt;uuid::Uuid as core::cmp::PartialEq&gt;::eq (195 samples, 0.14%)</title><rect x="92.3320%" y="197" width="0.1439%" height="15" fill="rgb(212,188,45)"/><text x="92.5820%" y="207.50"></text></g><g><title>core::array::&lt;impl core::cmp::PartialEq&lt;[B: _]&gt; for [A: _]&gt;::eq (195 samples, 0.14%)</title><rect x="92.3320%" y="181" width="0.1439%" height="15" fill="rgb(223,154,38)"/><text x="92.5820%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::probe_seq (171 samples, 0.13%)</title><rect x="92.4854%" y="213" width="0.1262%" height="15" fill="rgb(251,22,52)"/><text x="92.7354%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (550 samples, 0.41%)</title><rect x="92.6123%" y="181" width="0.4058%" height="15" fill="rgb(229,209,22)"/><text x="92.8623%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (665 samples, 0.49%)</title><rect x="92.6123%" y="213" width="0.4906%" height="15" fill="rgb(234,138,34)"/><text x="92.8623%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (665 samples, 0.49%)</title><rect x="92.6123%" y="197" width="0.4906%" height="15" fill="rgb(212,95,11)"/><text x="92.8623%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (150 samples, 0.11%)</title><rect x="93.1029%" y="197" width="0.1107%" height="15" fill="rgb(240,179,47)"/><text x="93.3529%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (212 samples, 0.16%)</title><rect x="93.1029%" y="213" width="0.1564%" height="15" fill="rgb(240,163,11)"/><text x="93.3529%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (5,053 samples, 3.73%)</title><rect x="89.5832%" y="245" width="3.7278%" height="15" fill="rgb(236,37,12)"/><text x="89.8332%" y="255.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (1,966 samples, 1.45%)</title><rect x="91.8606%" y="229" width="1.4504%" height="15" fill="rgb(232,164,16)"/><text x="92.1106%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove_entry (245 samples, 0.18%)</title><rect x="93.3110%" y="245" width="0.1807%" height="15" fill="rgb(244,205,15)"/><text x="93.5610%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (735 samples, 0.54%)</title><rect x="93.5788%" y="229" width="0.5422%" height="15" fill="rgb(223,117,47)"/><text x="93.8288%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (915 samples, 0.68%)</title><rect x="93.4932%" y="245" width="0.6750%" height="15" fill="rgb(244,107,35)"/><text x="93.7432%" y="255.50"></text></g><g><title>alloc::alloc::alloc (478 samples, 0.35%)</title><rect x="94.3231%" y="229" width="0.3526%" height="15" fill="rgb(205,140,8)"/><text x="94.5731%" y="239.50"></text></g><g><title>__GI___libc_malloc (439 samples, 0.32%)</title><rect x="94.3519%" y="213" width="0.3239%" height="15" fill="rgb(228,84,46)"/><text x="94.6019%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::new_uninitialized (779 samples, 0.57%)</title><rect x="94.1682%" y="245" width="0.5747%" height="15" fill="rgb(254,188,9)"/><text x="94.4182%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (264 samples, 0.19%)</title><rect x="94.7436%" y="245" width="0.1948%" height="15" fill="rgb(206,112,54)"/><text x="94.9936%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (385 samples, 0.28%)</title><rect x="95.1332%" y="229" width="0.2840%" height="15" fill="rgb(216,84,49)"/><text x="95.3832%" y="239.50"></text></g><g><title>core::mem::swap (202 samples, 0.15%)</title><rect x="95.4482%" y="229" width="0.1490%" height="15" fill="rgb(214,194,35)"/><text x="95.6982%" y="239.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (202 samples, 0.15%)</title><rect x="95.4482%" y="213" width="0.1490%" height="15" fill="rgb(249,28,3)"/><text x="95.6982%" y="223.50"></text></g><g><title>core::ptr::swap_nonoverlapping (202 samples, 0.15%)</title><rect x="95.4482%" y="197" width="0.1490%" height="15" fill="rgb(222,56,52)"/><text x="95.6982%" y="207.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (202 samples, 0.15%)</title><rect x="95.4482%" y="181" width="0.1490%" height="15" fill="rgb(245,217,50)"/><text x="95.6982%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (202 samples, 0.15%)</title><rect x="95.4482%" y="165" width="0.1490%" height="15" fill="rgb(213,201,24)"/><text x="95.6982%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (244 samples, 0.18%)</title><rect x="95.5979%" y="165" width="0.1800%" height="15" fill="rgb(248,116,28)"/><text x="95.8479%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::free_buckets (290 samples, 0.21%)</title><rect x="95.5972%" y="181" width="0.2139%" height="15" fill="rgb(219,72,43)"/><text x="95.8472%" y="191.50"></text></g><g><title>core::ptr::drop_in_place (299 samples, 0.22%)</title><rect x="95.5972%" y="229" width="0.2206%" height="15" fill="rgb(209,138,14)"/><text x="95.8472%" y="239.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (299 samples, 0.22%)</title><rect x="95.5972%" y="213" width="0.2206%" height="15" fill="rgb(222,18,33)"/><text x="95.8472%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize::{{closure}} (299 samples, 0.22%)</title><rect x="95.5972%" y="197" width="0.2206%" height="15" fill="rgb(213,199,7)"/><text x="95.8472%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (244 samples, 0.18%)</title><rect x="95.8288%" y="165" width="0.1800%" height="15" fill="rgb(250,110,10)"/><text x="96.0788%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (144 samples, 0.11%)</title><rect x="95.9026%" y="149" width="0.1062%" height="15" fill="rgb(248,123,6)"/><text x="96.1526%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (246 samples, 0.18%)</title><rect x="95.8288%" y="197" width="0.1815%" height="15" fill="rgb(206,91,31)"/><text x="96.0788%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (246 samples, 0.18%)</title><rect x="95.8288%" y="181" width="0.1815%" height="15" fill="rgb(211,154,13)"/><text x="96.0788%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert::{{closure}} (324 samples, 0.24%)</title><rect x="95.8178%" y="229" width="0.2390%" height="15" fill="rgb(225,148,7)"/><text x="96.0678%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (311 samples, 0.23%)</title><rect x="95.8274%" y="213" width="0.2294%" height="15" fill="rgb(220,160,43)"/><text x="96.0774%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::copy_from_nonoverlapping (155 samples, 0.11%)</title><rect x="96.0568%" y="229" width="0.1143%" height="15" fill="rgb(213,52,39)"/><text x="96.3068%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (155 samples, 0.11%)</title><rect x="96.0568%" y="213" width="0.1143%" height="15" fill="rgb(243,137,7)"/><text x="96.3068%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (155 samples, 0.11%)</title><rect x="96.0568%" y="197" width="0.1143%" height="15" fill="rgb(230,79,13)"/><text x="96.3068%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (140 samples, 0.10%)</title><rect x="96.0679%" y="181" width="0.1033%" height="15" fill="rgb(247,105,23)"/><text x="96.3179%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (340 samples, 0.25%)</title><rect x="96.1712%" y="229" width="0.2508%" height="15" fill="rgb(223,179,41)"/><text x="96.4212%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize (2,131 samples, 1.57%)</title><rect x="94.9384%" y="245" width="1.5721%" height="15" fill="rgb(218,9,34)"/><text x="95.1884%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (419 samples, 0.31%)</title><rect x="96.7724%" y="229" width="0.3091%" height="15" fill="rgb(222,106,8)"/><text x="97.0224%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::try_with_capacity (903 samples, 0.67%)</title><rect x="96.5105%" y="245" width="0.6662%" height="15" fill="rgb(211,220,0)"/><text x="96.7605%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (165 samples, 0.12%)</title><rect x="97.7765%" y="117" width="0.1217%" height="15" fill="rgb(229,52,16)"/><text x="98.0265%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (486 samples, 0.36%)</title><rect x="97.6009%" y="149" width="0.3585%" height="15" fill="rgb(212,155,18)"/><text x="97.8509%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (329 samples, 0.24%)</title><rect x="97.7167%" y="133" width="0.2427%" height="15" fill="rgb(242,21,14)"/><text x="97.9667%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (488 samples, 0.36%)</title><rect x="97.6009%" y="181" width="0.3600%" height="15" fill="rgb(222,19,48)"/><text x="97.8509%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (488 samples, 0.36%)</title><rect x="97.6009%" y="165" width="0.3600%" height="15" fill="rgb(232,45,27)"/><text x="97.8509%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (682 samples, 0.50%)</title><rect x="97.5891%" y="197" width="0.5031%" height="15" fill="rgb(249,103,42)"/><text x="97.8391%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (168 samples, 0.12%)</title><rect x="98.4611%" y="149" width="0.1239%" height="15" fill="rgb(246,81,33)"/><text x="98.7111%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (218 samples, 0.16%)</title><rect x="98.4611%" y="181" width="0.1608%" height="15" fill="rgb(252,33,42)"/><text x="98.7111%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (218 samples, 0.16%)</title><rect x="98.4611%" y="165" width="0.1608%" height="15" fill="rgb(209,212,41)"/><text x="98.7111%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (844 samples, 0.62%)</title><rect x="98.0922%" y="197" width="0.6226%" height="15" fill="rgb(207,154,6)"/><text x="98.3422%" y="207.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,639 samples, 1.21%)</title><rect x="97.5072%" y="245" width="1.2091%" height="15" fill="rgb(223,64,47)"/><text x="97.7572%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (1,535 samples, 1.13%)</title><rect x="97.5839%" y="229" width="1.1324%" height="15" fill="rgb(211,161,38)"/><text x="97.8339%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (1,535 samples, 1.13%)</title><rect x="97.5839%" y="213" width="1.1324%" height="15" fill="rgb(219,138,40)"/><text x="97.8339%" y="223.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (152 samples, 0.11%)</title><rect x="98.7163%" y="245" width="0.1121%" height="15" fill="rgb(241,228,46)"/><text x="98.9663%" y="255.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (499 samples, 0.37%)</title><rect x="98.9037%" y="245" width="0.3681%" height="15" fill="rgb(223,209,38)"/><text x="99.1537%" y="255.50"></text></g><g><title>std::sys_common::mutex::Mutex::raw_lock (417 samples, 0.31%)</title><rect x="98.9642%" y="229" width="0.3076%" height="15" fill="rgb(236,164,45)"/><text x="99.2142%" y="239.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (417 samples, 0.31%)</title><rect x="98.9642%" y="213" width="0.3076%" height="15" fill="rgb(231,15,5)"/><text x="99.2142%" y="223.50"></text></g><g><title>__GI___pthread_mutex_lock (395 samples, 0.29%)</title><rect x="98.9805%" y="197" width="0.2914%" height="15" fill="rgb(252,35,15)"/><text x="99.2305%" y="207.50"></text></g><g><title>__GI___pthread_mutex_init (176 samples, 0.13%)</title><rect x="99.5109%" y="197" width="0.1298%" height="15" fill="rgb(248,181,18)"/><text x="99.7609%" y="207.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::new (613 samples, 0.45%)</title><rect x="99.2719%" y="245" width="0.4522%" height="15" fill="rgb(233,39,42)"/><text x="99.5219%" y="255.50"></text></g><g><title>std::sys_common::mutex::Mutex::init (337 samples, 0.25%)</title><rect x="99.4755%" y="229" width="0.2486%" height="15" fill="rgb(238,110,33)"/><text x="99.7255%" y="239.50"></text></g><g><title>std::sys::unix::mutex::Mutex::init (337 samples, 0.25%)</title><rect x="99.4755%" y="213" width="0.2486%" height="15" fill="rgb(233,195,10)"/><text x="99.7255%" y="223.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (239 samples, 0.18%)</title><rect x="99.7676%" y="245" width="0.1763%" height="15" fill="rgb(254,105,3)"/><text x="100.0176%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (162 samples, 0.12%)</title><rect x="99.8244%" y="229" width="0.1195%" height="15" fill="rgb(221,225,9)"/><text x="100.0744%" y="239.50"></text></g><g><title>all (135,550 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(224,227,45)"/><text x="0.2500%" y="287.50"></text></g><g><title>editor (135,550 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(229,198,43)"/><text x="0.2500%" y="271.50">editor</text></g></svg></svg>